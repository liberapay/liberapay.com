from datetime import timedelta

import stripe

from liberapay.exceptions import DuplicateNotification
from liberapay.models.participant import Participant
from liberapay.payin.common import update_payin_transfer
from liberapay.payin.stripe import (
    int_to_Money, Money_to_int, record_reversals, repr_charge_error, reverse_transfer,
    settle_charge,
)
from liberapay.utils import utcnow

SIX_HOURS = timedelta(hours=6)
PRODUCTION = website.env.instance_type == 'production'

[---]

request.allow('POST')
payload = request.body_bytes
sig = request.headers[b'Stripe-Signature'].decode('ascii', 'replace')
if 'connect' in request.qs:
    secret = website.app_conf.stripe_connect_callback_secret
else:
    secret = website.app_conf.stripe_callback_secret
try:
    event = stripe.Webhook.construct_event(payload, sig, secret)
except ValueError as e:
    raise response.error(400, str(e))
except stripe.error.SignatureVerificationError:
    raise response.error(403, "invalid signature")

if event.livemode != PRODUCTION:
    raise response.error(400, "environment mismatch")

event_object_type, status = event.type.rsplit('.', 1)

if event_object_type == 'charge':
    charge = event.data.object
    payin_id = charge.metadata['payin_id']
    payin = website.db.one("""
        SELECT *
          FROM payins
         WHERE id = %s
    """, (payin_id,))
    assert payin
    if payin.ctime > (utcnow() - timedelta(minutes=50)):
        raise response.error(409, "This callback is too early.")
    payin = settle_charge(website.db, payin, charge)
    if status in ('failed', 'succeeded') and payin.ctime < (utcnow() - SIX_HOURS):
        payer = Participant.from_id(payin.payer)
        payer.notify(
            'payin_' + payin.status,
            payin=payin._asdict(),
            provider='Stripe',
            email_unverified_address=True,
        )

elif event_object_type == 'charge.dispute':
    dispute = event.data.object
    charge = stripe.Charge.retrieve(dispute.charge)
    payin_id = charge.metadata['payin_id']
    payin = website.db.one("SELECT * FROM payins WHERE id = %s", (payin_id,))
    route = website.db.one("SELECT r FROM exchange_routes r WHERE id = %s", (payin.route,))
    if route.status != 'canceled':
        route.invalidate()
    payin = settle_charge(website.db, payin, charge)
    if dispute.status == 'lost':
        if dispute.amount != charge.amount:
            raise NotImplementedError("partial chargebacks aren't implemented")
        transfers = website.db.all("""
            SELECT pt.*
              FROM payin_transfers pt
             WHERE pt.payin = %s
               AND coalesce(pt.reversed_amount < pt.amount, true)
        """, (payin.id,))
        for pt in transfers:
            if pt.status == 'succeeded':
                reverse_transfer(
                    website.db, pt, idempotency_key=f'{dispute.id}_pt_{pt.id}',
                )
            elif pt.status == 'pending':
                update_payin_transfer(
                    website.db, pt.id, None, 'failed', 'canceled due to chargeback'
                )
    # Notify the person who initiated the payment
    payer = Participant.from_id(payin.payer)
    if dispute.status in ('needs_response', 'lost'):
        try:
            payer.notify(
                'payin_disputed',
                email_unverified_address=True,
                force_email=True,
                idem_key=dispute.id,
                payin_id=payin.id,
                payin_amount=payin.amount,
                payin_ctime=payin.ctime,
                dispute_reason=dispute.reason,
                dispute_can_be_withdrawn=dispute.status == 'needs_response',
                mandate_url=route.get_mandate_url(),
            )
        except DuplicateNotification:
            pass
    else:
        raise NotImplementedError(dispute.status)

elif event.type == 'transfer.reversed':
    transfer = event.data.object
    pt_id = transfer.metadata.get('payin_transfer_id')
    if pt_id:
        pt = website.db.one("SELECT * FROM payin_transfers WHERE id = %s", (pt_id,))
    else:
        charge = stripe.Charge.retrieve(transfer.source_transaction)
        payin_id = charge.metadata['payin_id']
        pt = website.db.one("""
            SELECT *
              FROM payin_transfers
             WHERE payin = %s
               AND remote_id = %s
        """, (payin_id, transfer.id))
    assert pt
    if pt.ctime > (utcnow() - timedelta(minutes=50)):
        raise response.error(409, "This callback is too early.")
    assert pt.status == 'succeeded', \
        f"received a `transfer.reversed` callback for a transfer whose status is {pt.status!r}"
    record_reversals(website.db, pt, transfer)
    fee = transfer.amount - Money_to_int(pt.amount)
    reversed_amount = transfer.amount_reversed - fee
    if reversed_amount:
        update_payin_transfer(
            website.db, pt.id, None, pt.status, pt.error,
            reversed_amount=int_to_Money(reversed_amount, transfer.currency),
        )

elif event.type == 'account.updated':
    account = event.data.object
    website.db.run("""
        UPDATE payment_accounts
           SET country = %(country)s
             , default_currency = %(default_currency)s
             , charges_enabled = %(charges_enabled)s
             , display_name = %(display_name)s
         WHERE id = %(account_id)s
    """, dict(
        country=account.country,
        default_currency=account.default_currency.upper(),
        charges_enabled=account.charges_enabled,
        display_name=account.settings.dashboard.display_name,
        account_id=account.id,
    ))

elif event.type == 'account.application.deauthorized':
    # Doc: https://stripe.com/docs/connect/webhooks
    if event.data.object.id != website.app_conf.stripe_connect_id:
        raise response.error(400, (
            "application IDs don't match: {event.data.object.id!r} != "
            "{website.app_conf.stripe_connect_id!r}"
        ))
    website.db.run("""
        UPDATE payment_accounts
           SET is_current = null
             , authorized = false
         WHERE id = %s
    """, (event.account,))

else:
    raise response.error(500, "unknown event object type %r" % event_object_type)

[---] text/plain
OK
