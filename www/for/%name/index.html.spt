from liberapay.utils import get_community, markdown

query_cache = website.db_qc1

[---]

community = get_community(state, restrict=False)
participant = community.participant  # used by profile-base.html

limit = min(request.qs.get_int('limit', 18), 60)
offset = request.qs.get_int('offset', 0)
if limit not in (18, 60):
    raise response.error(400, "bad `limit` value in querystring")

members = query_cache.all("""
    SELECT p
         , ( SELECT s.content
               FROM statements s
              WHERE s.participant = p.id
                AND s.type = 'summary'
           ORDER BY s.lang = %s DESC, s.id
              LIMIT 1
           ) AS summary
      FROM participants p
      JOIN community_memberships cc ON cc.participant = p.id AND cc.community = %s
     WHERE cc.is_on
  ORDER BY cc.ctime DESC
     LIMIT %s
    OFFSET %s
""", (locale.language, community.id, limit, offset))

title = pretty_name = community.pretty_name

[---]
% from 'templates/profile-box.html' import profile_box_embedded with context

% extends "templates/profile-base.html"

{% block before_content %}{% endblock %}

% block content
<div class="row">
<div class="col-md-8">

    % if user.id == community.creator
        <a class="btn btn-default pull-right" href="/for/{{ community.name }}/edit">{{ _("Edit") }}</a>
    % endif

    <h2 class="no-margin-top">{{ title }}
        <small>{{
            community.participant.get_statement(request.accept_langs, 'subtitle')[0] or ''
        }}</small>
    </h2>

    <p>{{ ngettext(
        "This community was created {timespan_ago} and has {n} member.",
        "This community was created {timespan_ago} and has {n} members.",
        community.nmembers, timespan_ago=to_age(community.ctime, add_direction=True)
    ) }}</p>

    <p>{{ _(
        "Are you a contributor in the {0} community? Then join it on Liberapay!"
        "\nSoon you'll be able to advertise your community projects here and "
        "post status updates about your work.",
        pretty_name
    ).replace('\n', '<br>'|safe) }}</p>

    % set is_member = community.check_membership_status(user)
    % set action = 'leave' if is_member else 'join'
    <form action="/for/{{ community.name }}/{{ action }}" method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
        <button class="btn btn-{{ 'danger' if is_member else 'primary' }}">
            {{ _("Leave") if is_member else _("Join") }}
        </button>
    </form>

    % if members
    <h3>{{ _("New Members") }}</h3>
    <div class="inline-boxes">
        % for m, summary in members
            {{ profile_box_embedded(m, summary) }}
        % endfor
    </div>
    % endif

</div>
<div class="col-md-4">

    <div class="alert alert-info">{{ _(
        "Community newsletters will help you stay informed about what's going "
        "on and which projects need support. They're not operational yet but "
        "you can already subscribe."
    ).replace('\n', '<br>'|safe) }}</div>

    % set is_subscribed = community.participant.check_subscription_status(user)
    % set action = 'unsubscribe' if is_subscribed else 'subscribe'
    <form action="/for/{{ community.name }}/{{ action }}" method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
        <button class="btn btn-{{ 'danger' if is_subscribed else 'success' }}">
            {{ _("Unsubscribe") if is_subscribed else _("Subscribe") }}
        </button>
        <p>{{ ngettext("{n} subscriber", "{n} subscribers", community.nsubscribers) }}</p>
    </form>

    % set sidebar = community.participant.get_statement(request.accept_langs, 'sidebar')
    <section class="community-sidebar" lang="{{ sidebar.lang or '' }}">{{
        markdown.render(sidebar.content or '')
    }}</section>

</div>
</div>
% endblock
