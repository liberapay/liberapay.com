from collections import OrderedDict

query_cache = website.db_qc5

INF = float('inf')

[---]

platforms = query_cache.all("""
    SELECT platform, json_build_object('n_connected_accounts', c, 'min_id', min_id)
      FROM (
        SELECT e.platform, count(*) as c, min(p.id) as min_id
          FROM elsewhere e
          JOIN participants p ON p.id = e.participant
         WHERE p.status = 'active'
           AND p.hide_from_lists = 0
      GROUP BY e.platform
           ) a
  ORDER BY c DESC, platform ASC
""")
platforms = OrderedDict(
    (p_name, (getattr(website.platforms, p_name), d)) for p_name, d in platforms
)

platform_name = request.path['platform']
platform = website.platforms.get(platform_name)
if platform_name and not platform:
    raise response.error(404)

account = None

if platform:
    order = request.qs.get('order') or 'any'
    if order not in ('any', 'random', 'latest'):
        raise response.invalid_input(order, 'order', 'querystring')

    limit = min(request.qs.get_int('limit', 18), 60)
    if limit not in (18, 60):
        raise response.invalid_input(limit, 'limit', 'querystring')
    last_shown = request.qs.get_int('last_shown', INF)

    def get_participants(random):
        return query_cache.all("""
            SELECT p
                 , ( SELECT s.content
                       FROM statements s
                      WHERE s.participant = p.id
                        AND s.type = 'summary'
                   ORDER BY s.lang = %s DESC, s.id
                      LIMIT 1
                   ) AS summary
              FROM elsewhere e
              JOIN participants p ON p.id = e.participant
             WHERE p.status = 'active'
               AND p.hide_from_lists = 0
               AND e.platform = %s
               AND p.id < %s
          ORDER BY (CASE WHEN %s THEN random() ELSE 0 END), p.id DESC
             LIMIT %s
        """, (locale.language, platform_name, last_shown, random, limit))

    get_other_platforms = lambda: [
        p for p, d in platforms.values() if p.name != platform_name
    ]

title = _("Explore")
subhead = _("Social Networks")

[---] text/html
% from "templates/macros/elsewhere.html" import platform_logo with context
% from 'templates/macros/profile-box.html' import profile_box_embedded with context

% extends "templates/layouts/explore.html"

% block content

% if not platform

    <p>{{ _("Which platform would you like to explore?") }}</p>
    % for p, d in platforms.values()
        % set n_connected_accounts = d['n_connected_accounts']
        % if n_connected_accounts or p in website.friends_platforms
        <div class="card card-default card-md card-narrow text-center overlaid">
            <h2 class="text-info">{{ platform_logo(p) }}<br>{{ p.display_name }}</h2>
            <p>{{ ngettext("{n} connected account", "{n} connected accounts", n_connected_accounts) }}</p>
            <a class="overlay" href="/explore/elsewhere/{{ p.name }}" draggable="false"
                ><span class="sr-only">{{ _("Explore {0}", p.display_name) }}</span></a>
        </div>
        % endif
    % endfor

% else

    % if platform in website.friends_platforms
    <p class="text-center">
        <a class="btn btn-primary btn-lg btn-wrap" href="/on/{{ platform_name }}">{{
            _("Explore Your {0} Contacts", platform.display_name)
        }}</a>
    </p>
    <br>
    % endif

    % set platform_extra = platforms[platform_name][1]
    % set n_accounts_total = platform_extra['n_connected_accounts']
    % set partial_list = n_accounts_total > limit
    % set random = order == 'random' or partial_list and order == 'any'
    % set participants = get_participants(random=random)
    % if partial_list
        % if random
            <p>{{ ngettext(
                "",
                "Here are {n} random Liberapay users who have connected their {0} account:",
                len(participants), platform.display_name) }}</p>
        % else
            <p>{{ ngettext(
                "",
                "This page shows {n} Liberapay users who have connected their {0} account, in reverse chronological order.",
                len(participants), platform.display_name
            ) }}</p>
        % endif
    % elif participants
        <p>{{ ngettext(
            "Here is the {n} Liberapay user who has connected their {0} account:",
            "Here are the {n} Liberapay users who have connected their {0} account:",
            len(participants), platform.display_name
        ) }}</p>
    % endif
    <div class="inline-boxes">
    % for p, summary in participants
        {{ profile_box_embedded(p, summary) }}
    % endfor
    </div>

    % set last_id = participants[-1][0].id if participants and not random else INF
    % if partial_list
        <br>
        % if last_id > platform_extra['min_id']
        <p><a class="btn btn-default" rel="nofollow"
              href="?order=latest&amp;limit=60{{ '&last_shown=%s' % last_id if not random }}"
              >{{ _("Next Page →") if not random else _("View More") }}</a></p>
        % else
        <p><a class="btn btn-default" rel="nofollow" href="?order=latest&amp;limit=60"
              >⇤ {{ _("First") }}</a></p>
        % endif
    % endif

    <br>
    <p>{{ _("Explore other platforms:") }}</p>
    % from "templates/macros/nav.html" import nav with context
    <nav class="buttons">
    % for platform in get_other_platforms()
        <a class="btn btn-default" href="/explore/elsewhere/{{ platform.name }}">{{
            platform_logo(platform) }}<br>{{ platform.display_name }}</a>
    % endfor
    </nav>

% endif

% endblock
