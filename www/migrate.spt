from pando import json
from pando.utils import utcnow
import requests

from liberapay.elsewhere._base import UserInfo
from liberapay.exceptions import LoginRequired, UsernameAlreadyTaken
from liberapay.i18n.base import SEARCH_CONFS
from liberapay.models.account_elsewhere import AccountElsewhere
from liberapay.models.participant import NeedConfirmation, Participant
from liberapay.utils.emails import normalize_email_address

pledge_platforms = {'github', 'twitter'}

gratipay_migrate_url = website.env.gratipay_base_url + '/~%s/migrate'
gratipay_team_image_url = website.env.gratipay_base_url + '/%s/image?size=large'

platform = 'Gratipay'

[---]

step = request.qs.get('step', '1')

if step == '1':
    username = request.body.get('username')

elif step == '2':
    request.allow('POST')
    body = request.body
    conflict = None
    if user.ANON:
        email = body['email_address'] or ''
        conflict = Participant.from_email(email)
        if conflict:
            conflict = (conflict, 'email')
        else:
            conflict = Participant.from_username(body['username'])
            if conflict:
                conflict = (conflict, 'username')
    if not conflict or body.get('ignore-conflict') == 'true':
        data = None
        if not user.ANON:
            event = user.get_last_event_of_type('gratipay_import')
            data = event.payload if event else None
        if not data:
            r = requests.post(
                gratipay_migrate_url % (body['username'],),
                data={
                    'csrf_token': 'ThisIsATokenThatIsThirtyTwoBytes',
                    'secret': website.env.secret_for_gratipay,
                },
                cookies={
                    'csrf_token': 'ThisIsATokenThatIsThirtyTwoBytes',
                    'session': body['session_token'],
                }
            )
            if r.status_code != 200:
                raise response.error(502, _(
                    "Fetching your account data from {platform} has failed (error code {x}). "
                    "If the problem persists please contact support@liberapay.com."
                    , platform=platform, x=r.status_code
                ))
            data = r.json()
        conflict_type = conflict[1] if conflict else None
        result = {}

        with website.db.get_cursor() as cursor:
            orig_data = dict(data)
            if user.ANON:
                email = body['email_address']
                email_is_verified = email == data['email_address']
                email = normalize_email_address(email)
                p = Participant.make_stub(
                    cursor=cursor,
                    status='active',
                    kind='individual',
                    main_currency='USD',
                    join_time=utcnow(),
                    hide_giving=data.pop('anonymous_giving'),
                    avatar_url=data.pop('avatar_url'),
                    email=email if email_is_verified else None,
                    email_lang=data.pop('email_lang'),
                    hide_from_search=int(not data.pop('is_searchable')),
                )
                if not email_is_verified:
                    p.add_email(email, cursor=cursor)
            else:
                p = user
                cursor.run("SELECT id FROM participants WHERE id = %s FOR UPDATE", (p.id,))
            p.add_event(cursor, 'gratipay_import', orig_data)
            # Emails
            emails = result['emails'] = []
            existing_emails = {e.address: e for e in p.get_emails()}
            for e in data.pop('email_addresses'):
                existing_row = existing_emails.get(e['address'])
                if existing_row:
                    emails.append((existing_row.address, existing_row.verified, 'already-done'))
                    continue
                i = cursor.one("""
                    INSERT INTO emails
                                (address, verified, added_time, verified_time, participant)
                         VALUES (%(address)s, %(verified)s, %(verification_start)s, %(verification_end)s, %(p_id)s)
                    ON CONFLICT (lower(address), verified) DO NOTHING
                      RETURNING id
                """, dict(e, p_id=p.id))
                emails.append((e['address'], e['verified'], 'conflict' if i is None else 'added'))

        try:
            # Donations/pledges
            donations = result['donations'] = []
            pledges = result['pledges'] = []
            rejected_tips = result['rejected_tips'] = []
            for pi in data.pop('payment_instructions'):
                email = pi['email_address']
                tippee = Participant.from_email(email) if email else None
                if not tippee:
                    elsewhere = website.db.one("""
                        SELECT (e, p)::elsewhere_with_participant
                          FROM elsewhere e
                          JOIN participants p ON p.id = e.participant
                          JOIN jsonb_array_elements(%s::jsonb) a ON a->>0 = e.platform AND a->>1 = e.user_id
                         WHERE e.domain = ''
                      ORDER BY p.npatrons DESC
                             , e.platform = 'github' DESC
                             , e.platform = 'twitter' DESC
                             , e.id
                         LIMIT 1
                    """, (json.dumps([[e['platform'], e['user_id']] for e in pi['elsewhere_accounts']]),))
                    if not elsewhere:
                        e = None
                        for d in pi['elsewhere_accounts']:
                            if d['platform'] not in pledge_platforms:
                                continue
                            try:
                                platform = getattr(website.platforms, d['platform'])
                                e = platform.get_user_info('', 'user_id', d['user_id'])
                                break
                            except Exception:
                                continue
                        if not e:
                            continue
                        with website.db.get_cursor() as cursor:
                            tippee = cursor.one("""
                            INSERT INTO participants
                                        (main_currency, avatar_url)
                                 VALUES ('USD', %s)
                              RETURNING participants
                            """, (e.avatar_url,))
                            elsewhere = cursor.one("""
                            INSERT INTO elsewhere
                                        (platform, user_id, user_name, display_name, email,
                                         is_team, avatar_url, extra_info, domain, participant)
                                 VALUES (%s, %s, %s, %s, %s,
                                         %s, %s, %s, '', %s)
                              RETURNING elsewhere::elsewhere_with_participant
                            """, (e.platform, e.user_id, e.user_name, e.display_name, e.email,
                                  e.is_team, e.avatar_url, json.dumps(e.extra_info), tippee.id))
                        del e
                    tippee = elsewhere.participant
                if tippee == p:
                    continue
                if tippee.accepts_tips:
                    amount = Money(pi['amount'], 'USD')
                    if amount == 0:
                        continue
                    if 'USD' not in tippee.accepted_currencies_set:
                        amount = amount.convert(tippee.main_currency)
                    d = p.set_tip_to(tippee, amount)
                    if tippee.status == 'stub':
                        d['platform'] = elsewhere.platform_data.display_name
                        d['tippee_name'] = elsewhere.friendly_name
                        pledges.append((pi, d))
                    else:
                        d['tippee_name'] = tippee.username
                        donations.append((pi, d))
                else:
                    rejected_tips.append((pi, tippee.id, tippee.username))
        except Exception as e:
            result['donations'] = website.tell_sentry(e, state)['sentry_ident']

        try:
            # Elsewhere
            elsewhere = result['elsewhere'] = []
            skip = dict(website.db.all("""
                SELECT platform, user_id FROM elsewhere WHERE participant = %s
            """, (p.id,)))
            for e in data.pop('elsewhere'):
                if e['platform'] not in website.platforms:
                    continue
                if e['platform'] in skip:
                    if skip[e['platform']] == e['user_id']:
                        elsewhere.append(('already-done', e))
                    else:
                        elsewhere.append(('self-conflict', e))
                    continue
                e['extra_info'] = json.dumps(e['extra_info'])
                added = website.db.one("""
                    INSERT INTO elsewhere
                                (platform, user_id, user_name, display_name, email,
                                 is_team, extra_info, domain, participant)
                         VALUES (%(platform)s, %(user_id)s, %(user_name)s, %(display_name)s, %(email)s,
                                 %(is_team)s, %(extra_info)s, '', %(p_id)s)
                    ON CONFLICT (platform, user_id, domain) DO NOTHING
                      RETURNING true AS added
                """, dict(e, p_id=p.id))
                if not added:
                    try:
                        p.take_over((e['platform'], '', e['user_id']))
                        added = True
                    except NeedConfirmation:
                        pass
                elsewhere.append(('added', e) if added else ('conflict', e))
        except Exception as e:
            result['elsewhere'] = website.tell_sentry(e, state)['sentry_ident']

        try:
            # Statements
            statements = result['statements'] = {True: 0, False: 0}
            for s in data.pop('statements'):
                search_conf = SEARCH_CONFS.get(s['lang'], 'simple')
                inserted = website.db.one("""
                    INSERT INTO statements
                                (participant, type, lang, content, search_conf, ctime, mtime)
                         VALUES (%s, 'profile', %s, %s, %s, current_timestamp, current_timestamp)
                    ON CONFLICT (participant, type, lang) DO NOTHING
                      RETURNING id
                """, (p.id, s['lang'], s['content'], search_conf))
                statements[inserted is not None] += 1
        except Exception as e:
            result['statements'] = website.tell_sentry(e, state)['sentry_ident']

        teams = result['teams'] = []
        for team_data in data.pop('teams'):
            try:
                slug = team_data['slug']
                with website.db.get_cursor() as cursor:
                    if slug == data['username']:
                        result['self_username_conflict'] = data['username']
                    t = cursor.one("""
                        INSERT INTO participants
                                    (kind, status, join_time, main_currency, avatar_url)
                             VALUES ('group', 'active', now(), 'USD', %s)
                          RETURNING participants
                    """, (gratipay_team_image_url % slug,))
                    t.change_username(slug, cursor=cursor)
                    t.add_event(cursor, 'gratipay_import', team_data)
                    t.add_member(p, cursor)
                    statement = team_data.pop('product_or_service') or ''
                    homepage = team_data['homepage']
                    if homepage and homepage not in statement:
                        statement = statement.rstrip() + ('\n\n[Homepage](%s)' % homepage)
                    cursor.run("""
                        INSERT INTO statements
                                    (participant, type, lang, content, search_conf, ctime, mtime)
                             VALUES (%s, 'profile', 'en', %s, 'english', current_timestamp, current_timestamp)
                    """, (t.id, statement))
                    teams.append((t.id, team_data))
            except UsernameAlreadyTaken:
                t = Participant.from_username(slug)
                if t.kind == 'group' and p.member_of(t):
                    teams.append((t.id, team_data))
                else:
                    teams.append((None, team_data))
            except Exception as e:
                team_data['_error_id'] = website.tell_sentry(e, state)['sentry_ident']
                teams.append(('error', team_data))

        if not result.get('self_username_conflict'):
            try:
                p.change_username(data['username'])
            except UsernameAlreadyTaken:
                result['unavailable_username'] = data['username']

        p.add_event(website.db, 'gratipay_import_result', result)

        p.authenticated = True
        p.sign_in(response.headers.cookie)
        state['user'] = p
        raise response.redirect('?step=3')

elif step == '3':
    if user.ANON:
        raise LoginRequired()
    p = user
    result = user.get_last_event_of_type('gratipay_import_result')
    if not result:
        raise response.error(400, "missing import result")
    result = result.payload

title = _("Migrating from Gratipay")

[---] text/html
% extends "templates/layouts/base-thin.html"

% block thin_content
    % if step == '1' and not username
        <p class="alert alert-warning">{{ _("Oops, you need to go back to Gratipay and log in before starting the migration.") }}</p>
        <a class="btn btn-primary btn-lg" href="https://gratipay.com/">{{ _("Go back") }}</a>

    % elif step == '1'
        <form action="?step=2" method="POST">
            <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
            % include "templates/form-repost.html"
            <p>{{ _("Welcome, {username}!", username=username) }}</p>
            <p>{{ _(
                "Please confirm that you want us to create a Liberapay account "
                "for you and import data from {platform}.",
                platform=platform
            ) }}</p>
            <p>{{ _(
                "Here is an overview of what we will import from {platform}:",
                platform=platform
            ) }}</p>
            <ul class="status-list list-yes">
                <li>{{ _("basic account data (username, avatar, some privacy settings, etc.)") }}</li>
                <li>{{ _("profile descriptions") }}</li>
                <li>{{ _("teams (we will create them for you)") }}</li>
                <li>{{ _("ongoing donations (if the donee hasn't joined Liberapay yet a pledge will be created instead)") }}</li>
                <li>{{ _("elsewhere accounts (e.g. if your Twitter account is connected to your {platform} account it will also be linked on Liberapay)", platform=platform) }}</li>
                <li>{{ _("email addresses (we won't ask you to prove ownership when it's already been verified by {platform})", platform=platform) }}</li>
            </ul>
            <p>{{ _("and what we cannot import:") }}</p>
            <ul class="status-list list-no">
                <li>{{ _("any saved credit card number") }}</li>
                <li>{{ _("any money currently in the account") }}</li>
                <li>{{ _("the account's history (ledger, etc.)") }}</li>
            </ul>
            % if '@' not in request.body['email_address']
                <p>{{ _("Please input an email address (your {platform} account doesn't have a primary one):", platform=platform) }}</p>
                <div class="form-group">
                <input name="email_address" autocomplete="email" class="form-control" size=40
                       required placeholder="{{ _('Email address') }}" />
                </div>
            % endif
            <button class="btn btn-primary btn-lg">{{ _("Proceed") }}</button>
            <br><br>
            <p class="alert alert-info">{{ _(
                "By creating a Liberapay account you accept our {0}Terms of Service{1}.",
                '<a href="/about/legal#terms">'|safe, '</a>'|safe,
            ) }}</p>
        </form>

    % elif step == '2' and conflict
        % set existing_account, conflict_type = conflict
        % if conflict_type == 'username'
            <form action="" method="POST">
                % include "templates/form-repost.html"
                <div class="alert alert-danger">{{ _(
                    "The username '{0}' is already taken.",
                    '<a href="%s">%s</a>'|safe % (existing_account.path(''), existing_account.username)
                ) }}</div>
                <p>{{ _("Does this existing account belong to you?") }}</p>
                <p class="buttons">
                    <button class="btn btn-default btn-lg"
                            name="log-in.id" value="{{ existing_account.email }}"
                            >{{ _("Yes") }}</button>
                    <button class="btn btn-default btn-lg"
                            name="ignore-conflict" value="true"
                            >{{ _("No") }}</button>
                </p>
            </form>
        % else
            <form action="" method="POST">
                % include "templates/form-repost.html"
                <div class="alert alert-danger">{{ _(
                    "{0} is already connected to a different Liberapay account.",
                    existing_account.email
                ) }}</div>
                <p>{{ _("If this address belongs to you please log in before continuing:") }}</p>
                <button class="btn btn-default"
                        name="log-in.id" value="{{ existing_account.email }}"
                        >{{ _("Log in") }}</button>
                <br><br>
            </form>
            <form action="" method="POST">
                % include "templates/form-repost.html"
                <p>{{ _("Otherwise please input an email address which does belong to you:") }}</p>
                <div class="form-group">
                <input name="email_address" autocomplete="email" class="form-control" size=40
                       required placeholder="{{ _('Email address') }}" />
                </div>
                <button class="btn btn-default">{{ _("Proceed") }}</button>
            </form>
        % endif

    % elif step == '3'
        <p class="alert alert-success">{{ _(
            "The data import from {platform} has been successfully completed.", platform=platform
        ) }}</p>

        <h3>{{ _("Profile") }}</h3>
        % if result.self_username_conflict
            <div class="alert alert-warning">{{ _(
                "Your username \"{0}\" was the same as your team's name, so it was "
                "attributed to the team instead of your personal account.",
                result.self_username_conflict
            ) }}</div>
        % elif result.unavailable_username
            <div class="alert alert-danger">{{ _(
                "The username '{0}' is already taken.",
                result.unavailable_username
            ) }}</div>
        % endif
        % if isinstance(result.statements, dict)
        <p>{{ ngettext(
            "{n} profile statement was imported.",
            "{n} profile statements were imported.",
            result.statements[True]
        ) }}</p>
        % else
        <div class="alert alert-danger">{{ _(
            "The import failed, sorry. The error has been recorded, we'll fix it as soon as possible. Identifier: {0}.",
            result.statements
        ) }}</div>
        % endif
        % if isinstance(result.elsewhere, list)
        <p>{{ ngettext(
            "{n} elsewhere account was imported:",
            "{n} elsewhere accounts were imported:",
            len(result.elsewhere)
        ) }}</p>
        <ul class="status-list">
        % for status, e in result.elsewhere
            % if status == 'added'
                <li class="ok-success">{{ _(
                    "The {elsewhere_platform} account \"{account_name}\" has been linked to your Liberapay profile.",
                    elsewhere_platform=e['platform'],
                    account_name=(e['user_name'] or e['display_name']),
                ) }}</li>
            % elif status == 'already-done'
                <li class="ok-info">{{ _(
                    "The {elsewhere_platform} account \"{account_name}\" was already linked to your Liberapay profile.",
                    elsewhere_platform=e['platform'],
                    account_name=(e['user_name'] or e['display_name']),
                ) }}</li>
            % elif status == 'self-conflict'
                <li class="not-ok-warning">{{ _(
                    "The {elsewhere_platform} account \"{account_name}\" could not be linked to "
                    "your Liberapay profile because another {elsewhere_platform} account was "
                    "already linked.",
                    elsewhere_platform=e['platform'],
                    account_name=(e['user_name'] or e['display_name']),
                ) }}</li>
            % elif status == 'conflict'
                <li class="not-ok-danger">{{ _(
                    "The {elsewhere_platform} account \"{account_name}\" could not be linked to "
                    "your Liberapay profile because it was already linked to another account.",
                    elsewhere_platform=e['platform'],
                    account_name=(e['user_name'] or e['display_name']),
                ) }}</li>
            % endif
        % endfor
        </ul>
        % else
        <div class="alert alert-danger">{{ _(
            "The import failed, sorry. The error has been recorded, we'll fix it as soon as possible. Identifier: {0}.",
            result.elsewhere
        ) }}</div>
        % endif
        <p><a class="btn btn-default" href="{{ p.path('edit') }}" target="_blank">{{ _("Edit your profile") }}</a></p>

        <h3>{{ _("Teams") }}</h3>
        % for team_id, team_data in result.teams
            <h4>{{ team_data['slug'] }}</h4>
            % if team_id == 'error'
                <div class="alert alert-danger">{{ _(
                    "The import failed, sorry. The error has been recorded, we'll fix it as soon as possible. Identifier: {0}.",
                    team_data['_error_id']
                ) }}</div>
            % elif team_id
                <p><a class="btn btn-default" href="/~{{ team_id }}/edit" target="_blank">{{ _("Manage this team") }}</a></p>
            % else
                <p class="alert alert-danger">{{ _(
                    "This team was not recreated because an account named \"{0}\" already exists.",
                    ('<a href="/{0}">{0}</a>'|safe).format(team_data['slug'])
                ) }}</p>
            % endif
        % else
            <p>{{ _("No teams were imported.") }}</p>
        % endfor

        <h3>{{ _("Donations") }}</h3>
        % if isinstance(result.donations, list)
        <ul class="status-list">
        % for pi, donation in result.donations
            % if donation['amount']['amount'] > 0
            <li class="ok-success">{{ _(
                "Your donation of {money_amount} per week to {name} on {platform} "
                "has been recreated on Liberapay and allocated to {name2} based on "
                "email address matching.",
                money_amount=Money(**donation['amount']), name=pi['name'], platform=platform,
                name2=('<a href="/~%s">%s</a>'|safe % (donation['tippee'], donation['tippee_name'])),
            ) }}</li>
            % endif
        % endfor
        % for pi, pledge in result.pledges
            % if pledge['amount']['amount'] > 0
            <li class="ok-info">{{ _(
                "Your donation of {money_amount} per week to {name} on {platform} "
                "has been recreated on Liberapay as a pledge to the {elsewhere_platform} "
                "user {name2}.",
                money_amount=Money(**pledge['amount']), name=pi['name'], platform=platform,
                elsewhere_platform=pledge['platform'],
                name2=('<a href="/~%s">%s</a>'|safe % (pledge['tippee'], pledge['tippee_name'])),
            ) }}</li>
            % endif
        % endfor
        % for pi, tippee_id, tippee_username in result.rejected_tips
            % if float(pi['amount']) > 0
            <li class="not-ok-danger">{{ _(
                "Your donation of {money_amount} per week to {name} on {platform} "
                "was not recreated because {name2} has opted out of receiving "
                "donations on Liberapay.",
                money_amount=Money(pi['amount'], 'USD'), name=pi['name'], platform=platform,
                name2=('<a href="/~%s">%s</a>'|safe % (pledge['tippee'], pledge['tippee_name'])),
            ) }}</li>
            % endif
        % endfor
        </ul>
        <p class="buttons">
            <a class="btn btn-default" href="{{ p.path('giving') }}" target="_blank">{{ _("Manage your donations") }}</a>
        % if len(result.donations) and p.balance == 0
            &nbsp;
            <a class="btn btn-default" href="{{ p.path('giving/pay') }}" target="_blank">{{ _("Add money") }}</a>
        % endif
        </p>
        % else
        <div class="alert alert-danger">{{ _(
            "The import failed, sorry. The error has been recorded, we'll fix it as soon as possible. Identifier: {0}.",
            result.donations
        ) }}</div>
        % endif

        <h3>{{ _("Email addresses") }}</h3>
        <ul class="status-list">
        % for address, verified, status in result.emails
            % if status == 'added' and verified
                <li class="ok-success">{{ _(
                    "The email address {0} has been linked to your Liberapay account.", address,
                ) }}</li>
            % elif status == 'added'
                <li class="ok-info">{{ _(
                    "The email address {0} has been linked to your Liberapay account, "
                    "however it still needs to be verified.",
                    address,
                ) }}</li>
            % elif status == 'already-done'
                <li class="ok-info">{{ _(
                    "The email address {0} was already linked to your account.", address,
                ) }}</li>
            % elif status == 'conflict'
                <li class="not-ok-danger">{{ _(
                    "The email address {0} could not be linked to your account "
                    "because it was already connected to another account.",
                    address,
                ) }}</li>
            % endif
        % endfor
        </ul>
    % endif
% endblock
