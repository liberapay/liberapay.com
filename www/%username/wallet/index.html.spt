from datetime import datetime
from itertools import chain

from liberapay.utils import get_participant
from liberapay.utils.history import iter_payday_events

STATUS_MAP = {
    'failed': 'danger',
    'succeeded': 'success',
}

[-----------------------------------------------------------------------------]

participant = get_participant(state, restrict=True)
title = participant.username
subhead = _("Wallet")
subpath = 'wallet/' if user.is_admin else ''
admin_override = user.is_admin and (participant != user or 'override' in request.qs)
translated_status = {
    None: '',
    'pre-mandate': _('awaiting confirmation'),
    'pre': _('preparing'),
    'created': _('pending'),
    'failed': _('failed'),
    'succeeded': _('succeeded')
}

current_year = datetime.utcnow().year
year = request.qs.get_int('year', 0)
if not year:
    # Try to detect the year of the last transaction
    last_event_year = website.db.one("""
        SELECT extract(year from timestamp)::int AS year
          FROM transfers
         WHERE tipper = %(p_id)s OR tippee = %(p_id)s
     UNION ALL
        SELECT extract(year from timestamp)::int AS year
          FROM exchanges
         WHERE participant = %(p_id)s
      ORDER BY year DESC
         LIMIT 1
    """, dict(p_id=participant.id))
    year = last_event_year or current_year

events = iter_payday_events(website.db, participant, year)
try:
    totals = next(events)
    if totals['kind'] != 'totals':
        # it's not what we expected, put it back
        events = chain((totals,), events)
        totals = None
except StopIteration:
    totals, events = None, ()
years = []
if participant.join_time:
    years = list(range(current_year, participant.join_time.year-1, -1))

if participant == user:
    BALANCE = _("Your balance is {0}.", participant.balance)
    participant.mark_notifications_as_read('income')
else:
    BALANCE = _("Their balance is {0}.", participant.balance)

[-----------------------------------------------------------------------------]
% extends "templates/settings.html"
% block content

<p>{{ BALANCE }}</p>

% if participant.balance > 0
    <p><a class="btn btn-default" href="{{ participant.path('wallet/payout/' + b64encode_s(request.path.raw)) }}"
          >{{ _("Withdraw money") }}</a></p>
% endif

<h3>{{ _("Account Statement") }}</h3>

% if len(years) > 1
<ul class="nav nav-pills">
    % for y in years
        <li class="{{ 'active' if y == year }}"><a href="?year={{ y }}">{{ y }}</a></li>
    % endfor
</ul>
<br>
% endif

<div class="row col-md-10">
% if totals
    % set regular_donations = totals['regular_donations']
    % set reimbursements = totals['reimbursements']
    % set total_sent = regular_donations['sent'] + reimbursements['sent']
    {{ _("Total money sent: {0}", total_sent) }}<br>
    % if total_sent
    <ul>
    % if regular_donations['sent']
    % for money_amount in regular_donations['sent']
    % if money_amount
    <li>
    {{ ngettext(
        "{money_amount} in recurrent donations to {n} person",
        "{money_amount} in recurrent donations to {n} people",
        regular_donations['ntippees'][money_amount.currency],
        money_amount=money_amount
    ) }}
        (<a href="{{ participant.path('wallet/export.csv') }}?year={{ year }}&amp;key=given&amp;mode=aggregate">{{
            _("Export as CSV")
        }}</a>)
    </li>
    % endif
    % endfor
    % endif
    % if reimbursements['sent']
    % for money_amount in reimbursements['sent']
    % if money_amount
    <li>
    {{ ngettext(
        "{money_amount} in expense reimbursements to {n} person",
        "{money_amount} in expense reimbursements to {n} people",
        reimbursements['nrecipients'][money_amount.currency],
        money_amount=money_amount
    ) }}
        (<a href="{{ participant.path('wallet/export.csv') }}?year={{ year }}&amp;key=reimbursed&amp;mode=aggregate">{{
            _("Export as CSV")
        }}</a>)
    </li>
    % endif
    % endfor
    % endif
    </ul>
    % endif
    % set total_received = regular_donations['received'] + reimbursements['received']
    {{ _("Total money received: {0}", total_received) }}
    % if total_received
    <ul>
    % if regular_donations['received']
    % for money_amount in regular_donations['received']
    % if money_amount
    <li>{{ ngettext(
        "{money_amount} in recurrent donations from {n} donor",
        "{money_amount} in recurrent donations from {n} donors",
        regular_donations['npatrons'][money_amount.currency],
        money_amount=money_amount
    ) }}</li>
    % endif
    % endfor
    % endif
    % if reimbursements['received']
    % for money_amount in reimbursements['received']
    % if money_amount
    <li>{{ ngettext(
        "{money_amount} in expense reimbursements from {n} organization",
        "{money_amount} in expense reimbursements from {n} organizations",
        reimbursements['npayers'][money_amount.currency],
        money_amount=money_amount
    ) }}</li>
    % endif
    % endfor
    % endif
    </ul>
    % endif
<br>
% endif

% if events
<table class="table table-condensed" id="history">
<thead>
    <tr>
        <th class="nature"></th>
        <th class="status">{{ _("Status") }}</th>
        <th class="wallet">{{ _("Amount") }}</th>
        <th class="fees"><a href="/about/faq#fees">{{ _("Fees") }}</a></th>
        <th class="bank" title="{{ _('The amount you should see on your bank account statement.') }}"
            >{{ _("Amount in bank") }}</th>
    </tr>
</thead>
<tbody>
% for event in events
    % if event['kind'] == 'day-open'
    <tr class="day-open">
        <td class="nature">
            {{ format_date(event['date'], 'long') }}
            % if event['payday_number']
                &mdash; {{ _("Weekly Payday #{0}", event['payday_number']) }}
            % endif
        </td>
        <td class="status" title="{{ _('balance at the end of the day') }}">{{
            locale.format_money_basket(event['balances'])
        }}</td>
        <td class="wallet">
        % set wallet_deltas = event['wallet_deltas']
        % if wallet_deltas
        % set n = len(wallet_deltas.currencies_present)
        % for delta in wallet_deltas
            % if delta.amount or n == 0 and delta.currency == participant.main_currency
                {{ format_money_delta(delta) }}<br>
            % endif
        % endfor
        % endif
        </td>
        <td class="fees"></td>
        <td class="bank"></td>
    </tr>
    % elif 'fee' in event
    <tr>
        <td class="nature">
        % if event['kind'] == 'payin-refund'
            {{ event['note'] or _("refund") }}
        % elif event['kind'] in ('credit', 'charge')
            {{ _("withdrawal") if event['kind'] == 'credit' else _("deposit") }}
            % if event['note']
                &mdash; {{ _("error message: {0}", event['note']) if event['status'] == 'failed' else event['note'] }}
            % endif
        % elif event['kind'] == 'payout-refund'
            {{ _("refund of failed withdrawal (error message: {0})", event['note']) }}
        % endif
        % if event['status'] == 'succeeded' and event['kind'] == 'charge'
            (<a href="{{ participant.path('receipts/') }}{{ event['id'] }}">{{ _("Receipt").lower() }}</a>)
        % endif
        </td>
        <td class="status text-{{ STATUS_MAP.get(event['status'], 'info') }}"
            >{{ translated_status[event['status']] }}</td>
        <td class="wallet">{{ format_money_delta(event['wallet_delta']) }}</td>
        <td class="fees">{{ format_money(event['fee']) }}</td>
        <td class="bank">{{ format_money_delta(event['bank_delta']) }}</td>
    </tr>
    % elif event['kind'] == 'transfer' and event['context'] != 'account-switch'
    <tr>
        <td class="nature">
        % set context = event['context']
        % if event['tippee'] == participant.id
            % if admin_override
                {{ context }} from
                <a href="/{{ event['username'] }}/{{ subpath }}">{{ event['username'] }}</a>
                % if event['team']
                    for team <a href="/{{ event['team_name'] }}/">{{ event['team_name'] }}</a>
                % endif
            % elif context == 'take'
                {{ _("anonymous donation for your role in the {0} team",
                     ('<a href="/{0}/">{0}</a>'|safe).format(event['team_name'])) }}
            % elif context == 'refund'
                {{ _("donation refund") }}
            % elif context == 'expense'
                {{ _("reimbursement of {link_open}expense #{invoice_id}{link_close} from {payer}",
                     link_open='<a href="%s">'|safe % event['invoice_url'],
                     invoice_id=event['invoice'],
                     link_close='</a>'|safe,
                     payer=('<a href="/{0}/">{0}</a>'|safe).format(event['username']),
                ) }}
            % elif context == 'tip'
                {{ _("anonymous donation") }}
            % elif context == 'chargeback'
                {{ _("chargeback") }}
            % elif context == 'debt'
                {{ _("debt repayment") }}
            % endif
        % else
            % set to = ('<a href="/{0}/">{0}</a>'|safe).format(event['username'])
            % if context == 'final-gift'
                {{ _("final gift to {0}", to) }}
            % elif context == 'take'
                {{ _("donation to {0} for their role in the {1} team", to,
                     ('<a href="/{0}/">{0}</a>'|safe).format(event['team_name'])) }}
            % elif context == 'refund'
                {{ _("refund of anonymous donation") }}
            % elif context == 'expense'
                {{ _("payment of {link_open}expense #{invoice_id}{link_close} to {payee}",
                     link_open='<a href="%s">'|safe % event['invoice_url'],
                     invoice_id=event['invoice'],
                     link_close='</a>'|safe,
                     payee=to,
                ) }}
            % elif context == 'tip'
                {{ _("donation to {0}", to) }}
            % elif context == 'chargeback'
                {{ _("chargeback") }}
            % elif context == 'debt'
                {{ _("debt repayment") }}
            % endif
        % endif
        </td>
        <td class="status text-{{ STATUS_MAP.get(event['status'], 'info') }}"
            >{{ translated_status[event['status']] }}</td>
        <td class="wallet">{{ format_money_delta(event['wallet_delta']) }}</td>
        <td class="fees"></td>
        <td class="bank"></td>

    </tr>
    % endif
% endfor
</tbody>
</table>
% else
    <p>{{ _("No transactions to show.") }}</p>
% endif
</div>

% endblock
