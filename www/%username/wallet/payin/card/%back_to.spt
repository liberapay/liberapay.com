# coding: utf8
from __future__ import absolute_import, division, print_function, unicode_literals

from decimal import Decimal as D, InvalidOperation, ROUND_UP

from mangopay.resources import Card, PayIn

from liberapay.billing.fees import skim_amount, upcharge_card
from liberapay.billing.transactions import (
    charge, record_exchange_result, repr_error,
)
from liberapay.constants import FEE_PAYIN_CARD, PAYIN_CARD_MIN
from liberapay.exceptions import InvalidNumber, Redirect
from liberapay.models.exchange_route import ExchangeRoute
from liberapay.utils import b64decode_s, get_participant, is_card_expired
from liberapay.utils.i18n import Money

[---]

participant = get_participant(state, restrict=True, block_suspended_user=True)

if request.method == 'GET' and 'transactionId' in request.qs:
    try:
        payin = PayIn.get(request.qs['transactionId'])
    except PayIn.DoesNotExist:
        raise response.error(400, "bad transactionId: does not exist")
    if payin.AuthorId != participant.mangopay_user_id:
        raise response.error(403, "bad transactionId: user mistmatch")
    status = payin.Status.lower()
    error = repr_error(payin)
    record_exchange_result(website.db, payin.Tag, payin.Id, status, error, participant)
    response.redirect(request.path.raw+'?exchange_id=%s' % payin.Tag)

currency = request.qs.get('currency', currency)
if request.method == 'POST':
    currency = request.body.get('currency', currency)
if currency not in PAYIN_CARD_MIN:
    raise response.error(400, "`currency` value '%s' is invalid or non-supported" % currency)

exchange = None
routes = ExchangeRoute.from_network(participant, 'mango-cc', currency=currency)
route = routes[0] if routes else None
del routes

card = Card.get(route.address) if route else None
if card:
    inactive = card.Validity != 'UNKNOWN' and card.Active is False
    invalid = card.Validity == 'INVALID'
    used_one_off = card.Validity == 'VALID' and route.one_off
    month, year = int(card.ExpirationDate[:2]), int(card.ExpirationDate[2:]) + 2000
    if inactive or invalid or used_one_off or is_card_expired(year, month):
        route.invalidate(card)
        card = None

funded = float('inf')
balance = participant.get_balance_in(currency)
donations = participant.get_giving_in(currency)
weekly = donations - participant.get_receiving_in(currency)
amount_min = PAYIN_CARD_MIN[currency]
amount_max = skim_amount(constants.PAYIN_CARD_MAX[currency], FEE_PAYIN_CARD[currency])[0]
if weekly > 0:
    funded = balance // weekly
    min_weeks = (amount_min / weekly).to_integral_value(ROUND_UP)
    max_weeks = min(
        max(constants.PAYIN_CARD_TARGET[currency] // weekly, 52),
        amount_max // weekly
    )
    weeks_list = sorted(set((min_weeks, 4, 13, 26, 39, max_weeks)))
    weeks_list = [w for w in weeks_list if w >= min_weeks and w <= max_weeks]

if request.method == 'POST':
    if weekly <= 0 or funded >= 52:
        raise response.error(403, _(
            "Why are you trying to put more money into your wallet? "
            "Please contact support@liberapay.com if you have a legitimate reason."
        ))
    if not route:
        raise response.error(400, "no credit card")

    amount = request.body['amount']
    if amount == 'custom':
        amount = request.body['amount_custom']
        try:
            amount = parse_decimal(amount)
        except:
            pass
    try:
        amount = D(amount)
    except (InvalidOperation, ValueError):
        raise InvalidNumber(amount)
    amount = Money(amount, currency)
    if amount < amount_min.amount or amount > amount_max.amount:
        raise response.error(400, _(
            "'{0}' is not an acceptable amount (min={1}, max={2})",
            amount, amount_min, amount_max
        ))
    return_url = website.canonical_url + request.path.raw
    try:
        exchange = charge(website.db, route, amount, return_url)
    except Redirect as e:
        response.redirect(e.url)
    response.redirect(request.path.raw+'?exchange_id=%s' % exchange.id)

elif 'exchange_id' in request.qs:
    exchange = website.db.one("SELECT * FROM exchanges WHERE id = %s AND participant = %s",
                              (request.qs['exchange_id'], participant.id))

back_to = b64decode_s(request.path['back_to'], default=None)
success = getattr(exchange, 'status', None) == 'succeeded'
show_form = weekly > 0 and funded < 52 and not success

if user == participant:
    participant.mark_notifications_as_read('low_balance')

title = _("Adding Money")

[---] text/html
% from "templates/icons.html" import glyphicon

% extends "templates/base-thin.html"

% block thin_content
<form id="payin" action="javascript:" method="POST"
      data-msg-loading="{{ _('Request in progress, please waitâ€¦') }}">

    <noscript><div class="alert alert-danger">{{ _("JavaScript is required") }}</div></noscript>

    % if exchange
        <div class="alert alert-{{ 'success' if success else 'danger' }}">{{
            _("{0} have been taken from your credit card, {1} went to your Liberapay wallet, {2} were paid in transaction fees.",
              exchange.amount + exchange.fee, exchange.amount, exchange.fee) if success else
            _("The attempt to take {0} from your credit card has failed. Error message: {1}", exchange.amount + exchange.fee, exchange.note)
        }}</div>
        % if success
        <a href="{{ participant.path('receipts/%s' % exchange.id) }}">{{ _("View Receipt") }}</a>
        % endif
    % endif

    % if not show_form
    <p>
        % if donations == 0
            {{ _(
                "You haven't set up any donations yet, once you do you'll be "
                "prompted to add money to your account."
            ) }}
            </p><p>
            % from "templates/buttons.html" import find_donees with context
            {{ find_donees() }}
        % elif weekly <= 0
            {{ _(
                "We don't allow adding money when your donations are already "
                "funded by your income. If this is a problem for you please "
                "send an email to support@liberapay.com explaining why."
            ) }}
        % elif funded > 0
            {{ ngettext("Your donations are only funded for another week.",
                        "Your donations are funded for another {n} weeks.",
                        funded) }}
        % endif
    </p>
    % if success and back_to
        <p><a href="{{ response.sanitize_untrusted_url(back_to) }}"
              class="btn btn-success">{{ _("Go back") }}</a></p>
    % endif
    % endif

    % if show_form
    <p>{{ _(
        "Adding money to Liberapay via credit/debit card incurs a fee of {0}% + {1}.",
        *constants.FEE_PAYIN_CARD[currency].with_vat
    ) }}</p>

    <h3>{{ _("Amount") }}</h3>

    <fieldset id="amount" class="form-inline">
        <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
        <input type="hidden" name="route_id" value="{{ route.id if route else '' }}" />
        <input type="hidden" name="currency" value="{{ currency }}" />
        <p>{{ _("Please select a precomputed amount or input a custom one.") }}</p>
        <ul class="list-group radio-group">
        % for weeks in weeks_list
            % set amount = weekly * weeks
            % set charge_amount, fees, vat = upcharge_card(amount)
            % set _months = weeks / D('4.33')
            % set months = _months.quantize(D('1'))
            <li class="list-group-item">
            <label>
                <input type="radio" name="amount" value="{{ amount.amount }}" class="hidden-xs" />
                <div class="radio-label">
                <h5 class="list-group-item-heading">{{ _(
                    "{0} ({2}% fee included)",
                    charge_amount,
                    None,
                    (fees / charge_amount * 100).quantize(constants.D_CENT),
                ) }}</h5>
                <p class="list-group-item-text">{{ ngettext(
                    "Your donations will be funded for {n} week",
                    "Your donations will be funded for {n} weeks",
                    weeks
                ) if abs(_months - months) > D('0.1') else ngettext(
                    "",
                    "Your donations will be funded for {n} weeks ({0})",
                    weeks, ngettext("{n} month", "{n} months", months)
                ) }}</p>
                </div>
            </label>
            </li>
        % endfor
            <li class="list-group-item">
            <label>
                <input type="radio" name="amount" value="custom" class="hidden-xs" />
                <div class="radio-label">
                <h5 class="list-group-item-heading">{{ _(
                    "Custom amount (min={0}, max={1})", AMOUNT_MIN, AMOUNT_MAX,
                ) }}</h5>
                <div class="input-group">
                    <div class="input-group-addon">{{ locale.currency_symbols.get(currency, currency) }}</div>
                    <input class="form-control amount" name="amount_custom" placeholder="{{ _('Amount') }}" />
                </div>
                </div>
            </label>
            </li>
        </ul>
    </fieldset>


    % if not participant.mangopay_user_id
    <h3>{{ _("Identity") }}</h3>

    <fieldset id="identity">
    % set account = None
    % include "templates/identity-form.html"
    </fieldset>
    % endif


    <h3>{{ _("Card") }}</h3>

    % if card
    <div>
        <p>{{ card.Alias }} ({{ card.CardProvider }})</p>
        <button class="btn btn-default btn-sm" type="button" data-modify="#credit-card">{{ _("Modify") }}</button>
    </div>
    % endif

    <fieldset id="credit-card" class="{{ 'hidden' if card else '' }}"
          data-currency="{{ currency }}"
          data-msg-confirm-submit='{{ _(
              "Warning: some of the card data you have input seems to be invalid. Proceed anyway?"
          ) }}'
          data-msg-cors-fail='{{ _(
              "The request failed. Please make sure your browser is up-to-date, and disable "
              "any extension that blocks requests (e.g. NoScript), then try again."
          ) }}'>
        % include "templates/sandbox-warning.html"
        <div class="payment-card-row">
        <div class="payment-card">
            <div class="card-number"><div class="input-wrapper">
            <input id="card_number" class="form-control" required autocomplete="cc-number"
                   placeholder="{{ _('Card number') }}"
                   title="{{ _('The main number on the card, between 8 and 19 digits') }}"
                   data-toggle="tooltip" data-placement="top" data-trigger="focus" />
            <span class="abnormal-msg">{{ _(
                "This card number seems to be invalid, are you sure you didn't make a mistake?"
            ) }}</span>
            <span class="invalid-msg">{{ _("This card number is invalid.") }}</span>
            </div></div>

            <div class="card-expiry"><div class="input-wrapper">
            <input id="expiration_date" class="form-control" required autocomplete="cc-exp"
                   placeholder="{{ _('MM/YY') }}" title="{{ _('Expiration date (4 digits)') }}"
                   data-toggle="tooltip" data-placement="top" data-trigger="focus" />
            <span class="invalid-msg">{{ _("This expiration date is invalid.") }}</span>
            </div></div>

            <div class="cvv"><div class="input-wrapper">
            <input id="cvv" class="form-control" required autocomplete="cc-csc"
                   placeholder="{{ _('CVV') }}"
                   title="{{ _('Verification code, usually 3 digits located on the back of the card') }}"
                   data-toggle="tooltip" data-placement="top" data-trigger="focus" />
            <span class="abnormal-msg">{{ _(
                "This verification code seems to be invalid, are you sure you "
                "didn't make a mistake?"
            ) }}</span>
            </div></div>

            <div class="card-brand"></div>
        </div>
        <div class="aside">
        <label>
            <input type="checkbox" id="keep" checked />
            {{ _("Remember the card number for next time") }}
        </label>
        <p class="help-block">{{ glyphicon('lock') }} {{ _(
            "Your card data is sent directly to our payment partner's system "
            "through an encrypted connection."
        ) }}</p>
        </div>
        </div>
    </fieldset>

    <div class="proceed">
        <button class="btn btn-lg btn-success">{{ _("Proceed") }}</button>
        <a href="{{ participant.path('wallet/payin/' + b64encode_s(back_to or '')) }}"
           class="btn btn-warning pull-right">{{ _("Cancel") }}</a>
    </div>
    % endif

</form>

% if show_form
<p class="powered-by">
    <a href="https://www.mangopay.com/legal-notices/">
        <img src="{{ website.asset('mangopay/powered-by-mangopay.png') }}" class="contain" />
    </a>
</p>
% endif
% endblock

% block scripts
{{ super() }}
<script>
    mangoPay.cardRegistration.baseURL = {{ to_javascript(website.app_conf.mangopay_base_url)|safe }};
    mangoPay.cardRegistration.clientId = {{ to_javascript(website.app_conf.mangopay_client_id)|safe }};
    $(function() {
        Liberapay.payments.cc.init();
    });
</script>
% endblock
