# coding: utf8
from __future__ import absolute_import, division, print_function, unicode_literals

from decimal import Decimal as D, InvalidOperation, ROUND_UP

from mangopay.resources import BankWirePayIn

from liberapay.billing.fees import upcharge_bank_wire
from liberapay.billing.transactions import cancel_bank_wire_payin, payin_bank_wire
from liberapay.constants import EVENTS, PAYIN_BANK_WIRE_MIN
from liberapay.exceptions import InvalidNumber
from liberapay.utils import b64decode_s, get_participant
from liberapay.utils.i18n import Money

NOTIF_BIT_FAIL = EVENTS['payin_bankwire_failed'].bit
NOTIF_BIT_SUCC = EVENTS['payin_bankwire_succeeded'].bit


def get_exchange_payin(participant, request):
    exchange = website.db.one("SELECT * FROM exchanges WHERE id = %s AND participant = %s",
                              (request.qs['exchange_id'], participant.id))
    if not exchange:
        raise response.error(403)
    if exchange.remote_id:
        payin = BankWirePayIn.get(exchange.remote_id)
    else:
        payin = None
    return exchange, payin

[---]

participant = get_participant(state, restrict=True, block_suspended_user=True)

if request.method == 'POST' and 'action' in request.body:
    exchange, payin = get_exchange_payin(participant, request)
    action = request.body['action']
    if action == 'email':
        sent = participant.send_email(
            'payin_bankwire_created',
            (participant.email or participant.get_any_email()),
            exchange=exchange._asdict(), payin=payin,
        )
        if not sent:
            raise response.error(500, _("An unknown error occurred."))
        if request.headers.get(b'X-Requested-With') == b'XMLHttpRequest':
            raise response.json({'msg': _("The email has been sent.")})
        else:
            response.redirect(request.line.uri)
    elif action == 'cancel':
        cancel_bank_wire_payin(website.db, exchange, payin, participant)
        response.redirect(request.line.uri)
    else:
        raise response.error(400, "bad `action` value '%s' in body" % action)

exchange, payin = None, None
if 'exchange_id' in request.qs:
    exchange, payin = get_exchange_payin(participant, request)
    if exchange.status == 'succeeded':
        response.redirect(participant.path('receipts/%s' % exchange.id))

currency = request.qs.get('currency', currency)
if exchange:
    currency = exchange.amount.currency
if request.method == 'POST':
    currency = request.body.get('currency', currency)
if currency not in PAYIN_BANK_WIRE_MIN:
    raise response.error(400, "`currency` value '%s' is invalid or non-supported" % currency)

funded = float('inf')
balance = participant.get_balance_in(currency)
donations = participant.get_giving_in(currency)
weekly = donations - participant.get_receiving_in(currency)
if weekly > 0:
    funded = balance // weekly
    min_weeks = (constants.PAYIN_BANK_WIRE_MIN[currency] / weekly).to_integral_value(ROUND_UP)
    max_weeks = min(
        max(constants.PAYIN_BANK_WIRE_TARGET[currency] // weekly, 52),
        constants.PAYIN_BANK_WIRE_MAX[currency] // weekly
    )
    weeks_list = sorted(set((min_weeks, 4, 13, 26, 39, max_weeks)))
    weeks_list = [w for w in weeks_list if w >= min_weeks and w <= max_weeks] or [min_weeks]

amount_min = upcharge_bank_wire(constants.PAYIN_BANK_WIRE_MIN[currency])[0]
amount_max = upcharge_bank_wire(constants.PAYIN_BANK_WIRE_MAX[currency])[0]

if request.method == 'POST':
    if weekly <= 0 or funded >= 52:
        raise response.error(403, _(
            "Why are you trying to put more money into your wallet? "
            "Please contact support@liberapay.com if you have a legitimate reason."
        ))

    amount = request.body['amount']
    if amount == 'custom':
        amount = request.body['amount_custom']
        try:
            amount = parse_decimal(amount).quantize(constants.D_CENT)
        except:
            pass
    try:
        amount = Money(amount, currency)
    except (InvalidOperation, ValueError):
        raise InvalidNumber(amount)
    if amount < amount_min or amount > amount_max:
        raise response.error(400, _(
            "'{0}' is not an acceptable amount (min={1}, max={2})",
            amount, amount_min, amount_max
        ))
    payin, exchange = payin_bank_wire(website.db, participant, amount)
    redir = request.path.raw+'?exchange_id=%s' % exchange.id
    response.redirect(redir)

back_to = b64decode_s(request.path['back_to'], default=None)
show_form = weekly > 0 and funded < 52 and not payin

if user == participant:
    participant.mark_notifications_as_read('low_balance')

title = _("Adding Money")

[---] text/html
% extends "templates/base-thin.html"

% block thin_content

    % if exchange and exchange.status == 'failed'
        % if exchange.note == 'canceled'
        <div class="alert alert-info">{{ _("This bank wire has been canceled.") }}</div>
        <a class="btn btn-default" href="{{ participant.path('wallet/payin') }}"
           >{{ _("Go back") }}</a>
        % else
        <div class="alert alert-danger">{{
            _("The attempt to prepare a bank wire transfer of {0} has failed. Error message: {1}",
              exchange.amount + exchange.fee, exchange.note)
        }}</div>
        % endif
    % endif

    % if not show_form and not payin
    <p>
        % if donations == 0
            {{ _(
                "You haven't set up any donations yet, once you do you'll be "
                "prompted to add money to your account."
            ) }}
            </p><p>
            % from "templates/buttons.html" import find_donees with context
            {{ find_donees() }}
        % elif weekly <= 0
            {{ _(
                "We don't allow adding money when your donations are already "
                "funded by your income. If this is a problem for you please "
                "send an email to support@liberapay.com explaining why."
            ) }}
        % else
            {{ ngettext("Your donations are only funded for another week.",
                        "Your donations are funded for another {n} weeks.",
                        funded) }}
        % endif
    </p>

    % elif payin and exchange.status == 'created'

        <p>{{ _(
            "We are ready to receive the funds. Please send exactly {0} to the "
            "following account using the reference code below so we'll know the "
            "money came from you:",
            exchange.amount + exchange.fee
        ) }}</p>
        <dl>
            <dt>{{ _("IBAN (International Bank Account Number)") }}</dt>
            <dd>{{ payin.BankAccount.IBAN }}</dd>
            <dt>{{ _("BIC (Bank Identifier Code)") }}</dt>
            <dd>{{ payin.BankAccount.BIC }}</dd>
            <dt>{{ _("Wire Reference Code") }}</dt>
            <dd>{{ payin.WireReference }}</dd>
            <br>
            <dt>{{ _("Destination Country") }}</dt>
            % set dest_country = payin.BankAccount.IBAN[:2]
            <dd>{{ locale.countries.get(dest_country, dest_country) }}</dd>
            <dt>{{ _("Bank Account Owner Name") }}</dt>
            <dd>{{ payin.BankAccount.OwnerName }}</dd>
            <dt>{{ _("Bank Account Owner Address") }}</dt>
            <dd>{{ payin.BankAccount.OwnerAddress.AddressLine1 }},
                {{ payin.BankAccount.OwnerAddress.PostalCode }}
                {{ payin.BankAccount.OwnerAddress.City }},
                {{ payin.BankAccount.OwnerAddress.Country }}</dd>
        </dl>

        <form action="" class="js-submit" method="POST">
            <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
            <input type="hidden" name="action" value="email" />
            <button class="btn btn-primary">{{ _("Email me this info") }}</button>
        </form>
        <br>

        <p class="alert alert-warning">{{ _(
            "Wire reference codes are not reusable. It's not yet possible to set up "
            "a recurrent transfer from your bank account to Liberapay."
        ) }}</p>

        % set notif_fail = NOTIF_BIT_FAIL.__and__(participant.email_notif_bits)
        % set notif_succ = NOTIF_BIT_SUCC.__and__(participant.email_notif_bits)
        % if notif_fail and notif_succ
            <p class="alert alert-info">{{ _(
                "Liberapay will send you an email once your payment either succeeds or fails."
            ) }}</p>
        % else
            <p class="alert alert-warning">{{ _(
                "You have disabled some or all email notifications about bank wires."
            ) }}</p>
            <a class="btn btn-primary" href="{{ participant.path('emails/') }}"
               >{{ _("Change your email settings") }}</a>
        % endif

        <p>{{ _("Changed your mind? Cancel the payment to avoid receiving a failure notification next month:") }}</p>
        <form action="" method="POST">
            <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
            <input type="hidden" name="action" value="cancel" />
            <button class="btn btn-danger">{{ _("Cancel") }}</button>
        </form>

    % elif show_form
    <form id="payin" action="javascript:" method="POST"
          data-user-slug="~{{ participant.id }}"
          data-msg-loading="{{ _('Request in progress, please waitâ€¦') }}">

    <noscript><div class="alert alert-danger">{{ _("JavaScript is required") }}</div></noscript>

    <p>{{ _(
        "Adding money to Liberapay via bank wire incurs a fee of {0}% from our "
        "payment processor.",
        constants.FEE_PAYIN_BANK_WIRE.with_vat,
    ) }}</p>

    <p>{{ _(
        "Money sent by bank wire does not arrive instantly, but most transfers "
        "are completed within 4 business days."
    ) }}</p>

    <h3>{{ _("Amount") }}</h3>

    <fieldset id="amount" class="form-inline">
        <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
        <input type="hidden" name="currency" value="{{ currency }}" />
        <p>{{ _("Please select a precomputed amount or input a custom one.") }}</p>
        <ul class="list-group radio-group">
        % for weeks in weeks_list
            % set amount = weekly * weeks
            % set charge_amount, fees, vat = upcharge_bank_wire(amount)
            % set _months = weeks / D('4.33')
            % set months = _months.quantize(D('1'))
            <li class="list-group-item">
            <label>
                <input type="radio" name="amount" value="{{ charge_amount.amount }}" class="hidden-xs" />
                <div class="radio-label">
                <h5 class="list-group-item-heading">{{ _(
                    "{0} ({2}% fee included)",
                    charge_amount,
                    None,
                    (fees / charge_amount * 100).quantize(constants.D_CENT),
                ) }}</h5>
                <p class="list-group-item-text">{{ ngettext(
                    "Your donations will be funded for {n} week",
                    "Your donations will be funded for {n} weeks",
                    weeks
                ) if abs(_months - months) > D('0.1') else ngettext(
                    "",
                    "Your donations will be funded for {n} weeks ({0})",
                    weeks, ngettext("{n} month", "{n} months", months)
                ) }}</p>
                </div>
            </label>
            </li>
        % endfor
            <li class="list-group-item">
            <label>
                <input type="radio" name="amount" value="custom" class="hidden-xs" />
                <div class="radio-label">
                <h5 class="list-group-item-heading">{{ _(
                    "Custom amount (min={0}, max={1})", amount_min, amount_max,
                ) }}</h5>
                <div class="input-group">
                    <div class="input-group-addon">{{ locale.currency_symbols.get(currency, currency) }}</div>
                    <input type="tel" inputmode="decimal" class="form-control amount"
                           name="amount_custom" placeholder="{{ _('Amount') }}" />
                </div>
                </div>
            </label>
            </li>
        </ul>
    </fieldset>


    % if not participant.mangopay_user_id
    <h3>{{ _("Identity") }}</h3>

    <fieldset id="identity">
    % set account = None
    % include "templates/identity-form.html"
    </fieldset>
    % endif

    <div class="proceed">
        <button class="btn btn-lg btn-success">{{ _("Proceed") }}</button>
        <a href="{{ participant.path('wallet/payin/' + b64encode_s(back_to or '')) }}"
           class="btn btn-warning pull-right">{{ _("Cancel") }}</a>
    </div>

    </form>
    % endif

% if show_form
<p class="powered-by">
    <a href="https://www.mangopay.com/legal-notices/">
        <img src="{{ website.asset('mangopay/powered-by-mangopay.png') }}" class="contain" />
    </a>
</p>
% endif
% endblock
