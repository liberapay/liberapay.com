# coding: utf8
from __future__ import absolute_import, division, print_function, unicode_literals

from decimal import Decimal as D, InvalidOperation, ROUND_UP

from mangopay.resources import BankAccount, Mandate

from liberapay.billing.fees import get_bank_account_country, skim_amount, upcharge_direct_debit
from liberapay.billing.transactions import (
    prepare_direct_debit, execute_direct_debit, record_exchange_result,
    repr_error, repr_exception,
)
from liberapay.constants import FEE_PAYIN_DIRECT_DEBIT, PAYIN_DIRECT_DEBIT_MIN
from liberapay.exceptions import InvalidNumber
from liberapay.models.exchange_route import ExchangeRoute
from liberapay.utils import (
    b64decode_s, get_owner_address, get_owner_name, get_participant, obfuscate
)
from liberapay.utils.i18n import Money

# https://docs.mangopay.com/endpoints/v2.01/mandates#e231_create-a-mandate
MANDATE_LANGS = {'en', 'fr', 'nl', 'de', 'es', 'it', 'pl'}

[---]

participant = get_participant(state, restrict=True, block_suspended_user=True)

exchange = None
exchange_id = request.path['exchange_id']
if exchange_id and request.method != 'POST':
    if not exchange_id.isdigit():
        raise response.error(404, "bad exchange_id '%s': not an integer" % exchange_id)
    exchange = website.db.one("""
        SELECT *
          FROM exchanges
         WHERE id = %s
           AND participant = %s
    """, (exchange_id, participant.id))
    if not exchange:
        raise response.error(404, "bad exchange_id '%s'" % exchange_id)
del exchange_id

if exchange:
    route = ExchangeRoute.from_id(exchange.route)
else:
    route_id = request.body.get('route_id') if request.method == 'POST' else 0
    route = website.db.one("""
        SELECT r
          FROM exchange_routes r
         WHERE participant = %s
           AND remote_user_id = %s
           AND network = 'mango-ba'
           AND error <> 'invalidated'
      ORDER BY id = %s DESC, mandate IS NOT NULL DESC, id DESC
         LIMIT 1
    """, (participant.id, participant.mangopay_user_id, route_id))
    if route_id and not route:
        raise response.error(400, "bad `route_id` value '%s' in body" % route_id)
if route is not None:
    route.__dict__['participant'] = participant

currency = request.qs.get('currency', currency)
if exchange:
    currency = exchange.amount.currency
if request.method == 'POST':
    currency = request.body.get('currency', currency)
if currency not in PAYIN_DIRECT_DEBIT_MIN:
    raise response.error(400, "`currency` value '%s' is invalid or non-supported" % currency)

funded = float('inf')
balance = participant.get_balance_in(currency)
donations = participant.get_giving_in(currency)
weekly = donations - participant.get_receiving_in(currency)
amount_min = PAYIN_DIRECT_DEBIT_MIN[currency]
amount_max = skim_amount(constants.PAYIN_DIRECT_DEBIT_MAX[currency], FEE_PAYIN_DIRECT_DEBIT[currency])[0]
if weekly > 0:
    funded = balance // weekly
    min_weeks = (amount_min / weekly).to_integral_value(ROUND_UP)
    max_weeks = min(
        max(constants.PAYIN_DIRECT_DEBIT_TARGET[currency] // weekly, 52),
        amount_max // weekly
    )
    weeks_list = sorted(set((min_weeks, 4, 13, 26, 39, max_weeks)))
    weeks_list = [w for w in weeks_list if w >= min_weeks and w <= max_weeks]

if request.method == 'POST':
    if weekly <= 0 or funded >= 52:
        raise response.error(403, _(
            "Why are you trying to put more money into your wallet? "
            "Please contact support@liberapay.com if you have a legitimate reason."
        ))
    if not route:
        raise response.error(400, "no route")

    amount = request.body['amount']
    if amount == 'custom':
        amount = request.body['amount_custom']
        try:
            amount = parse_decimal(amount).quantize(constants.D_CENT)
        except:
            pass
    try:
        amount = Money(amount, currency)
    except (InvalidOperation, ValueError):
        raise InvalidNumber(amount)
    if amount < amount_min or amount > amount_max:
        raise response.error(400, _(
            "'{0}' is not an acceptable amount (min={1}, max={2})",
            amount, amount_min, amount_max
        ))

    ba = BankAccount.get(route.address, user_id=participant.mangopay_user_id)
    country = get_bank_account_country(ba)
    if country not in constants.PAYIN_DIRECT_DEBIT_COUNTRIES[currency]:
        raise response.error(400, _(
            "Direct debits in {currency} are not possible from {country}.",
            currency=locale.currencies.get(currency, currency),
            country=locale.countries.get(country, country),
        ))

    mandate = Mandate.get(route.mandate) if route.mandate else None
    if mandate and mandate.Status == 'FAILED':
        route.set_mandate(None)
        mandate = None
    exchange = prepare_direct_debit(website.db, route, amount)
    return_url = participant.url('wallet/payin/direct-debit/%s' % exchange.id)
    if not mandate:
        lang = locale.language
        culture = lang.upper() if lang in MANDATE_LANGS else 'EN'
        mandate = Mandate(
            UserId=participant.mangopay_user_id,
            BankAccountId=route.address,
            Culture=culture,
            ReturnURL=return_url,
        )
        try:
            mandate.save()
        except Exception as e:
            error = repr_exception(e)
            record_exchange_result(website.db, exchange.id, '', 'failed', error, participant)
            website.tell_sentry(e, state)
            response.redirect(return_url)
    if mandate.Status == 'CREATED':
        route.set_mandate(mandate.Id)
        response.redirect(mandate.RedirectURL)
    elif mandate.Status == 'FAILED':
        error = repr_error(mandate)
        record_exchange_result(website.db, exchange.id, '', 'failed', error, participant)
    else:
        execute_direct_debit(website.db, exchange, route)
    response.redirect(return_url)

elif request.method == 'GET' and 'MandateId' in request.qs:
    if not exchange:
        raise response.error(400, "missing exchange_id")
    if route.mandate != request.qs['MandateId']:
        raise response.error(400, "MandateId mismatch")
    if exchange.status == 'pre-mandate':
        mandate = Mandate.get(route.mandate)
        if mandate.Status == 'FAILED':
            route.set_mandate(None)
            error = repr_error(mandate)
            exchange = record_exchange_result(website.db, exchange.id, '', 'failed', error, participant)
        else:
            exchange = execute_direct_debit(website.db, exchange, route)

success = getattr(exchange, 'status', None) in ('created', 'succeeded')
show_form = weekly > 0 and funded < 52 and not success

if show_form:
    bank_account = BankAccount.get(
        route.address, user_id=participant.mangopay_user_id
    ) if route else None
    if bank_account and bank_account.Type != 'IBAN':
        bank_account = None
        route = None
    mp_account = participant.get_mangopay_account()

if user == participant:
    participant.mark_notifications_as_read('low_balance')

title = _("Adding Money")

[---] text/html
% from "templates/icons.html" import glyphicon

% extends "templates/base-thin.html"

% block thin_content
<form id="payin" action="javascript:" method="POST"
      data-user-slug="~{{ participant.id }}"
      data-msg-loading="{{ _('Request in progress, please waitâ€¦') }}">

    <noscript><div class="alert alert-danger">{{ _("JavaScript is required") }}</div></noscript>

    % if exchange
        <div class="alert alert-{{ 'success' if success else 'danger' }}">{{
            _("{0} have been debited from your bank account, {1} went to your Liberapay wallet, {2} were paid in transaction fees.",
              exchange.amount + exchange.fee, exchange.amount, exchange.fee) if exchange.status == 'succeeded' else
            _("A direct debit of {0} has been initiated. If the transfer is successful {1} will arrive in your wallet and {2} will be paid in fees.",
              exchange.amount + exchange.fee, exchange.amount, exchange.fee) if exchange.status == 'created' else
            _("The attempt to transfer {0} from your bank account has failed:",
              exchange.amount + exchange.fee) + ' ' + _(str(exchange.note))
        }}</div>
        % if exchange.status == 'succeeded'
        <a href="{{ participant.path('receipts/%s' % exchange.id) }}">{{ _("View Receipt") }}</a>
        % elif exchange.status == 'created'
        <div class="alert alert-info">{{ _(
            "Direct debits take approximately 4 business days to complete."
        ) }}</div>
        % endif
    % endif

    % if not show_form and not exchange
    <p>
        % if donations == 0
            {{ _(
                "You haven't set up any donations yet, once you do you'll be "
                "prompted to add money to your account."
            ) }}
            </p><p>
            % from "templates/buttons.html" import find_donees with context
            {{ find_donees() }}
        % elif weekly <= 0
            {{ _(
                "We don't allow adding money when your donations are already "
                "funded by your income. If this is a problem for you please "
                "send an email to support@liberapay.com explaining why."
            ) }}
        % elif funded > 0
            {{ ngettext("Your donations are only funded for another week.",
                        "Your donations are funded for another {n} weeks.",
                        funded) }}
        % endif
    </p>
    % if success and back_to
        <p><a href="{{ response.sanitize_untrusted_url(back_to) }}"
              class="btn btn-success">{{ _("Go back") }}</a></p>
    % endif
    % endif

    % if show_form
    <p>{{ _(
        "Adding money to Liberapay via direct debit incurs a fee of {0}.",
        constants.FEE_PAYIN_DIRECT_DEBIT[currency].with_vat,
    ) }}</p>
    <p>{{ _(
        "Direct debits take approximately 4 business days to complete."
    ) }}</p>

    <h3>{{ _("Amount") }}</h3>

    <fieldset id="amount" class="form-inline">
        <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
        <input type="hidden" name="route_id" value="{{ route.id if route else '' }}" />
        <input type="hidden" name="currency" value="{{ currency }}" />
        <p>{{ _("Please select a precomputed amount or input a custom one.") }}</p>
        <ul class="list-group radio-group">
        % for weeks in weeks_list
            % set amount = weekly * weeks
            % set charge_amount, fees, vat = upcharge_direct_debit(amount)
            % set _months = weeks / D('4.33')
            % set months = _months.quantize(D('1'))
            <li class="list-group-item">
            <label>
                <input type="radio" name="amount" value="{{ amount.amount }}" class="hidden-xs" />
                <div class="radio-label">
                <h5 class="list-group-item-heading">{{ _(
                    "{0} ({2}% fee included)",
                    charge_amount,
                    None,
                    (fees / charge_amount * 100).quantize(constants.D_CENT),
                ) }}</h5>
                <p class="list-group-item-text">{{ ngettext(
                    "Your donations will be funded for {n} week",
                    "Your donations will be funded for {n} weeks",
                    weeks
                ) if abs(_months - months) > D('0.1') else ngettext(
                    "",
                    "Your donations will be funded for {n} weeks ({0})",
                    weeks, ngettext("{n} month", "{n} months", months)
                ) }}</p>
                </div>
            </label>
            </li>
        % endfor
            <li class="list-group-item">
            <label>
                <input type="radio" name="amount" value="custom" class="hidden-xs" />
                <div class="radio-label">
                <h5 class="list-group-item-heading">{{ _(
                    "Custom amount (min={0}, max={1})", amount_min, amount_max,
                ) }}</h5>
                <div class="input-group">
                    <div class="input-group-addon">{{ locale.currency_symbols.get(currency, currency) }}</div>
                    <input type="tel" inputmode="decimal" class="form-control amount"
                           name="amount_custom" placeholder="{{ _('Amount') }}" />
                </div>
                </div>
            </label>
            </li>
        </ul>
    </fieldset>


    % if not participant.mangopay_user_id
    <h3>{{ _("Identity") }}</h3>

    <fieldset id="identity">
    % set account = None
    % include "templates/identity-form.html"
    </fieldset>
    % endif


    <h3>{{ _("Bank Account") }}</h3>

    % if bank_account
    <div>
        <p>{{ _("IBAN") }}: {{ obfuscate(bank_account.IBAN, 2, -4) }}</p>
        <button class="btn btn-default btn-sm" type="button" data-modify="#bank-account">{{ _("Use another account") }}</button>
    </div>
    <br>
    % endif

    <fieldset id="bank-account" class="{{ 'hidden' if bank_account else '' }}">
        % include "templates/sandbox-warning.html"

        <input type="hidden" name="Type" value="IBAN" />

        <label>
            <span>{{ _("IBAN (International Bank Account Number)") }}</span>
            <input name="IBAN" class="form-control" size=40 required />
            <span class="invalid-msg">{{ _("This IBAN is invalid.") }}</span>
        </label><br>

        <br>
        <p>{{ _("The following fields are about the legal owner of the bank account.") }}</p>

        <label>
            <span>{{ _("Name") }}</span>
            <input name="OwnerName" class="form-control" required
                   value="{{ get_owner_name(mp_account) }}" />
        </label><br>

        % from "templates/postal-addresses.html" import postal_address_form with context
        {{ postal_address_form(prefix='Owner', saved=get_owner_address(bank_account, mp_account), country=request.country) }}
    </fieldset>

    <div class="proceed">
        <button class="btn btn-lg btn-success">{{ _("Proceed") }}</button>
        <a href="{{ participant.path('wallet/payin') }}"
           class="btn btn-warning pull-right">{{ _("Cancel") }}</a>
    </div>
    % endif

</form>

% if show_form
<p class="powered-by">
    <a href="https://www.mangopay.com/legal-notices/">
        <img src="{{ website.asset('mangopay/powered-by-mangopay.png') }}" class="contain" />
    </a>
</p>
% endif
% endblock
