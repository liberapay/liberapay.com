from oauthlib.oauth2 import InvalidGrantError, TokenExpiredError

from liberapay.models.repository import Repository
from liberapay.utils import b64decode_s, get_participant

[---]

request.allow('GET', 'POST')

participant = get_participant(state, restrict=True)

platform_name = request.path['platform']
if platform_name:
    platform = website.platforms.get(platform_name)
    if not platform:
        raise response.error(404, "unknown platform")
    if not hasattr(platform, 'api_repos_path'):
        raise response.error(400, "repos are not implemented for platform '%s'" % platform_name)

    accounts = participant.get_accounts_elsewhere(platform.name, is_team=False)
    accounts_nav = [(account.user_id, account.friendly_name) for account in accounts]
    if accounts:
        selected_account_id = request.qs.get('e_user_id')
        if selected_account_id:
            accounts.sort(key=lambda a: -(a.user_id == selected_account_id))
        account = accounts[0]
        if not selected_account_id:
            selected_account_id = account.user_id
    else:
        account = None
    sess = account.get_auth_session() if account else None
    if sess:
        page_url = b64decode_s(request.qs.get('page', ''))
        if page_url and page_url[:1] != '/':
            raise response.invalid_input(page_url, 'page', 'querystring')
        try:
            r = platform.get_starred_repos(account, page_url=page_url, sess=sess)
        except (InvalidGrantError, TokenExpiredError):
            sess = None
        else:
            repos, total_count, next_page = r[0], r[1], r[2].get('next')
            repos = [Repository.from_repo_info(repo) for repo in repos]
    title = _("Starred Repositories on {platform}", platform=platform.display_name)
else:
    title = _("Starred Repositories")

[---] text/html
% extends "templates/layouts/base.html"

% from "templates/macros/elsewhere.html" import auth_button with context
% from "templates/macros/nav.html" import querystring_nav with context
% from "templates/macros/repos.html" import show_repo with context

% block content
% if not platform_name

    <p>{{ _("We can import a list of repositories you have starred from:") }}</p>
    <p>
    % for platform in website.platforms.hasattr('api_starred_path')
    <a class="btn btn-default btn-lg"
       href="{{ participant.path('repos/starred/' + platform.name) }}"
       >{{ platform.display_name }}</a> &nbsp;&nbsp;
    % endfor
    </p>

% else

    % if len(accounts) > 1
        <nav><ul class="nav nav-pills">{{ querystring_nav('e_user_id', accounts_nav, selected_account_id) }}</ul></nav>
    % endif

    <p>
    % if not account
        <p>{{ _(
            "You don't have any {platform} account connected to your profile.",
            platform=platform.display_name
        ) }}</p>
        % call auth_button(platform.name, 'connect')
            {{ _("Connect {0} account", platform.display_name) }}
        % endcall
    % elif not sess
        <p>{{ _(
            "Your {platform} account needs to be reconnected.",
            platform=platform.display_name
        ) }}</p>
        % call auth_button(platform.name, 'connect')
            {{ _("Connect {0} account", platform.display_name) }}
        % endcall
    % else
        % if total_count > 0
            <p>{{ ngettext(
                "You have starred {n} repository on {platform}.",
                "You have starred {n} repositories on {platform}.",
                total_count, platform=platform.display_name
            ) }}</p>
        % endif
        <div class="inline-boxes">
        % for repo in repos
            <div class="inline-box repo"><div class="panel panel-default"><div class="panel-body">{{
                show_repo(repo, donate=True)
            }}</div></div></div>
        % else
            <p>{{ _("No repositories found.") }}</p>
        % endfor
        </div>
        % if next_page
            <br>
            <a class="btn btn-default btn-lg" href="?page={{ b64encode_s(next_page) }}">{{ _("Next Page â†’") }}</a>
        % endif
    % endif

% endif
% endblock
