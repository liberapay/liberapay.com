from liberapay.utils import get_participant

get_unread = lambda notifs: [n for n in notifs if n['is_new']]

[---]

request.allow('GET', 'POST')

participant = get_participant(state, restrict=True)

if request.method == 'POST':
    body = request.body
    if body.get('mark_all_as_read') == 'true':
        until = body.get_int('until', default=0)
        participant.mark_notifications_as_read(until=until)
    elif 'mark_as_read' in body:
        participant.mark_notification_as_read(body.get_int('mark_as_read'))
    elif 'restore' in body:
        participant.restore_notification(body.get_int('restore'))
    else:
        participant.remove_notification(body.get_int('remove'))
    response.redirect(request.line.uri)

title = participant.username
subhead = _("Notifications")

# The notifications use inline styles, tell the browser to accept them
csp = response.headers[b'Content-Security-Policy']
csp = csp.allow(b'style-src', b"'unsafe-inline'")
response.headers[b'Content-Security-Policy'] = csp

before = request.qs.get_int('before', default=None)
limit = 20

# NOTE: don't factor the render_notifications() call here, it'll break escaping

[---] application/json via json_dump
participant.render_notifications(state, before=before, limit=limit)

[---] text/html
% extends "templates/layouts/settings.html"

% block content
<form action="" method="POST">
    <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
    % set notifs = participant.render_notifications(state, before=before, limit=limit)
    % set unread_notifications = get_unread(notifs)
    % if len(unread_notifications) > 0
        <input type="hidden" name="until" value="{{ unread_notifications[0].id }}" />
    % endif
    <button class="btn btn-primary" name="mark_all_as_read" value="true"
        {{ 'disabled' if not unread_notifications }}>{{
        _("Mark all notifications in this page as read")
    }}</button><br>
    <br>
    % for notif in notifs
        <div class="alert alert-{{ notif.type }} {{ 'alert-read' if not notif.is_new else '' }}">
        % if notif.subject
            <h3 class="alert-header">
                <span class="title">{{ notif.subject|safe }}</span>
                <small>{{ locale.format_datetime(notif.ts) if notif.ts }}</small>
                <span class="actions">
                    % if notif.is_new
                    <button class="glyphicon glyphicon-eye-open hover-info" name="mark_as_read" value="{{ notif.id }}" title="{{
                            _('Mark as read') }}"></button>&nbsp;
                    % endif
                    <button class="glyphicon glyphicon-remove hover-danger" name="remove" value="{{ notif.id }}" title="{{
                            _('Remove') }}"></button>
                </span>
            </h3>
            {{ notif.html|safe }}
        % else
            <i>{{ _("This notification is marked for deletion.") }}</i>
            <button class="btn btn-default btn-xs pull-right" name="restore" value="{{ notif.id }}">{{
                _("Restore")
            }}</button>
        % endif
        </div>
    % else
        <p>{{ _("No notifications to show.") }}</p>
    % endfor
    % if len(notifs) == limit
        <a class="btn btn-default" href="{{ request.qs.derive(before=notifs[-1].id) }}">{{
            _("Next Page â†’")
        }}</a>
    % endif
</form>
% endblock
