from datetime import timedelta
from math import floor

from liberapay.models.exchange_route import ExchangeRoute
from liberapay.models.participant import Participant
from liberapay.payin.common import (
    prepare_payin, prepare_payin_transfer, resolve_amounts, resolve_tip,
    abort_payin,
)
from liberapay.payin.paypal import capture_order, create_order, sync_order
from liberapay.payin.prospect import PayinProspect
from liberapay.utils import get_participant

PAYPAL_BIT = 2

[---]

payer = get_participant(state, restrict=True)

del currency

if request.method == 'POST':
    website.check_payin_allowed(request, user, 'paypal')

    body = request.body

    payin_currency = body.get_currency('currency')
    payin_amount = body['amount']
    if payin_amount == 'custom':
        payin_amount = locale.parse_money_amount(body['amount_custom'], payin_currency)
    else:
        payin_amount = Money(payin_amount, payin_currency)
    payin_amount = payin_amount.convert_if_currency_is_phased_out()
    del payin_currency

    tips = website.db.all("""
        SELECT t.*, p AS tippee_p
          FROM tips t
          JOIN participants p ON p.id = t.tippee
         WHERE t.tipper = %s
           AND t.id IN %s
           AND p.payment_providers & %s > 0
      ORDER BY t.id
    """, (payer.id, set(body.parse_list('tips', int)), PAYPAL_BIT))
    if len(set(tip.amount.currency for tip in tips)) != 1:
        raise response.invalid_input(body.get('tips'), 'tips', 'body')
    if len(tips) > 1:
        raise response.error(400, "We don't support one-to-many payments through PayPal yet.")

    prospect = PayinProspect(payer, tips, 'paypal')
    amount_min = prospect.min_acceptable_amount
    amount_max = prospect.max_acceptable_amount
    if payin_amount < amount_min or payin_amount > amount_max:
        raise response.error(400, _(
            "'{0}' is not an acceptable amount (min={1}, max={2})",
            payin_amount, amount_min, amount_max
        ))

    transfer_amounts = resolve_amounts(
        payin_amount, {tip.id: tip.amount for tip in tips}
    )
    route = ExchangeRoute.upsert_generic_route(payer, 'paypal')
    payer_country = route.country or request.country
    proto_transfers = []
    for tip in tips:
        proto_transfers.extend(resolve_tip(
            website.db, tip, tip.tippee_p, 'paypal', payer, payer_country,
            transfer_amounts[tip.id]
        ))
    payin = prepare_payin(website.db, payer, payin_amount, route, proto_transfers)[0]

    msg = _("Request in progress, please wait…")
    response.refresh(state, url=payer.path('giving/pay/paypal/%i' % payin.id), msg=msg)

payin_id = request.path['payin_id']

if payin_id:
    if not payin_id.isdigit():
        raise response.error(404, "invalid payin ID in URL path")
    payin = website.db.one("""
        SELECT *
          FROM payins
         WHERE id = %s
           AND payer = %s
    """, (payin_id, payer.id))
    if not payin:
        raise response.error(404, "unknown payin ID in URL path")
    if payin.status == 'pre':
        return_url = payer.url('giving/pay/paypal/%i' % payin.id)
        cancel_url = payer.url('giving/pay/paypal/%i?cancel' % payin.id)
        payin = create_order(website.db, payin, payer, return_url, cancel_url, state)
    elif payin.status != 'succeeded' and payin.remote_id:
        payer_id = request.qs.get('PayerID')
        if payin.remote_id.startswith('PAYID-'):
            raise response.error(400, "The v1 API is no longer supported.")
        else:
            if payer_id:
                payin = capture_order(website.db, payin)
            else:
                payin = sync_order(website.db, payin)
    if payin.status == 'awaiting_payer_action' and 'cancel' in request.qs:
        payin = abort_payin(website.db, payin)

tippees = request.qs.parse_list('beneficiary', int, default=None)
if tippees:
    tips = [
        tip for tip in payer.get_tips_to(tippees)
        if tip.tippee_p.payment_providers & PAYPAL_BIT > 0
    ]
    if len(set(tip.amount.currency for tip in tips)) != 1:
        raise response.invalid_input(tippees, 'beneficiary', 'querystring')
    payment = PayinProspect(payer, tips, 'paypal')
    for tip in tips:
        if payment.currency not in tip.tippee_p.accepted_currencies_set:
            raise response.redirect(payer.path(
                'giving/pay?redirect_reason=unaccepted_currency'
            ))
    del tips

elif not payin_id:
    response.redirect(payer.path('giving/pay'))

if user == payer:
    payer.mark_notifications_as_read('donate_reminder')

title = _("Funding your donations")

[---] text/html
% extends "templates/layouts/base-thin.html"

% block thin_content

% if payin is defined
    % set status = payin.status
    % if status == 'succeeded'
        <div class="alert alert-success">{{ _(
            "The payment of {charge_amount} was successful.", charge_amount=payin.amount
        ) }}</div>
        <a class="btn btn-default" href="{{ payer.path('receipts/direct/%s' % payin.id) }}">{{
            _("View receipt")
        }}</a>
    % elif status == 'failed'
        <div class="alert alert-danger">
            <h4>{{ _("Failure") }}</h4>
            <p>{{ _(
                "The payment processor {name} returned an error: “{error_message}”.",
                name='PayPal', error_message=payin.error
            ) }}</p>
        </div>
        <p><a class="btn btn-primary" href="{{ payer.path('giving/pay') }}?retry={{ payin.id }}">{{ _("Try again") }}</a></p>
    % elif status == 'pending'
        <div class="alert alert-info">{{ _("The payment has been initiated.") }}</div>
    % elif status == 'awaiting_payer_action'
        <div class="alert alert-warning">{{ _("The payment is awaiting your approval.") }}</div>
    % endif

    % if status != 'failed'
    <hr>
    % set n_fundable = payer.get_tips_awaiting_payment()[1]
    % if n_fundable
        <p>{{ ngettext(
            "You have {n} other donation awaiting payment.",
            "You have {n} other donations awaiting payment.",
            n=n_fundable
        ) }}</p>
        <a href="{{ payer.path('giving/pay') }}" class="btn btn-primary">{{
            ngettext("Renew this donation", "Renew these donations", n_fundable)
        }}</a>
    % else
        <p>{{ _("You don't have any other donation awaiting payment at this time.") }}</p>
        <a class="btn btn-default" href="{{ payer.path('giving/') }}">{{ _("Manage your donations") }}</a>
    % endif
    % endif

% else

    <form action="" method="POST" id="paypal">
        % if len(payment.recipient_names) == 1
            <p>{{ _(
                "Your donation of {amount} to {recipient} is awaiting payment.",
                amount=payment.tips[0].periodic_amount,
                recipient=payment.recipient_names[0]
            ) }}</p>
        % else
            <p>{{ _(
                "Your donations to {recipients} are awaiting payment.",
                recipients=payment.recipient_names
            ) }}</p>
        % endif
        % if payment.one_periods_worth < payment.min_acceptable_amount
            <p>{{ _(
                "We cannot charge you only {donation_amount}, the minimum payment "
                "amount is {min_payment_amount}.",
                donation_amount=payment.one_periods_worth,
                min_payment_amount=payment.min_acceptable_amount
            ) }}</p>
        % endif
        <p>{{ _("Please select or input a payment amount:") }}</p>
        <fieldset id="amount">
            <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
            <input type="hidden" name="currency" value="{{ payment.currency }}" />
            <input type="hidden" name="tips" value="{{ payment.tip_ids }}" />
            <ul class="list-group radio-group">
            % set show_fee_notice = (
                len(payment.suggested_amounts) > 1 and
                payment.suggested_amounts[0] < payment.low_fee_amount
            )
            % for charge_amount in payment.suggested_amounts
                <li class="list-group-item">
                <label>
                    <input type="radio" name="amount" value="{{ charge_amount.amount }}" required />
                    <div class="radio-label">
                    <h5 class="list-group-item-heading">{{ locale.format_money(charge_amount) }}
                    % if show_fee_notice
                    % if charge_amount < payment.moderate_fee_amount
                        <small class="text-warning">{{ _("(not recommended, high fee percentage)") }}</small>
                    % elif charge_amount < payment.low_fee_amount
                        <small class="text-info">{{ _("(okay, moderate fee percentage)") }}</small>
                    % else
                        <small class="text-success">{{ _("(recommended, low fee percentage)") }}</small>
                    % endif
                    % endif
                    </h5>
                    % set weeks = int(floor(charge_amount / payment.one_weeks_worth))
                    <p class="list-group-item-text">{{ ngettext(
                        "", "Next payment in {n} weeks ({timedelta}).", n=weeks, timedelta=timedelta(weeks=weeks)
                    ) if payment.period == 'weekly' and weeks > 7 else _(
                        "Next payment {in_N_weeks_months_or_years}.",
                        in_N_weeks_months_or_years=to_age(timedelta(weeks=weeks))
                    ) }}</p>
                    </div>
                </label>
                </li>
            % endfor
                <li class="list-group-item">
                <label>
                    <input type="radio" name="amount" value="custom" required id="custom-amount-radio" />
                    <div class="radio-label">
                    <h5 class="list-group-item-heading">{{ _(
                        "Custom amount (min={0}, max={1})",
                        payment.min_acceptable_amount,
                        payment.max_acceptable_amount,
                    ) }}</h5>
                    <div class="input-group">
                        <div class="input-group-addon">{{
                            locale.currency_symbols.get(payment.currency, payment.currency)
                        }}</div>
                        <input type="tel" inputmode="decimal" class="form-control amount"
                               data-required-if-checked="#custom-amount-radio"
                               name="amount_custom" placeholder="{{ _('Amount') }}" />
                    </div>
                    </div>
                </label>
                </li>
            </ul>
        </fieldset>

        <p class="text-info">{{ glyphicon('info-sign') }} {{ _(
            "Liberapay does not store money, the entire amount of your payment will "
            "go immediately to the {payment_provider} accounts of the recipients.",
            payment_provider='PayPal',
        ) }}</p>

        <div class="text-warning">{{ glyphicon('warning-sign') }} {{ _(
            "PayPal reveals your name and email address to the recipient."
        ) }}</div>

        <br>
        <button class="btn btn-primary btn-lg btn-block">{{ _(
            "Initiate the payment"
        ) }}</button>
    </form>

% endif

% endblock
