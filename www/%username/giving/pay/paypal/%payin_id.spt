# coding: utf8

from datetime import timedelta
from decimal import ROUND_HALF_UP
from math import floor

from liberapay.models.exchange_route import ExchangeRoute
from liberapay.models.participant import Participant
from liberapay.payin.common import (
    prepare_payin, prepare_payin_transfer, resolve_amounts, resolve_destination
)
from liberapay.payin.paypal import create_payment, execute_payment, sync_payment
from liberapay.utils import get_participant, NS

PAYPAL_BIT = 2

[---]

payer = get_participant(state, restrict=True)

del currency

if request.method == 'POST':
    website.check_payin_allowed(request, user, 'paypal')

    body = request.body

    payin_currency = body['currency']
    if payin_currency not in constants.CURRENCIES:
        raise response.invalid_input(payin_currency, 'currency', 'body')

    payin_amount = body['amount']
    if payin_amount == 'custom':
        payin_amount = locale.parse_money_amount(body['amount_custom'], payin_currency)
    else:
        payin_amount = Money(payin_amount, payin_currency, rounding=ROUND_HALF_UP)

    tips = website.db.all("""
        SELECT t.*, p AS tippee_p
          FROM tips t
          JOIN participants p ON p.id = t.tippee
         WHERE t.tipper = %s
           AND t.id IN %s
           AND p.payment_providers & %s > 0
      ORDER BY t.id
    """, (payer.id, set(body.parse_list('tips', int)), PAYPAL_BIT))
    if len(set(tip.amount.currency for tip in tips)) != 1:
        raise response.invalid_input(body.get('tips'), 'tips', 'body')
    if len(tips) > 1:
        raise response.error(400, "We don't support one-to-many payments through PayPal yet.")

    tips_weekly_sum = Money.sum((tip.amount for tip in tips), payin_currency)
    amount_min = max(constants.PAYIN_PAYPAL_MIN_ACCEPTABLE[payin_currency], tips_weekly_sum)
    amount_max = constants.PAYIN_PAYPAL_MAX_ACCEPTABLE[payin_currency]
    if payin_amount < amount_min or payin_amount > amount_max:
        raise response.error(400, _(
            "'{0}' is not an acceptable amount (min={1}, max={2})",
            payin_amount, amount_min, amount_max
        ))

    transfer_amounts = resolve_amounts(
        payin_amount, {tip.id: tip.amount for tip in tips}
    )
    route = ExchangeRoute.upsert_generic_route(payer, 'paypal')
    payin = prepare_payin(website.db, payer, payin_amount, route)
    for tip in tips:
        beneficiary = tip.tippee_p
        tr_amount = transfer_amounts[tip.id]
        destination = resolve_destination(
            website.db, beneficiary, 'paypal', payer, request.country, tr_amount
        )
        if beneficiary.kind == 'group':
            context = 'team-donation'
            team = beneficiary.id
            recipient = Participant.from_id(destination.participant)
        else:
            context = 'personal-donation'
            team = None
            recipient = beneficiary
        prepare_payin_transfer(
            website.db, payin, recipient, destination, context,
            tr_amount, tip.periodic_amount, tip.period, team=team
        )

    msg = _("Request in progress, please wait…")
    response.refresh(state, url=payer.path('giving/pay/paypal/%i' % payin.id), msg=msg)

payin_id = request.path['payin_id']

if payin_id:
    if not payin_id.isdigit():
        raise response.error(404, "invalid payin ID in URL path")
    payin = website.db.one("""
        SELECT *
          FROM payins
         WHERE id = %s
           AND payer = %s
    """, (payin_id, payer.id))
    if not payin:
        raise response.error(404, "unknown payin ID in URL path")
    if payin.status == 'pre':
        return_url = payer.url('giving/pay/paypal/%i' % payin.id)
        payin = create_payment(website.db, payin, payer, return_url, state)
    elif payin.status == 'pending':
        payer_id = request.qs.get('PayerID')
        if payer_id:
            payin = execute_payment(website.db, payin, payer_id)
        else:
            payin = sync_payment(website.db, payin)

tippees = request.qs.parse_list('beneficiary', int, default=None)
if tippees:
    tips = [
        tip for tip in payer.get_tips_to(tippees)
        if tip.tippee_p.payment_providers & PAYPAL_BIT > 0
    ]
    if len(set(tip.amount.currency for tip in tips)) != 1:
        raise response.invalid_input(tippees, 'beneficiary', 'querystring')
    payment_currency = tips[0].amount.currency
    payment = NS()
    payment.recipient_links = [tip.tippee_p.link() for tip in tips]
    payment.recipient_names = [tip.tippee_p.username for tip in tips]
    payment.tips = tips
    payment.tip_ids = ','.join(str(tip.id) for tip in tips)
    payment.period = set(tip.period for tip in tips)
    payment.period = (
        tuple(payment.period)[0] if len(payment.period) == 1 else
        'monthly' if 'monthly' in payment.period else
        'weekly'
    )
    CONVERSION_MAP = constants.PERIOD_CONVERSION_MAP
    payment.one_periods_worth = sum(
        tip.periodic_amount * CONVERSION_MAP[(tip.period, payment.period)] for tip in tips
    ).round()
    payment.one_weeks_worth = sum(tip.amount for tip in tips).round()
    payment.one_years_worth = sum(
        tip.periodic_amount * CONVERSION_MAP[(tip.period, 'yearly')] for tip in tips
    ).round()
    payment.twelve_years_worth = payment.one_years_worth * 12
    if payment.period == 'weekly':
        payment.one_months_worth = (payment.one_weeks_worth * 4).round()
    elif payment.period == 'monthly':
        payment.one_months_worth = payment.one_periods_worth
    else:
        payment.one_months_worth = (payment.one_years_worth / 12).round()
    payment.min_acceptable_amount = max(
        constants.PAYIN_PAYPAL_MIN_ACCEPTABLE[payment_currency],
        payment.one_weeks_worth
    )
    payment.moderate_fee_amount = max(
        constants.PAYIN_PAYPAL_MIN_RECOMMENDED[payment_currency],
        payment.one_weeks_worth
    )
    payment.low_fee_amount = constants.PAYIN_PAYPAL_LOW_FEE[payment_currency]
    payment.max_acceptable_amount = min(
        constants.PAYIN_PAYPAL_MAX_ACCEPTABLE[payment_currency],
        payment.twelve_years_worth
    )
    payment.min_proposed_amount = max(
        payment.min_acceptable_amount,
        payment.one_months_worth,
        payment.one_periods_worth
    )
    payment.moderate_proposed_amount = min(
        max(
            payment.moderate_fee_amount,
            payment.one_months_worth,
            payment.one_periods_worth
        ),
        payment.twelve_years_worth
    )
    periodic_amounts = [
        payment.one_months_worth,
        (payment.one_years_worth / 4).round(),
        (payment.one_years_worth / 2).round(),
        payment.one_years_worth,
    ]
    recommended_amounts = [
        a for a in periodic_amounts
        if a >= payment.low_fee_amount and
           a >= payment.moderate_proposed_amount * 2 and
           a <= payment.max_acceptable_amount
    ]
    payment.amounts = sorted(set((
        payment.min_proposed_amount,
        payment.moderate_proposed_amount,
        *recommended_amounts
    )))
    del tips

elif not payin_id:
    response.redirect(payer.path('giving/pay'))

if user == payer:
    payer.mark_notifications_as_read('donate_reminder')

title = _("Funding your donations")

[---] text/html
% extends "templates/base-thin.html"

% block thin_content

% if payin
    % set status = payin.status
    % if status == 'succeeded'
        <div class="alert alert-success">{{ _(
            "The payment of {charge_amount} was successful.", charge_amount=payin.amount
        ) }}</div>
        {#<a class="btn btn-default" href="{{ payer.path('bill/%s' % payin.id) }}">{{
            _("View receipt")
        }}</a>#}
    % elif status == 'failed'
        <div class="alert alert-danger">{{ _(
            "The payment failed. Error message: “{0}”", payin.error
        ) }}</div>
    % elif status == 'pending'
        <div class="alert alert-warning">{{ _("The payment is awaiting your approval.") }}</div>
    % endif

    <hr>
    % set n_fundable = payer.get_tips_awaiting_renewal()[1]
    % if n_fundable
        <p>{{ ngettext(
            "You have {n} other donation awaiting payment.",
            "You have {n} other donations awaiting payment.",
            n=n_fundable
        ) }}</p>
        <a href="{{ payer.path('giving/pay') }}" class="btn btn-primary">{{
            ngettext("Renew this donation", "Renew these donations", n_fundable)
        }}</a>
    % else
        <p>{{ _("You don't have any other donation awaiting payment at this time.") }}</p>
        <a class="btn btn-default" href="{{ payer.path('giving/') }}">{{ _("Manage your donations") }}</a>
    % endif

% else

    <form action="" method="POST" id="paypal">
        % if len(payment.recipient_links) == 1
            <p>{{ _(
                "Your donation of {amount} to {recipient} is awaiting payment.",
                amount=payment.tips[0].periodic_amount,
                recipient=payment.recipient_links[0]
            ) }}</p>
        % else
            <p>{{ _(
                "Your donations to {recipients} are awaiting payment.",
                recipients=payment.recipient_links
            ) }}</p>
        % endif
        % if payment.one_periods_worth < payment.min_acceptable_amount
            <p>{{ _(
                "We cannot charge you only {donation_amount}, the minimum payment "
                "amount is {min_payment_amount}.",
                donation_amount=payment.one_periods_worth,
                min_payment_amount=payment.min_acceptable_amount
            ) }}</p>
        % endif
        <p>{{ _("Please select or input a payment amount:") }}</p>
        <fieldset id="amount">
            <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
            <input type="hidden" name="currency" value="{{ payment_currency }}" />
            <input type="hidden" name="tips" value="{{ payment.tip_ids }}" />
            <ul class="list-group radio-group">
            % set show_fee_notice = len(payment.amounts) > 1 and payment.amounts[0] < payment.low_fee_amount
            % for charge_amount in payment.amounts
                <li class="list-group-item">
                <label>
                    <input type="radio" name="amount" value="{{ charge_amount.amount }}" class="hidden-xs" required />
                    <div class="radio-label">
                    <h5 class="list-group-item-heading">{{ locale.format_money(charge_amount) }}
                    % if show_fee_notice
                    % if charge_amount < payment.moderate_fee_amount
                        <small class="text-warning">{{ _("(not recommended, high fee percentage)") }}</small>
                    % elif charge_amount < payment.low_fee_amount
                        <small class="text-info">{{ _("(okay, moderate fee percentage)") }}</small>
                    % else
                        <small class="text-success">{{ _("(recommended, low fee percentage)") }}</small>
                    % endif
                    % endif
                    </h5>
                    % set weeks = int(floor(charge_amount / payment.one_weeks_worth))
                    <p class="list-group-item-text">{{ ngettext(
                        "", "Next payment in {n} weeks ({timedelta}).", n=weeks, timedelta=timedelta(weeks=weeks)
                    ) if payment.period == 'weekly' and weeks > 7 else _(
                        "Next payment {in_N_weeks_months_or_years}.",
                        in_N_weeks_months_or_years=to_age(timedelta(weeks=weeks))
                    ) }}</p>
                    </div>
                </label>
                </li>
            % endfor
                <li class="list-group-item">
                <label>
                    <input type="radio" name="amount" value="custom" class="hidden-xs" required />
                    <div class="radio-label">
                    <h5 class="list-group-item-heading">{{ _(
                        "Custom amount (min={0}, max={1})",
                        payment.min_acceptable_amount,
                        payment.max_acceptable_amount,
                    ) }}</h5>
                    <div class="input-group">
                        <div class="input-group-addon">{{
                            locale.currency_symbols.get(payment_currency, payment_currency)
                        }}</div>
                        <input type="tel" inputmode="decimal" class="form-control amount"
                               name="amount_custom" placeholder="{{ _('Amount') }}" />
                    </div>
                    </div>
                </label>
                </li>
            </ul>
        </fieldset>

        % if len(payment.recipient_names) > 1
        <div>{{ _(
            "The entire amount of your payment will go immediately to the "
            "{payment_provider} accounts of {recipient_names}.",
            payment_provider='PayPal', recipient_names=payment.recipient_names
        ) }}</div>
        % elif payer.mangopay_user_id
        <div class="text-warning">{{ glyphicon('warning-sign') }} {{ _(
            "Liberapay no longer stores money in wallets, the entire amount "
            "of your payment will go immediately to the {payment_provider} "
            "account of {recipient_name}.",
            payment_provider='PayPal', recipient_name=payment.recipient_names[0]
        ) }}</div>
        % else
        <p>{{ _(
            "The entire amount of your payment will go immediately to the "
            "{payment_provider} account of {recipient_name}.",
            payment_provider='PayPal', recipient_name=payment.recipient_names[0]
        ) }}</p>
        % endif

        <div class="text-warning">{{ glyphicon('warning-sign') }} {{ _(
            "PayPal payments are currently not anonymous, the recipient will "
            "see your name and email address."
        ) }}</div>

        <br>
        <button class="btn btn-primary btn-lg btn-block">{{ _(
            "Initiate the payment"
        ) }}</button>
    </form>

% endif

% endblock
