from functools import reduce
from math import ceil
from types import SimpleNamespace

from liberapay.models.participant import Participant
from liberapay.utils import get_participant, group_by, partition

PAYMENT_PROVIDERS = website.db.one(
    "SELECT array_to_json(enum_range(NULL::payment_providers))"
)

allow_stripe_card = website.app_conf.payin_methods.get('stripe-card', True)
allow_stripe_sdd = website.app_conf.payin_methods.get('stripe-sdd', True)
allow_paypal = website.app_conf.payin_methods.get('paypal', True)

[---]

payer = get_participant(state, restrict=True)

payin_id = request.path['payment_id']

if payin_id == 'complete':
    # For backward compatibility
    payin = website.db.one("""
        SELECT pi.*
          FROM payin pi
          JOIN exchange_routes r ON r.id = pi.route
         WHERE pi.participant = %s
           AND r.network = 'stripe'
           AND r.address = %s
      ORDER BY pi.ctime DESC
         LIMIT 1
    """, (payer.id, request.qs['source']))
    if not payin:
        raise response.error(400, "payin not found")
    response.redirect(payer.path('giving/pay/stripe/%i' % payin.id))

elif payin_id:
    # For backward compatibility
    if not payin_id.isdigit():
        raise response.error(404, "invalid payin ID in URL path")
    payin = website.db.one("""
        SELECT *
          FROM payins
         WHERE id = %s
           AND payer = %s
    """, (payin_id, payer.id))
    if not payin:
        raise response.error(404, "unknown payin ID in URL path")
    response.redirect(payer.path('giving/pay/stripe/%i' % payin.id))

weeks_early = request.qs.get_int('weeks_early', default=3)
donation_groups, n_fundable = payer.get_tips_awaiting_payment(weeks_early)
n_payments = len(donation_groups['fundable'])
donations_not_fundable = (
    donation_groups['no_provider'] +
    donation_groups['no_taker'] +
    donation_groups['suspended']
)
self_donations = donation_groups['self_donation']

payment = None
tippee_id = request.qs.get_int('beneficiary', default=None)
retry_id = request.qs.get_int('retry', default=None)
if tippee_id:
    tippee = Participant.from_id(tippee_id)
    tip = payer.get_tip_to(tippee)
    if tip.renewal_mode == 0:
        raise response.error(400, _(
            "You are not donating to {username}.", username=tippee.username
        ))
    tip.tippee_p = tippee
    if tip.tippee_p.payment_providers:
        payment = SimpleNamespace()
        payment.tips = (tip,)
        payment.currency = tip.amount.currency
        payment.providers = [
            name for i, name in enumerate(PAYMENT_PROVIDERS)
            if tip.tippee_p.payment_providers & 2**i > 0
        ]
    else:
        donations_not_fundable = [tip]

elif retry_id:
    error = website.db.one("""
        SELECT error
          FROM payins
         WHERE payer = %s
           AND id = %s
           AND status = 'failed'
    """, (payer.id, retry_id))
    if not error:
        raise response.invalid_input(retry_id, 'retry', 'querystring')
    if error.startswith("For 'sepa_debit' payments, we currently require "):
        allow_stripe_sdd = False
    tips = website.db.all("""
        SELECT tip.*, tippee_p
          FROM payin_transfers pt
          JOIN current_tips tip ON tip.tipper = pt.payer AND tip.tippee = coalesce(pt.team, pt.recipient)
          JOIN participants tippee_p ON tippee_p.id = tip.tippee
         WHERE pt.payer = %s
           AND pt.payin = %s
    """, (payer.id, retry_id))
    if not tips:
        raise response.invalid_input(retry_id, 'retry', 'querystring')
    payment = SimpleNamespace()
    payment.tips = tips
    del tips
    payment.currency = payment.tips[0].amount.currency
    _provider_bits = reduce(
        int.__and__, (tip.tippee_p.payment_providers for tip in payment.tips)
    )
    payment.providers = [
        name for i, name in enumerate(PAYMENT_PROVIDERS)
        if _provider_bits & 2**i > 0
    ]
    # If the payin failed with a persistent error tied to the destination country,
    # then retrying will fail, because the `try_other_destinations` function has
    # already tried to bypass the error. The donor should avoid Stripe entirely
    # if possible.
    disable_stripe = 'stripe' in payment.providers and (
        error.startswith("As per Indian regulations, only registered Indian businesses ") or
        error.startswith("Stripe doesn't currently support ")
    )
    if disable_stripe:
        payment.providers.remove('stripe')
    # We don't support one-to-many through PayPal, so if this payment is intended
    # to fund multiple donations, then we have to either remove PayPal from the
    # options, or give up on the grouping and fund only the first donation.
    if len(payment.tips) > 1 and 'paypal' in payment.providers:
        if 'stripe' in payment.providers:
            payment.providers.remove('paypal')
        else:
            payment.tips = tips[:1]
    # If there aren't any payment providers left, then the donations aren't fundable.
    if not payment.providers:
        donations_not_fundable = payment.tips
        self_donations = ()
        payment = None
    del _provider_bits, disable_stripe, error

else:
    if n_payments:
        payment = SimpleNamespace()
        payment.tips = donation_groups['fundable'][0]
        payment.currency = payment.tips[0].amount.currency
        _provider_bits = reduce(
            int.__and__, (tip.tippee_p.payment_providers for tip in payment.tips)
        )
        payment.providers = [
            name for i, name in enumerate(PAYMENT_PROVIDERS)
            if _provider_bits & 2**i > 0
        ]
        if len(payment.tips) > 1 and 'paypal' in payment.providers:
            # We don't support one-to-many through PayPal yet.
            payment.providers.remove('paypal')
        del _provider_bits

if payment:
    payment.auto_renewal = any(tip.renewal_mode == 2 for tip in payment.tips)
    payment.beneficiary = 'beneficiary=' + ','.join(str(t.tippee) for t in payment.tips)
    payment.recipient_links = [tip.tippee_p.link() for tip in payment.tips]

if user == payer:
    payer.mark_notifications_as_read('donate_reminder')

title = _("Funding your donations")

[---] text/html
% from "templates/macros/icons.html" import fontawesome, glyphicon
% extends "templates/layouts/base-thin.html"

% block thin_content

% if payment

    % if n_fundable > 1 and not retry_id
        <p>{{ ngettext(
            "You have {n} donation awaiting payment.",
            "You have {n} donations awaiting payment.",
            n=n_fundable
        ) }}</p>
        % if n_payments > 1
        <p class="alert alert-warning">{{ ngettext(
            "",
            "Due to legal and technical limitations we are currently unable to process "
            "all your donations as a single payment. Instead you will have to make {n} "
            "separate payments. We apologize for the inconvenience.",
            n=n_payments
        ) }}</p>
        % else
        <p class="text-success">{{ glyphicon('ok') }} &nbsp;{{ _(
            "We are able to group these donations into a single payment."
        ) }}</p>
        % endif
        <hr>
    % endif

    % if len(payment.recipient_links) == 1
        <p>{{ _(
            "Your donation of {amount} to {recipient} is awaiting payment.",
            amount=payment.tips[0].periodic_amount, recipient=payment.recipient_links[0]
        ) }}</p>
    % else
        <p>{{ _(
            "Your donations to {recipients} are awaiting payment.",
            recipients=payment.recipient_links
        ) }}</p>
    % endif

    % if payment.providers == ['paypal']
    <p>{{ _("For now this donation can only be renewed externally through PayPal.") }}</p>
    % else
    <p>{{ _("Please choose a payment method:") }}</p>
    % endif

    <div class="payment-methods">

    % for provider in payment.providers
        % if provider == 'stripe'
        <div class="panel panel-default {{ '' if allow_stripe_card else 'muted' }}">
            <div class="panel-body overlaid">
                <p class="payment-icon">{{ fontawesome('credit-card-alt') }}</p>
                <h4>{{ _("Card") }}<br>
                    % if not allow_stripe_card
                    <small class="text-danger">{{ _("Currently unavailable") }}</small>
                    % else
                    <small>Visa, MasterCard, American Express</small>
                    % endif
                </h4>
                % if allow_stripe_card
                <a class="overlay" href="{{ payer.path('giving/pay/stripe/') }}?{{ payment.beneficiary }}&amp;method=card"
                    ><span class="sr-only">{{ _("Pay by card") }}</span></a>
                % endif
            </div>
        </div>
        % set possible = allow_stripe_sdd and payment.currency == 'EUR'
        % set warn = request.country not in constants.SEPA
        <div class="panel panel-default {{ '' if possible else 'muted' }}">
            <div class="panel-body overlaid">
                <p class="payment-icon">{{ fontawesome('bank') }}</p>
                <h4>{{ _("Direct Debit") }}<br>
                    % if not allow_stripe_sdd
                    <small class="text-danger">{{ _("Currently unavailable") }}</small>
                    % elif payment.currency != 'EUR'
                    <small class="text-warning">{{ _("Euro donations only") }}</small>
                    % else
                    <small class="{{ 'text-warning' if warn else '' }}">{{ _("Euro bank accounts only") }}</small>
                    % endif
                </h4>
                % if possible
                <a class="overlay" href="{{ payer.path('giving/pay/stripe/') }}?{{ payment.beneficiary }}&amp;method=sdd"
                    ><span class="sr-only">{{ _("Pay by direct debit") }}</span></a>
                % endif
            </div>
        </div>
        % elif provider == 'paypal'
        % set possible = allow_paypal and payment.currency in constants.PAYPAL_CURRENCIES
        <div class="panel panel-default {{ '' if allow_paypal else 'muted' }}">
            <div class="panel-body overlaid">
                <p class="payment-icon">{{ fontawesome('paypal') }}</p>
                <h4>PayPal<br>
                    % if not allow_paypal
                    <small class="text-danger">{{ _("Currently unavailable") }}</small>
                    % elif payment.currency not in constants.PAYPAL_CURRENCIES
                    <small class="text-danger">{{ _(
                        "Doesn't support the {currency}", currency=Currency(payment.currency)
                    ) }}</small>
                    % elif payment.auto_renewal
                    <small class="text-warning">{{ _("Doesn't support automatic renewal") }}</small>
                    % else
                    <small class="text-warning">{{ _("Reveals your name and email address to the recipient") }}</small>
                    % endif
                </h4>
                % if possible
                <a class="overlay" href="{{ payer.path('giving/pay/paypal/') }}?{{ payment.beneficiary }}"
                    ><span class="sr-only">{{ _("Pay with PayPal") }}</span></a>
                % endif
            </div>
        </div>
        % endif
    % endfor
    </div>

% else

    % if donations_not_fundable or self_donations
        % for tip in donations_not_fundable
        <p>{{ _(
            "Your donation to {recipient} cannot be processed right now because the "
            "account of the beneficiary isn't ready to receive money.",
            recipient=tip.tippee_p.link()
        ) }}</p>
        % endfor
        % for tip in self_donations
        <p>{{ _(
            "Your donation to {team} cannot be processed because it would be "
            "sending money to yourself.",
            team=tip.tippee_p.link()
        ) }}</p>
        % endfor
    % else
        <div class="alert alert-success">{{ _("All your donations are funded.") }}</div>
        <a class="btn btn-default" href="{{ payer.path('giving/') }}">{{ _("Manage your donations") }}</a>
    % endif

% endif

% endblock
