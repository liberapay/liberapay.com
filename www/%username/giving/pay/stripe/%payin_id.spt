# coding: utf8

from datetime import timedelta
from decimal import ROUND_HALF_UP
from math import floor

import stripe
import stripe.error

from liberapay.exceptions import NextAction
from liberapay.models.exchange_route import ExchangeRoute
from liberapay.models.participant import Participant
from liberapay.payin.common import (
    prepare_donation, prepare_payin, prepare_payin_transfer, resolve_amounts,
)
from liberapay.payin.stripe import (
    charge_and_transfer, destination_charge, get_partial_iban, Money_to_int,
    repr_stripe_error, settle_payin,
)
from liberapay.utils import get_participant, NS

STRIPE_BIT = 1

[---]

payer = get_participant(state, restrict=True)

del currency

client_secret = None
payment_type = request.qs.get('method', 'card')

if request.method == 'POST':
    website.check_payin_allowed(request, user, 'stripe-' + payment_type)

    body = request.body

    payin_currency = body['currency']
    if payin_currency not in constants.CURRENCIES:
        raise response.invalid_input(payin_currency, 'currency', 'body')

    payin_amount = body['amount']
    if payin_amount == 'custom':
        payin_amount = locale.parse_money_amount(body['amount_custom'], payin_currency)
    else:
        payin_amount = Money(payin_amount, payin_currency, rounding=ROUND_HALF_UP)

    tips = website.db.all("""
        SELECT t.*, p AS tippee_p
          FROM tips t
          JOIN participants p ON p.id = t.tippee
         WHERE t.tipper = %s
           AND t.id IN %s
           AND p.payment_providers & %s > 0
      ORDER BY t.id
    """, (payer.id, set(body.parse_list('tips', int)), STRIPE_BIT))
    if len(set(tip.amount.currency for tip in tips)) != 1:
        raise response.invalid_input(body.get('tips'), 'tips', 'body')

    tips_weekly_sum = Money.sum((tip.amount for tip in tips), payin_currency)
    amount_min = max(constants.PAYIN_STRIPE_MIN_ACCEPTABLE[payin_currency], tips_weekly_sum)
    amount_max = constants.PAYIN_STRIPE_MAX_ACCEPTABLE[payin_currency]
    if payin_amount < amount_min or payin_amount > amount_max:
        raise response.error(400, _(
            "'{0}' is not an acceptable amount (min={1}, max={2})",
            payin_amount, amount_min, amount_max
        ))

    try:
        if 'token' in body:
            return_url = payer.url('giving/pay/stripe/complete')
            one_off = body.get('keep') != 'true'

            owner_address = {
                k: body.get('owner.address.' + k) for k in constants.POSTAL_ADDRESS_KEYS_STRIPE
            }
            if 'line1' not in owner_address:
                owner_address = None

            token = stripe.Token.retrieve(body['token'])
            if token.type == 'bank_account':
                network = 'stripe-sdd'
                source_type = 'sepa_debit'
            elif token.type == 'card':
                network = 'stripe-card'
                source_type = 'card'
            else:
                raise response.error(400, "unknown token type")

            source = stripe.Source.create(
                amount=Money_to_int(payin_amount) if one_off else None,
                owner={
                    'address': owner_address,
                    'email': payer.get_email_address(),
                    'name': body.get('owner.name'),
                },
                redirect={'return_url': return_url},
                token=token.id,
                type=source_type,
                usage=('single_use' if one_off and source_type == 'card' else 'reusable'),
            )
            customer_id = website.db.one("""
                SELECT remote_user_id
                  FROM exchange_routes
                 WHERE participant = %s
                   AND network::text LIKE 'stripe-%%'
                 LIMIT 1
            """, (payer.id,))
            if customer_id:
                customer = stripe.Customer.retrieve(customer_id)
                customer.sources.create(source=source.id)
                del customer
            else:
                customer_id = stripe.Customer.create(
                    email=source.owner.email,
                    source=source.id,
                ).id
            source_country = getattr(getattr(source, source.type), 'country', None)
            source_currency = getattr(getattr(source, source.type), 'currency', None)
            route = ExchangeRoute.insert(
                payer, network, source.id, source.status,
                one_off=one_off, remote_user_id=customer_id,
                country=source_country, currency=source_currency,
            )
        elif 'stripe_pm_id' in body:
            return_url = payer.url('giving/pay/stripe/complete')
            one_off = body.get('keep') != 'true'

            pm = stripe.PaymentMethod.retrieve(body['stripe_pm_id'])
            if pm.type == 'card':
                network = 'stripe-card'
            else:
                raise response.error(400, "unknown PaymentMethod type")

            customer_id = website.db.one("""
                SELECT remote_user_id
                  FROM exchange_routes
                 WHERE participant = %s
                   AND network::text LIKE 'stripe-%%'
                 LIMIT 1
            """, (payer.id,))
            if customer_id:
                pm = stripe.PaymentMethod.attach(pm.id, customer=customer_id)
            else:
                customer_id = stripe.Customer.create(
                    email=payer.get_email_address(),
                    payment_method=pm.id,
                ).id
            pm_country = getattr(getattr(pm, pm.type), 'country', None)
            pm_currency = getattr(getattr(pm, pm.type), 'currency', None)
            route = ExchangeRoute.insert(
                payer, network, pm.id, 'chargeable',
                one_off=one_off, remote_user_id=customer_id,
                country=pm_country, currency=pm_currency,
            )
        else:
            route = ExchangeRoute.from_id(payer, body.get_int('route'), _raise=False)
            if route is None:
                raise response.invalid_input(body.get('route'), 'route', 'body')
            if route.address.startswith('pm_'):
                # A PaymentMethod doesn't have a status.
                pass
            else:
                source = stripe.Source.retrieve(route.address)
                route.update_status(source.status)

    except stripe.error.StripeError as e:
        raise response.error(e.http_status, _(
            "The payment processor {name} returned an error: “{error_message}”.",
            name='Stripe', error_message=repr_stripe_error(e)
        ))

    transfer_amounts = resolve_amounts(
        payin_amount, {tip.id: tip.amount for tip in tips}
    )
    payin = prepare_payin(website.db, payer, payin_amount, route)
    payer_country = route.country or request.country
    for tip in tips:
        prepare_donation(
            website.db, payin, tip, tip.tippee_p, 'stripe', payer, payer_country,
            transfer_amounts[tip.id]
        )

    msg = _("Request in progress, please wait…")
    response.refresh(state, url=payer.path('giving/pay/stripe/%i' % payin.id), msg=msg)

payin_id = request.path['payin_id']

if payin_id == 'complete':
    payin = website.db.one("""
        SELECT pi.*
          FROM payin pi
          JOIN exchange_routes r ON r.id = pi.route
         WHERE pi.participant = %s
           AND r.network = 'stripe'
           AND r.address = %s
      ORDER BY pi.ctime DESC
         LIMIT 1
    """, (payer.id, request.qs['source']))
    if not payin:
        raise response.error(400, "payin not found")
    response.redirect(payer.path('giving/pay/stripe/%i' % payin.id))

elif payin_id:
    if not payin_id.isdigit():
        raise response.error(404, "invalid payin ID in URL path")
    payin = website.db.one("""
        SELECT *
             , ( SELECT count(*)
                   FROM payin_transfers pt
                   JOIN payment_accounts a ON a.pk = pt.destination
                  WHERE pt.payin = %(payin)s
               ) AS n_transfers
          FROM payins
         WHERE id = %(payin)s
           AND payer = %(payer)s
    """, dict(payin=payin_id, payer=payer.id))
    if not payin:
        raise response.error(404, "unknown payin ID in URL path")
    try:
        if payin.status == 'pre':
            if payin.n_transfers == 1:
                payin = destination_charge(
                    website.db, payin, payer,
                    statement_descriptor=('Liberapay %i' % payin.id)
                )
            else:
                payin = charge_and_transfer(
                    website.db, payin, payer,
                    statement_descriptor=('p%i' % payin.id)
                )
        elif payin.status == 'awaiting_payer_action':
            payin = settle_payin(website.db, payin)
    except NextAction as act:
        if act.type == 'redirect_to_url':
            response.refresh(state, url=act.redirect_to_url.url)
        elif act.type == 'use_stripe_sdk':
            client_secret = act.client_secret
        else:
            raise NotImplementedError()

tippees = request.qs.parse_list('beneficiary', int, default=None)
if tippees:
    tips = [
        tip for tip in payer.get_tips_to(tippees)
        if tip.tippee_p.payment_providers & STRIPE_BIT > 0
    ]
    if len(set(tip.amount.currency for tip in tips)) != 1:
        raise response.invalid_input(tippees, 'beneficiary', 'querystring')
    payment_currency = tips[0].amount.currency
    payment = NS()
    payment.recipient_links = [tip.tippee_p.link() for tip in tips]
    payment.recipient_names = [tip.tippee_p.username for tip in tips]
    payment.tips = tips
    payment.tip_ids = ','.join(str(tip.id) for tip in tips)
    payment.period = set(tip.period for tip in tips)
    payment.period = (
        tuple(payment.period)[0] if len(payment.period) == 1 else
        'monthly' if 'monthly' in payment.period else
        'weekly'
    )
    CONVERSION_MAP = constants.PERIOD_CONVERSION_MAP
    payment.one_periods_worth = sum(
        tip.periodic_amount * CONVERSION_MAP[(tip.period, payment.period)] for tip in tips
    ).round()
    payment.one_weeks_worth = sum(tip.amount for tip in tips).round()
    payment.one_years_worth = sum(
        tip.periodic_amount * CONVERSION_MAP[(tip.period, 'yearly')] for tip in tips
    ).round()
    payment.twelve_years_worth = payment.one_years_worth * 12
    if payment.period == 'weekly':
        payment.one_months_worth = (payment.one_weeks_worth * 4).round()
    elif payment.period == 'monthly':
        payment.one_months_worth = payment.one_periods_worth
    else:
        payment.one_months_worth = (payment.one_years_worth / 12).round()
    payment.min_acceptable_amount = max(
        constants.PAYIN_STRIPE_MIN_ACCEPTABLE[payment_currency],
        payment.one_weeks_worth
    )
    payment.moderate_fee_amount = max(
        constants.PAYIN_STRIPE_MIN_RECOMMENDED[payment_currency],
        payment.one_weeks_worth
    )
    payment.low_fee_amount = constants.PAYIN_STRIPE_LOW_FEE[payment_currency]
    payment.max_acceptable_amount = min(
        constants.PAYIN_STRIPE_MAX_ACCEPTABLE[payment_currency],
        payment.twelve_years_worth
    )
    payment.min_proposed_amount = max(
        payment.min_acceptable_amount,
        payment.one_months_worth,
        payment.one_periods_worth
    )
    payment.moderate_proposed_amount = min(
        max(
            payment.moderate_fee_amount,
            payment.one_months_worth,
            payment.one_periods_worth
        ),
        payment.twelve_years_worth
    )
    periodic_amounts = [
        payment.one_months_worth,
        (payment.one_years_worth / 4).round(),
        (payment.one_years_worth / 2).round(),
        payment.one_years_worth,
    ]
    recommended_amounts = [
        a for a in periodic_amounts
        if a >= payment.low_fee_amount and
           a >= payment.moderate_proposed_amount * 2 and
           a <= payment.max_acceptable_amount
    ]
    payment.amounts = sorted(set((
        payment.min_proposed_amount,
        payment.moderate_proposed_amount,
        *recommended_amounts
    )))
    del tips

elif not payin_id:
    response.redirect(payer.path('giving/pay'))

if payment_type:
    route = ExchangeRoute.from_network(payer, 'stripe-' + payment_type)
    route = route[0] if route else None
else:
    route = website.db.one("""
        SELECT r
          FROM exchange_routes r
         WHERE r.participant = %s
           AND r.status = 'chargeable'
           AND r.network::text LIKE 'stripe-%%'
           AND (r.one_off IS FALSE OR r.ctime > (current_timestamp - interval '6 hours'))
      ORDER BY r.network = 'stripe-sdd' DESC
             , r.id DESC
         LIMIT 1
    """, (payer.id,))
    route = None
if route:
    payment_type = route.network.split('-', 1)[-1]
    if route.address.startswith('pm_'):
        pm = stripe.PaymentMethod.retrieve(route.address)
    else:
        source = stripe.Source.retrieve(route.address)
        route.update_status(source.status)
    if not route:
        response.redirect(request.line.uri)
if not payment_type:
    response.redirect(payer.path('giving/pay'))

if user == payer:
    payer.mark_notifications_as_read('donate_reminder')

# https://stripe.com/docs/security#content-security-policy
csp = response.headers[b'Content-Security-Policy']
csp = csp.allow(b'connect-src', b"api.stripe.com")
csp = csp.allow(b'frame-src', b"js.stripe.com hooks.stripe.com")
csp = csp.allow(b'script-src', b"js.stripe.com")
response.headers[b'Content-Security-Policy'] = csp

title = _("Funding your donations")

[---] text/html
% extends "templates/base-thin.html"

% block thin_content

% if client_secret

    <p>{{ _("More information is required in order to process this payment.") }}</p>
    <noscript><div class="alert alert-danger">{{ _("JavaScript is required") }}</div></noscript>
    <div id="stripe_next_action" data-client_secret="{{ client_secret }}"></div>

% elif payin
    % set status = payin.status
    % if status == 'succeeded'
        <div class="alert alert-success">{{ _(
            "The payment of {charge_amount} was successful.", charge_amount=payin.amount
        ) }}</div>
        <a class="btn btn-default" href="{{ payer.path('receipts/direct/%s' % payin.id) }}">{{
            _("View receipt")
        }}</a>
    % elif status == 'failed'
        <div class="alert alert-danger">{{ _(
            "The payment failed. Error message: “{0}”", payin.error
        ) }}</div>
        <p><a class="btn btn-primary" href="{{ payer.path('giving/pay') }}?retry={{ payin.id }}">{{ _("Try again") }}</a></p>
    % elif status == 'pending'
        <div class="alert alert-info">{{ _("The payment has been initiated.") }}</div>
    % endif

    % if status != 'failed'
    <hr>
    % set n_fundable = payer.get_tips_awaiting_renewal()[1]
    % if n_fundable
        <p>{{ ngettext(
            "You have {n} other donation awaiting payment.",
            "You have {n} other donations awaiting payment.",
            n=n_fundable
        ) }}</p>
        <a href="{{ payer.path('giving/pay') }}" class="btn btn-primary">{{
            ngettext("Renew this donation", "Renew these donations", n_fundable)
        }}</a>
    % else
        <p>{{ _("You don't have any other donation awaiting payment at this time.") }}</p>
        <a class="btn btn-default" href="{{ payer.path('giving/') }}">{{ _("Manage your donations") }}</a>
    % endif
    % endif

% else

    <noscript><div class="alert alert-danger">{{ _("JavaScript is required") }}</div></noscript>

    <form action="javascript:" method="POST" id="stripe"
          data-stripe-pk="{{ website.app_conf.stripe_publishable_key }}">
        % if len(payment.recipient_links) == 1
            <p>{{ _(
                "Your donation of {amount} to {recipient} is awaiting payment.",
                amount=payment.tips[0].periodic_amount,
                recipient=payment.recipient_links[0]
            ) }}</p>
        % else
            <p>{{ _(
                "Your donations to {recipients} are awaiting payment.",
                recipients=payment.recipient_links
            ) }}</p>
        % endif
        % if payment.one_periods_worth < payment.min_acceptable_amount
            <p>{{ _(
                "We cannot charge you only {donation_amount}, the minimum payment "
                "amount is {min_payment_amount}.",
                donation_amount=payment.one_periods_worth,
                min_payment_amount=payment.min_acceptable_amount
            ) }}</p>
        % endif
        <p>{{ _("Please select or input a payment amount:") }}</p>
        <fieldset id="amount">
            <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
            <input type="hidden" name="route" value="{{ route.id or '' }}" />
            <input type="hidden" name="currency" value="{{ payment_currency }}" />
            <input type="hidden" name="tips" value="{{ payment.tip_ids }}" />
            <ul class="list-group radio-group">
            % set show_fee_notice = len(payment.amounts) > 1 and payment.amounts[0] < payment.low_fee_amount
            % for charge_amount in payment.amounts
                <li class="list-group-item">
                <label>
                    <input type="radio" name="amount" value="{{ charge_amount.amount }}" class="hidden-xs" required />
                    <div class="radio-label">
                    <h5 class="list-group-item-heading">{{ locale.format_money(charge_amount) }}
                    % if show_fee_notice
                    % if charge_amount < payment.moderate_fee_amount
                        <small class="text-warning">{{ _("(not recommended, high fee percentage)") }}</small>
                    % elif charge_amount < payment.low_fee_amount
                        <small class="text-info">{{ _("(okay, moderate fee percentage)") }}</small>
                    % else
                        <small class="text-success">{{ _("(recommended, low fee percentage)") }}</small>
                    % endif
                    % endif
                    </h5>
                    % set weeks = int(floor(charge_amount / payment.one_weeks_worth))
                    <p class="list-group-item-text">{{ ngettext(
                        "", "Next payment in {n} weeks ({timedelta}).", n=weeks, timedelta=timedelta(weeks=weeks)
                    ) if payment.period == 'weekly' and weeks > 7 else _(
                        "Next payment {in_N_weeks_months_or_years}.",
                        in_N_weeks_months_or_years=to_age(timedelta(weeks=weeks))
                    ) }}</p>
                    </div>
                </label>
                </li>
            % endfor
                <li class="list-group-item">
                <label>
                    <input type="radio" name="amount" value="custom" class="hidden-xs" required />
                    <div class="radio-label">
                    <h5 class="list-group-item-heading">{{ _(
                        "Custom amount (min={0}, max={1})",
                        payment.min_acceptable_amount,
                        payment.max_acceptable_amount,
                    ) }}</h5>
                    <div class="input-group">
                        <div class="input-group-addon">{{
                            locale.currency_symbols.get(payment_currency, payment_currency)
                        }}</div>
                        <input type="tel" inputmode="decimal" class="form-control amount"
                               name="amount_custom" placeholder="{{ _('Amount') }}" />
                    </div>
                    </div>
                </label>
                </li>
            </ul>
        </fieldset>

        % if pm
        <div class="form-group">
            % if pm.type == 'card'
            <p>{{ _(
                "We will charge your {brand} card (last four digits: {last4}).",
                brand=constants.CARD_BRANDS.get(pm.card.brand, pm.card.brand), last4=pm.card.last4
            ) }}</p>
            <button class="btn btn-default btn-sm" type="button" data-modify="#card-form">{{
                _("Use another card")
            }}</button>
            % elif pm.type == 'sepa_debit'
            <p>{{ _(
                "We will charge your {bank_name} account ({partial_account_number}).",
                bank_name=pm.sepa_debit.bank_name,
                partial_account_number=get_partial_iban(pm.sepa_debit)
            ) }}</p>
            <button class="btn btn-default btn-sm" type="button" data-modify="#iban-form">{{
                _("Use another bank account")
            }}</button>
            % endif
            <br><br>
        </div>
        % elif source
        <div class="form-group">
            % if source.type == 'card'
            <p>{{ _(
                "We will charge your {brand} card (last four digits: {last4}).",
                brand=source.card.brand, last4=source.card.last4
            ) }}</p>
            <button class="btn btn-default btn-sm" type="button" data-modify="#card-form">{{
                _("Use another card")
            }}</button>
            % elif source.type == 'sepa_debit'
            <p>{{ _(
                "We will charge your {bank_name} account ({partial_account_number}).",
                bank_name=source.sepa_debit.bank_name,
                partial_account_number=get_partial_iban(source.sepa_debit)
            ) }}</p>
            <button class="btn btn-default btn-sm" type="button" data-modify="#iban-form">{{
                _("Use another bank account")
            }}</button>
            % endif
            <br><br>
        </div>
        % endif

        % if payment_type == 'card'
        <fieldset id="card-form" class="form-group {{ 'hidden' if source or pm else '' }}">
            <p>{{ _("Please input your name and card number:") }}</p>
            <input name="owner.name" autocomplete="name" required minlength=3
                   class="form-control paragraph" placeholder="{{ _('Jane Doe') }}" />
            <div id="stripe-element" data-type="card" class="form-control paragraph"></div>
            <span id="stripe-errors" role="alert" class="invalid-msg"></span>
            <p class="help-block">{{ glyphicon('lock') }} {{ _(
                "This data will be sent directly to the payment processor "
                "{name} through an encrypted connection.",
                name='<a href="https://stripe.com/" target="_blank" rel="noopener noreferrer">Stripe</a>'|safe
            ) }}</p>
            <label>
                <input type="checkbox" name="keep" value="true" checked />
                {{ _("Remember the card number for next time") }}
            </label>
            <br><br>
        </fieldset>
        % elif payment_type == 'sdd'
        <fieldset id="iban-form" class="form-group {{ 'hidden' if source or pm else '' }}">
            <p>{{ _(
                "Please input your name and your IBAN (International Bank Account Number):"
            ) }}</p>
            <input name="owner.name" autocomplete="name" required minlength=3
                   class="form-control paragraph" placeholder="{{ _('Jane Doe') }}" />
            <div id="stripe-element" data-type="iban" class="form-control paragraph"></div>
            <span id="stripe-errors" role="alert" class="invalid-msg"></span>
            <p class="help-block">{{ _(
                "By providing your IBAN and confirming this payment, you are authorizing "
                "{platform} and {provider}, our payment service provider, to send instructions "
                "to your bank to debit your account and your bank to debit your account in "
                "accordance with those instructions. You are entitled to a refund from your "
                "bank under the terms and conditions of your agreement with your bank. "
                "A refund must be claimed within 8 weeks starting from the date on which "
                "your account was debited.",
                platform='Liberapay',
                provider='<a href="https://stripe.com/" target="_blank" rel="noopener noreferrer">Stripe</a>'|safe
            ) }}</p>
            <label>
                <input type="checkbox" name="keep" value="true" checked />
                {{ _("Remember the bank account number for future payments") }}
            </label>
            <br>
        </fieldset>
        % endif

        % if len(payment.recipient_names) > 1
        <div>{{ _(
            "The entire amount of your payment will go immediately to the "
            "{payment_provider} accounts of {recipient_names}.",
            payment_provider='Stripe', recipient_names=payment.recipient_names
        ) }}</div>
        % elif payer.mangopay_user_id
        <div class="text-warning">{{ glyphicon('warning-sign') }} {{ _(
            "Liberapay no longer stores money in wallets, the entire amount "
            "of your payment will go immediately to the {payment_provider} "
            "account of {recipient_name}.",
            payment_provider='Stripe', recipient_name=payment.recipient_names[0]
        ) }}</div>
        % else
        <div>{{ _(
            "The entire amount of your payment will go immediately to the "
            "{payment_provider} account of {recipient_name}.",
            payment_provider='Stripe', recipient_name=payment.recipient_names[0]
        ) }}</div>
        % endif

        <br>
        <button class="btn btn-primary btn-lg btn-block">{{ _(
            "Initiate the payment"
        ) }}</button>
    </form>

% endif

% endblock

% block scripts
    <script src="https://js.stripe.com/v3/"></script>
% endblock
