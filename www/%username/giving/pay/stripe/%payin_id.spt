# coding: utf8

from datetime import timedelta
from math import ceil

import stripe
import stripe.error

from liberapay.models.exchange_route import ExchangeRoute
from liberapay.models.participant import Participant
from liberapay.payin.common import prepare_payin, prepare_payin_transfer, resolve_destination
from liberapay.payin.stripe import (
    destination_charge, get_partial_iban, Money_to_int, repr_stripe_error
)
from liberapay.utils import get_participant, NS, partition

ONE_YEAR = {
    'weekly': 52,
    'monthly': 12,
    'yearly': 1,
}

STRIPE_BIT = 1

[---]

payer = get_participant(state, restrict=True)

del currency

payment_method = request.qs.get('method', 'card')

if request.method == 'POST':
    website.check_payin_allowed(user, 'stripe-' + payment_method)

    body = request.body

    payin_currency = body['currency']
    if payin_currency not in constants.CURRENCIES:
        raise response.invalid_input(payin_currency, 'currency', 'body')

    amount = body['amount']
    if amount == 'custom':
        amount = locale.parse_money_amount(body['amount_custom'], payin_currency)
    else:
        try:
            amount = Money(amount, payin_currency)
        except (InvalidOperation, ValueError):
            raise InvalidNumber(amount)

    tip = website.db.one("""
        SELECT t.*, p AS tippee_p
          FROM tips t
          JOIN participants p ON p.id = t.tippee
         WHERE t.tipper = %s
           AND t.id = %s
    """, (payer.id, body.get_int('tip')))
    if not tip:
        raise response.invalid_input(body.get('tip'), 'tip', 'body')
    beneficiary = tip.tippee_p

    amount_min = max(constants.PAYIN_STRIPE_MIN_ACCEPTABLE[payin_currency], tip.amount)
    amount_max = constants.PAYIN_STRIPE_MAX_ACCEPTABLE[payin_currency]
    if amount < amount_min or amount > amount_max:
        raise response.error(400, _(
            "'{0}' is not an acceptable amount (min={1}, max={2})",
            amount, amount_min, amount_max
        ))

    destination = resolve_destination(
        website.db, beneficiary, 'stripe', payer, request.country, amount
    )

    try:
        if 'token' in body:
            return_url = payer.url('giving/pay/stripe/complete')
            one_off = body.get('keep') != 'true'

            owner_address = {
                k: body.get('owner.address.' + k) for k in constants.POSTAL_ADDRESS_KEYS_STRIPE
            }
            if 'line1' not in owner_address:
                owner_address = None

            token = stripe.Token.retrieve(body['token'])
            if token.type == 'bank_account':
                network = 'stripe-sdd'
                source_type = 'sepa_debit'
            elif token.type == 'card':
                network = 'stripe-card'
                source_type = 'card'
            else:
                raise response.error(400, "unknown token type")

            source = stripe.Source.create(
                amount=Money_to_int(amount) if one_off else None,
                owner={
                    'address': owner_address,
                    'email': payer.email or payer.get_any_email(),
                    'name': body.get('owner.name'),
                },
                redirect={'return_url': return_url},
                token=token.id,
                type=source_type,
                usage=('single_use' if one_off and source_type == 'card' else 'reusable'),
            )
            customer_id = website.db.one("""
                SELECT remote_user_id
                  FROM exchange_routes
                 WHERE participant = %s
                   AND network::text LIKE 'stripe-%%'
                 LIMIT 1
            """, (payer.id,))
            if customer_id:
                customer = stripe.Customer.retrieve(customer_id)
                customer.sources.create(source=source.id)
                del customer
            else:
                customer_id = stripe.Customer.create(
                    email=source.owner.email,
                    source=source.id,
                ).id
            source_country = getattr(getattr(source, source.type), 'country', None)
            source_currency = getattr(getattr(source, source.type), 'currency', None)
            route = ExchangeRoute.insert(
                payer, network, source.id, source.status,
                one_off=one_off, remote_user_id=customer_id,
                country=source_country, currency=source_currency,
            )
        else:
            route = ExchangeRoute.from_id(payer, body.get_int('route'))
            if route is None:
                raise response.invalid_input(body.get('route'), 'route', 'body')
            source = stripe.Source.retrieve(route.address)
            route.update_status(source.status)

    except stripe.error.StripeError as e:
        raise response.error(e.http_status, _(
            "The payment processor {name} returned an error: “{error_message}”.",
            name='Stripe', error_message=repr_stripe_error(e)
        ))

    payin = prepare_payin(website.db, payer, amount, route)
    if beneficiary.kind == 'group':
        context = 'team-donation'
        team = beneficiary.id
        recipient = Participant.from_id(destination.participant)
    else:
        context = 'personal-donation'
        team = None
        recipient = beneficiary
    prepare_payin_transfer(
        website.db, payin, recipient, destination, context,
        payin.amount, tip.periodic_amount, tip.period, team=team
    )
    response.redirect(payer.path('giving/pay/stripe/%i' % payin.id))

payin_id = request.path['payin_id']

if payin_id == 'complete':
    payin = website.db.one("""
        SELECT pi.*
          FROM payin pi
          JOIN exchange_routes r ON r.id = pi.route
         WHERE pi.participant = %s
           AND r.network = 'stripe'
           AND r.address = %s
      ORDER BY pi.ctime DESC
         LIMIT 1
    """, (payer.id, request.qs['source']))
    if not payin:
        raise response.error(400, "payin not found")
    response.redirect(payer.path('giving/pay/stripe/%i' % payin.id))

elif payin_id:
    if not payin_id.isdigit():
        raise response.error(404, "invalid payin ID in URL path")
    payin = website.db.one("""
        SELECT *
          FROM payins
         WHERE id = %s
           AND payer = %s
    """, (payin_id, payer.id))
    if not payin:
        raise response.error(404, "unknown payin ID in URL path")
    if payin.status == 'pre':
        payin = destination_charge(
            website.db, payin, payer,
            statement_descriptor=('Liberapay %i' % payin.id)
        )

tippee_id = request.qs.get_int('beneficiary', default=None)
donations = payer.get_tips_awaiting_renewal()
donations, donations_not_fundable = partition(
    donations, lambda t: t.tippee_p.payment_providers > 0 and not t.tippee_p.is_suspended
)
if tippee_id:
    donations, other_donations = partition(
        donations, lambda t: t.tippee == tippee_id
    )
donations, non_stripe_donations = partition(
    donations, lambda t: t.tippee_p.payment_providers & STRIPE_BIT > 0
)

if donations:
    tip = donations[0]
    tip_currency = tip.amount.currency
    tip.min_acceptable_amount = constants.PAYIN_STRIPE_MIN_ACCEPTABLE[tip_currency]
    tip.min_recommended_amount = min(
        constants.PAYIN_STRIPE_MIN_RECOMMENDED[tip_currency],
        tip.periodic_amount * ONE_YEAR[tip.period] * 12
    )
    tip.low_fee_amount = constants.PAYIN_STRIPE_LOW_FEE[tip_currency]
    tip.max_acceptable_amount = min(
        constants.PAYIN_STRIPE_MAX_ACCEPTABLE[tip_currency],
        tip.periodic_amount * ONE_YEAR[tip.period] * 12
    )
    min_multiplier = int(ceil(tip.min_acceptable_amount / tip.periodic_amount))
    min_recommended_multiplier = int(ceil(tip.min_recommended_amount / tip.periodic_amount))
    max_recommended_multiplier = min(
        max(int(ceil(tip.low_fee_amount / tip.periodic_amount)), ONE_YEAR[tip.period]),
        tip.max_acceptable_amount // tip.periodic_amount
    )
    tip.multipliers = sorted(set((min_multiplier, min_recommended_multiplier, max_recommended_multiplier)))
    del min_multiplier, min_recommended_multiplier, max_recommended_multiplier

if payment_method:
    route = ExchangeRoute.from_network(payer, 'stripe-' + payment_method)
    route = route[0] if route else None
else:
    route = website.db.one("""
        SELECT r
          FROM exchange_routes r
         WHERE r.participant = %s
           AND r.status = 'chargeable'
           AND r.network::text LIKE 'stripe-%%'
           AND (r.one_off IS FALSE OR r.ctime > (current_timestamp - interval '6 hours'))
      ORDER BY r.network = 'stripe-sdd' DESC
             , r.id DESC
         LIMIT 1
    """, (payer.id,))
    route = None
if route:
    payment_method = route.network.split('-', 1)[-1]
    source = stripe.Source.retrieve(route.address)
    route.update_status(source.status)
    if not route:
        response.redirect(request.line.uri)
if not payment_method:
    response.redirect(payer.path('giving/pay'))

if user == payer:
    payer.mark_notifications_as_read('donate_reminder')

# https://stripe.com/docs/security#content-security-policy
csp = response.headers[b'Content-Security-Policy']
csp = csp.allow(b'connect-src', b"api.stripe.com")
csp = csp.allow(b'frame-src', b"js.stripe.com")
csp = csp.allow(b'script-src', b"js.stripe.com")
response.headers[b'Content-Security-Policy'] = csp

title = _("Funding your donations")

[---] text/html
% extends "templates/base-thin.html"

% block thin_content

% if payin
    % set status = payin.status
    % if status == 'succeeded'
        <div class="alert alert-success">{{ _(
            "The payment of {charge_amount} was successful.", charge_amount=payin.amount
        ) }}</div>
        {#<a class="btn btn-default" href="{{ payer.path('bill/%s' % payin.id) }}">{{
            _("View receipt")
        }}</a>#}
    % elif status == 'failed'
        <div class="alert alert-danger">{{ _(
            "The payment failed. Error message: “{0}”", payin.error
        ) }}</div>
    % elif status == 'pending'
        <div class="alert alert-info">{{ _("The payment has been initiated.") }}</div>
    % endif

    % if donations
        <hr>
    % endif
% endif

% if donations

    % if len(donations) > 1 and not payin
        <p>{{ ngettext(
            "You have {n} donation awaiting payment.",
            "You have {n} donations awaiting payment.",
            n=len(donations)
        ) }}</p>
        <p class="alert alert-warning">{{ _(
            "Funding multiple donations with a single payment is currently not possible, "
            "so you will have to renew your donations one by one. We apologize for the "
            "inconvenience."
        ) }}</p>
        <hr>
    % endif

    <noscript><div class="alert alert-danger">{{ _("JavaScript is required") }}</div></noscript>

    <form action="javascript:" method="POST" id="stripe"
          data-stripe-pk="{{ website.app_conf.stripe_publishable_key }}">
        % set tip = donations[0]
        <p>{{ _(
            "Your donation of {amount} to {recipient} is awaiting payment.",
            amount=tip.periodic_amount, recipient=tip.tippee_p.link()
        ) }}</p>
        % if tip.periodic_amount < tip.min_acceptable_amount
            <p>{{ _(
                "We cannot charge you only {donation_amount}, the minimum payment "
                "amount is {min_payment_amount}.",
                donation_amount=tip.periodic_amount, min_payment_amount=tip.min_acceptable_amount
            ) }}</p>
        % endif
        <p>{{ _("Please select or input a payment amount:") }}</p>
        <fieldset id="amount">
            <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
            <input type="hidden" name="route" value="{{ route.id or '' }}" />
            <input type="hidden" name="currency" value="{{ tip.amount.currency }}" />
            <input type="hidden" name="tip" value="{{ tip.id }}" />
            <ul class="list-group radio-group">
            % set show_fee_notice = len(tip.multipliers) > 1 and (tip.periodic_amount * tip.multipliers[0]) < tip.low_fee_amount
            % for multiplier in tip.multipliers
                % set charge_amount = tip.periodic_amount * multiplier
                <li class="list-group-item">
                <label>
                    <input type="radio" name="amount" value="{{ charge_amount.amount }}" class="hidden-xs" required />
                    <div class="radio-label">
                    <h5 class="list-group-item-heading">{{ locale.format_money(charge_amount) }}
                    % if show_fee_notice
                    % if charge_amount < tip.min_recommended_amount
                        <small class="text-warning">{{ _("(not recommended, high fee percentage)") }}</small>
                    % elif charge_amount < tip.low_fee_amount
                        <small class="text-info">{{ _("(okay, moderate fee percentage)") }}</small>
                    % else
                        <small class="text-success">{{ _("(recommended, low fee percentage)") }}</small>
                    % endif
                    % endif
                    </h5>
                    <p class="list-group-item-text">{{ ngettext(
                        "", "Next payment in {n} weeks ({timedelta}).", n=multiplier, timedelta=timedelta(weeks=int(multiplier))
                    ) if tip.period == 'weekly' and multiplier > 7 else ngettext(
                        "Next payment in {n} week.", "Next payment in {n} weeks.", n=multiplier
                    ) if tip.period == 'weekly' else ngettext(
                        "Next payment in {n} month.", "Next payment in {n} months.", n=multiplier
                    ) if tip.period == 'monthly' else ngettext(
                        "Next payment in {n} year.", "Next payment in {n} years.", n=multiplier
                    ) }}</p>
                    </div>
                </label>
                </li>
            % endfor
                <li class="list-group-item">
                <label>
                    <input type="radio" name="amount" value="custom" class="hidden-xs" required />
                    <div class="radio-label">
                    <h5 class="list-group-item-heading">{{ _(
                        "Custom amount (min={0}, max={1})",
                        max(tip.min_acceptable_amount, tip.amount),
                        tip.max_acceptable_amount,
                    ) }}</h5>
                    <div class="input-group">
                        <div class="input-group-addon">{{ locale.currency_symbols.get(tip_currency, tip_currency) }}</div>
                        <input type="tel" inputmode="decimal" class="form-control amount"
                               name="amount_custom" placeholder="{{ _('Amount') }}" />
                    </div>
                    </div>
                </label>
                </li>
            </ul>
        </fieldset>

        % if source
        <div class="form-group">
            % if source.type == 'card'
            <p>{{ _(
                "We will charge your {brand} card (last four digits: {last4}).",
                brand=source.card.brand, last4=source.card.last4
            ) }}</p>
            <button class="btn btn-default btn-sm" type="button" data-modify="#card-form">{{
                _("Use another card")
            }}</button>
            % elif source.type == 'sepa_debit'
            <p>{{ _(
                "We will charge your {bank_name} account ({partial_account_number}).",
                bank_name=source.sepa_debit.bank_name,
                partial_account_number=get_partial_iban(source.sepa_debit)
            ) }}</p>
            <button class="btn btn-default btn-sm" type="button" data-modify="#iban-form">{{
                _("Use another bank account")
            }}</button>
            % endif
            <br><br>
        </div>
        % endif

        % if payment_method == 'card'
        <fieldset id="card-form" class="form-group {{ 'hidden' if source else '' }}">
            <p>{{ _("Please input your card number:") }}</p>
            <div id="stripe-element" data-type="card" class="form-control paragraph"></div>
            <span id="stripe-errors" role="alert" class="invalid-msg"></span>
            <p class="help-block">{{ glyphicon('lock') }} {{ _(
                "This data will be sent directly to the payment processor "
                "{name} through an encrypted connection.",
                name='<a href="https://stripe.com/" target="_blank" rel="noopener noreferrer">Stripe</a>'|safe
            ) }}</p>
            <label>
                <input type="checkbox" name="keep" value="true" checked />
                {{ _("Remember the card number for next time") }}
            </label>
            <br><br>
        </fieldset>
        % elif payment_method == 'sdd'
        <fieldset id="iban-form" class="form-group {{ 'hidden' if source else '' }}">
            <p>{{ _(
                "Please input your name and your IBAN (International Bank Account Number):"
            ) }}</p>
            <input id="account_holder_name" autocomplete="name" required minlength=3
                   class="form-control paragraph" placeholder="{{ _('Jane Doe') }}" />
            <div id="stripe-element" data-type="iban" class="form-control paragraph"></div>
            <span id="stripe-errors" role="alert" class="invalid-msg"></span>
            <p class="help-block">{{ _(
                "By providing your IBAN and confirming this payment, you are authorizing "
                "{platform} and {provider}, our payment service provider, to send instructions "
                "to your bank to debit your account and your bank to debit your account in "
                "accordance with those instructions. You are entitled to a refund from your "
                "bank under the terms and conditions of your agreement with your bank. "
                "A refund must be claimed within 8 weeks starting from the date on which "
                "your account was debited.",
                platform='Liberapay',
                provider='<a href="https://stripe.com/" target="_blank" rel="noopener noreferrer">Stripe</a>'|safe
            ) }}</p>
            <label>
                <input type="checkbox" name="keep" value="true" checked />
                {{ _("Remember the bank account number for future payments") }}
            </label>
            <br>
        </fieldset>
        % endif

        % if payer.mangopay_user_id
        <div class="text-warning">{{ glyphicon('warning-sign') }} {{ _(
            "Liberapay no longer stores money in wallets, the entire amount "
            "of your payment will go immediately to the {payment_provider} "
            "account of {recipient_name}.",
            payment_provider='Stripe', recipient_name=tip.tippee_p.username
        ) }}</div>
        % else
        <div>{{ _(
            "The entire amount of your payment will go immediately to the "
            "{payment_provider} account of {recipient_name}.",
            payment_provider='Stripe', recipient_name=tip.tippee_p.username
        ) }}</div>
        % endif

        <br>
        <button class="btn btn-primary btn-lg btn-block">{{ _(
            "Initiate the payment"
        ) }}</button>
    </form>

% else

    % if donations_not_fundable or other_donations or non_stripe_donations
        % for tip in donations_not_fundable
        <p>{{ _(
            "Your donation to {recipient} cannot be processed right now because the "
            "account of the beneficiary isn't ready to receive money.",
            recipient=tip.tippee_p.link()
        ) }}</p>
        % endfor
        % if other_donations or non_stripe_donations
            % if donations_not_fundable
                <hr>
            % endif
            % set n_donations = len(other_donations) + len(non_paypal_donations)
            <p>{{ ngettext(
                "You have {n} donation awaiting payment.",
                "You have {n} donations awaiting payment.",
                n=n_donations
            ) }}</p>
            <a href="{{ payer.path('giving/pay') }}" class="btn btn-primary">{{
                ngettext("Renew this donation", "Renew these donations", n_donations)
            }}</a>
        % endif
    % else
        <div class="alert alert-success">{{ _("All your donations are funded.") }}</div>
        <a class="btn btn-default" href="{{ payer.path('giving/') }}">{{ _("Manage your donations") }}</a>
    % endif

% endif

% endblock

% block scripts
    <script src="https://js.stripe.com/v3/"></script>
% endblock
