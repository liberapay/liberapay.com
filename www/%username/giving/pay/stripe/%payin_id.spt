from datetime import timedelta
from decimal import ROUND_HALF_UP
from math import floor

import stripe
import stripe.error

from liberapay.exceptions import NextAction
from liberapay.models.exchange_route import ExchangeRoute
from liberapay.models.participant import Participant
from liberapay.payin.common import (
    prepare_donation, prepare_payin, prepare_payin_transfer, resolve_amounts,
)
from liberapay.payin.prospect import PayinProspect
from liberapay.payin.stripe import (
    charge, create_source_from_token, repr_stripe_error, settle_payin,
)
from liberapay.utils import get_participant

STRIPE_BIT = 1

[---]

payer = get_participant(state, restrict=True)

del currency

client_secret = None
payment_type = request.qs.get('method', 'card')

if request.method == 'POST':
    website.check_payin_allowed(request, user, 'stripe-' + payment_type)

    body = request.body

    payin_currency = body['currency']
    if payin_currency not in constants.CURRENCIES:
        raise response.invalid_input(payin_currency, 'currency', 'body')

    payin_amount = body['amount']
    if payin_amount == 'custom':
        payin_amount = locale.parse_money_amount(body['amount_custom'], payin_currency)
    else:
        payin_amount = Money(payin_amount, payin_currency, rounding=ROUND_HALF_UP)

    tips = website.db.all("""
        SELECT t.*, p AS tippee_p
          FROM tips t
          JOIN participants p ON p.id = t.tippee
         WHERE t.tipper = %s
           AND t.id IN %s
           AND p.payment_providers & %s > 0
      ORDER BY t.id
    """, (payer.id, set(body.parse_list('tips', int)), STRIPE_BIT))
    if len(set(tip.amount.currency for tip in tips)) != 1:
        raise response.invalid_input(body.get('tips'), 'tips', 'body')

    tips_weekly_sum = Money.sum((tip.amount for tip in tips), payin_currency)
    amount_min = max(
        constants.PAYIN_AMOUNTS['stripe']['min_acceptable'][payin_currency],
        tips_weekly_sum
    )
    amount_max = constants.PAYIN_AMOUNTS['stripe']['max_acceptable'][payin_currency]
    if payin_amount < amount_min or payin_amount > amount_max:
        raise response.error(400, _(
            "'{0}' is not an acceptable amount (min={1}, max={2})",
            payin_amount, amount_min, amount_max
        ))

    try:
        if 'token' in body:
            return_url = payer.url('giving/pay/stripe/complete')
            one_off = body.get('keep') != 'true'
            owner_address = {
                k: body.get('owner.address.' + k) for k in constants.POSTAL_ADDRESS_KEYS_STRIPE
            }
            if 'line1' not in owner_address:
                owner_address = None
            owner_info = {
                'address': owner_address,
                'email': payer.get_email_address(),
                'name': body.get('owner.name'),
            }
            source = create_source_from_token(
                body['token'], one_off, payin_amount, owner_info, return_url
            )
            route = ExchangeRoute.attach_stripe_source(payer, source, one_off)
        elif 'stripe_pm_id' in body:
            one_off = body.get('keep') != 'true'
            pm = stripe.PaymentMethod.retrieve(body['stripe_pm_id'])
            route = ExchangeRoute.attach_stripe_payment_method(payer, pm, one_off)
        else:
            route = ExchangeRoute.from_id(payer, body.get_int('route'), _raise=False)
            if route is None:
                raise response.invalid_input(body.get('route'), 'route', 'body')
            route.sync_status()

    except stripe.error.StripeError as e:
        raise response.error(e.http_status, _(
            "The payment processor {name} returned an error: “{error_message}”.",
            name='Stripe', error_message=repr_stripe_error(e)
        ))

    if not route:
        raise response.error(400, _(
            "The payment instrument is invalid, please select or add another one."
        ))
    transfer_amounts = resolve_amounts(
        payin_amount, {tip.id: tip.amount for tip in tips}
    )
    payin = prepare_payin(website.db, payer, payin_amount, route)
    payer_country = route.country or request.country
    for tip in tips:
        prepare_donation(
            website.db, payin, tip, tip.tippee_p, 'stripe', payer, payer_country,
            transfer_amounts[tip.id]
        )

    msg = _("Request in progress, please wait…")
    response.refresh(state, url=payer.path('giving/pay/stripe/%i' % payin.id), msg=msg)

payin_id = request.path['payin_id']

if payin_id == 'complete':
    payin = website.db.one("""
        SELECT pi.*
          FROM payin pi
          JOIN exchange_routes r ON r.id = pi.route
         WHERE pi.participant = %s
           AND r.network = 'stripe'
           AND r.address = %s
      ORDER BY pi.ctime DESC
         LIMIT 1
    """, (payer.id, request.qs['source']))
    if not payin:
        raise response.error(400, "payin not found")
    response.redirect(payer.path('giving/pay/stripe/%i' % payin.id))

elif payin_id:
    if not payin_id.isdigit():
        raise response.error(404, "invalid payin ID in URL path")
    payin = website.db.one("""
        SELECT *
          FROM payins
         WHERE id = %(payin)s
           AND payer = %(payer)s
    """, dict(payin=payin_id, payer=payer.id))
    if not payin:
        raise response.error(404, "unknown payin ID in URL path")
    try:
        if payin.status == 'pre':
            payin = charge(website.db, payin, payer)
        elif payin.status == 'awaiting_payer_action':
            payin = settle_payin(website.db, payin)
    except NextAction as act:
        if act.type == 'redirect_to_url':
            response.refresh(state, url=act.redirect_to_url.url)
        elif act.type == 'use_stripe_sdk':
            client_secret = act.client_secret
        else:
            raise NotImplementedError()

tippees = request.qs.parse_list('beneficiary', int, default=None)
if tippees:
    tips = [
        tip for tip in payer.get_tips_to(tippees)
        if tip.tippee_p.payment_providers & STRIPE_BIT > 0
    ]
    if len(set(tip.amount.currency for tip in tips)) != 1:
        raise response.invalid_input(tippees, 'beneficiary', 'querystring')
    payment = PayinProspect(tips, 'stripe')
    del tips

elif not payin_id:
    response.redirect(payer.path('giving/pay'))

routes = website.db.all("""
    SELECT r
      FROM exchange_routes r
     WHERE r.participant = %s
       AND r.status = 'chargeable'
       AND r.network::text LIKE %s
       AND (r.one_off IS FALSE OR r.ctime > (current_timestamp - interval '6 hours'))
  ORDER BY r.is_default NULLS LAST
         , r.network = 'stripe-sdd' DESC
         , r.id DESC
""", (payer.id, 'stripe-' + (payment_type or '%')))
if routes:
    route = None
    while routes:
        route = routes[0]
        route.sync_status()
        if route:
            break
        routes = routes[1:]
    payment_type = route.network.split('-', 1)[-1]
    del route
if not payment_type:
    response.redirect(payer.path('giving/pay'))

if user == payer:
    payer.mark_notifications_as_read('donate_reminder')

# https://stripe.com/docs/security#content-security-policy
csp = response.headers[b'Content-Security-Policy']
csp = csp.allow(b'connect-src', b"api.stripe.com")
csp = csp.allow(b'frame-src', b"js.stripe.com hooks.stripe.com")
csp = csp.allow(b'script-src', b"js.stripe.com")
response.headers[b'Content-Security-Policy'] = csp

title = _("Funding your donations")

[---] text/html
% extends "templates/layouts/base-thin.html"

% block thin_content

% if client_secret

    <p>{{ _("More information is required in order to process this payment.") }}</p>
    <noscript><div class="alert alert-danger">{{ _("JavaScript is required") }}</div></noscript>
    <div id="stripe_next_action" data-client_secret="{{ client_secret }}"></div>

% elif payin
    % set status = payin.status
    % if status == 'succeeded'
        <div class="alert alert-success">{{ _(
            "The payment of {charge_amount} was successful.", charge_amount=payin.amount
        ) }}</div>
        <a class="btn btn-default" href="{{ payer.path('receipts/direct/%s' % payin.id) }}">{{
            _("View receipt")
        }}</a>
    % elif status == 'failed' and payin.error.startswith("For 'sepa_debit' payments, we currently require ")
        {# https://github.com/liberapay/liberapay.com/issues/1525 #}
        <div class="alert alert-danger">{{ _(
            "The payment processor ({name}) isn't able to process {currency} direct debits "
            "for this recipient yet. Please retry with a different payment method.",
            name='Stripe', currency=Currency(payin.amount.currency),
        ) }}</div>
        <p><a class="btn btn-primary btn-lg" href="{{ payer.path('giving/pay') }}?retry={{ payin.id }}&amp;sdd=no">{{ _("Try again") }}</a></p>
    % elif status == 'failed'
        <div class="alert alert-danger">{{ _(
            "The payment failed. Error message: “{0}”", payin.error
        ) }}</div>
        <p><a class="btn btn-primary btn-lg" href="{{ payer.path('giving/pay') }}?retry={{ payin.id }}">{{ _("Try again") }}</a></p>
    % elif status == 'pending'
        <div class="alert alert-info">{{ _("The payment has been initiated.") }}</div>
        <p>{{ _(
            "Processing this kind of payment takes {timedelta} on average.",
            timedelta=locale.Age(constants.PAYIN_SETTLEMENT_DELAYS['stripe-sdd'], format_args=dict(threshold=0.9))
        ) }}</p>
        <p>{{ _(
            "A receipt will be available once the payment has been successfully processed. You can see all your payments and receipts in {link_start}your account's ledger{link_end}.",
            link_start='<a href="%s">'|safe % payer.path('ledger/'),
            link_end='</a>'|safe
        ) }}</p>
    % endif

    % if status != 'failed'
    <hr>
    % set n_fundable = payer.get_tips_awaiting_renewal()[1]
    % if n_fundable
        <p>{{ ngettext(
            "You have {n} other donation awaiting payment.",
            "You have {n} other donations awaiting payment.",
            n=n_fundable
        ) }}</p>
        <a href="{{ payer.path('giving/pay') }}" class="btn btn-primary">{{
            ngettext("Renew this donation", "Renew these donations", n_fundable)
        }}</a>
    % else
        <p>{{ _("You don't have any other donation awaiting payment at this time.") }}</p>
        <a class="btn btn-default" href="{{ payer.path('giving/') }}">{{ _("Manage your donations") }}</a>
    % endif
    % endif

% else

    <noscript><div class="alert alert-danger">{{ _("JavaScript is required") }}</div></noscript>

    <form action="javascript:" method="POST" id="stripe"
          data-stripe-pk="{{ website.app_conf.stripe_publishable_key }}">
        % if len(payment.recipient_links) == 1
            <p>{{ _(
                "Your donation of {amount} to {recipient} is awaiting payment.",
                amount=payment.tips[0].periodic_amount,
                recipient=payment.recipient_links[0]
            ) }}</p>
        % else
            <p>{{ _(
                "Your donations to {recipients} are awaiting payment.",
                recipients=payment.recipient_links
            ) }}</p>
        % endif
        % if payment.one_periods_worth < payment.min_acceptable_amount
            <p>{{ _(
                "We cannot charge you only {donation_amount}, the minimum payment "
                "amount is {min_payment_amount}.",
                donation_amount=payment.one_periods_worth,
                min_payment_amount=payment.min_acceptable_amount
            ) }}</p>
        % endif
        <p>{{ _("Please select or input a payment amount:") }}</p>
        <fieldset id="amount">
            <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
            <input type="hidden" name="currency" value="{{ payment.currency }}" />
            <input type="hidden" name="tips" value="{{ payment.tip_ids }}" />
            <ul class="list-group radio-group">
            % set show_fee_notice = (
                len(payment.suggested_amounts) > 1 and
                payment.suggested_amounts[0] < payment.low_fee_amount
            )
            % for charge_amount in payment.suggested_amounts
                <li class="list-group-item">
                <label>
                    <input type="radio" name="amount" value="{{ charge_amount.amount }}" required />
                    <div class="radio-label">
                    <h5 class="list-group-item-heading">{{ locale.format_money(charge_amount) }}
                    % if show_fee_notice
                    % if charge_amount < payment.moderate_fee_amount
                        <small class="text-warning">{{ _("(not recommended, high fee percentage)") }}</small>
                    % elif charge_amount < payment.low_fee_amount
                        <small class="text-info">{{ _("(okay, moderate fee percentage)") }}</small>
                    % else
                        <small class="text-success">{{ _("(recommended, low fee percentage)") }}</small>
                    % endif
                    % endif
                    </h5>
                    % set weeks = int(floor(charge_amount / payment.one_weeks_worth))
                    <p class="list-group-item-text">{{ ngettext(
                        "", "Next payment in {n} weeks ({timedelta}).", n=weeks, timedelta=timedelta(weeks=weeks)
                    ) if payment.period == 'weekly' and weeks > 7 else _(
                        "Next payment {in_N_weeks_months_or_years}.",
                        in_N_weeks_months_or_years=to_age(timedelta(weeks=weeks))
                    ) }}</p>
                    </div>
                </label>
                </li>
            % endfor
                <li class="list-group-item">
                <label>
                    <input type="radio" name="amount" value="custom" required />
                    <div class="radio-label">
                    <h5 class="list-group-item-heading">{{ _(
                        "Custom amount (min={0}, max={1})",
                        payment.min_acceptable_amount,
                        payment.max_acceptable_amount,
                    ) }}</h5>
                    <div class="input-group">
                        <div class="input-group-addon">{{
                            locale.currency_symbols.get(payment.currency, payment.currency)
                        }}</div>
                        <input type="tel" inputmode="decimal" class="form-control amount"
                               name="amount_custom" placeholder="{{ _('Amount') }}" />
                    </div>
                    </div>
                </label>
                </li>
            </ul>
        </fieldset>

        % if len(routes) == 1
        <div class="form-group">
            % set route = routes[0]
            <input type="hidden" name="route" value="{{ route.id or '' }}" />
            % if route.network == 'stripe-card'
            <p>{{ _(
                "We will charge your {brand} card (last four digits: {last4}).",
                brand=route.get_brand(), last4=route.get_partial_number()
            ) }}</p>
            <button class="btn btn-default btn-sm" type="button" data-modify="#card-form">{{
                _("Use another card")
            }}</button>
            % elif route.network == 'stripe-sdd'
            <p>{{ _(
                "We will charge your {bank_name} account ({partial_account_number}).",
                bank_name=route.get_brand(),
                partial_account_number=route.get_partial_number()
            ) }}</p>
            <button class="btn btn-default btn-sm" type="button" data-modify="#iban-form">{{
                _("Use another bank account")
            }}</button>
            % endif
            <br><br>
        </div>
        % elif len(routes) > 1
        <div class="form-group">
            <p>{{ _("Payment instrument:") }}</p>
            <div class="form-group">
                <select class="form-control" name="route">
                % for route in routes
                    <option value="{{ route.id }}">{{ route.get_brand() }} {{ route.get_partial_number() }}</option>
                % endfor
                </select>
            </div>
            % if payment_type == 'card'
            <button class="btn btn-default btn-sm" type="button" data-modify="#card-form">{{
                _("Use another card")
            }}</button>
            % elif payment_type == 'sdd'
            <button class="btn btn-default btn-sm" type="button" data-modify="#iban-form">{{
                _("Use another bank account")
            }}</button>
            % endif
            <br><br>
        </div>
        % endif

        % if payment_type == 'card'
        <fieldset id="card-form" class="form-group {{ 'hidden' if routes else '' }}">
            <p>{{ _("Please input your name and card number:") }}</p>
            <input name="owner.name" autocomplete="name" required minlength=3
                   class="form-control paragraph" placeholder="{{ _('Jane Doe') }}" />
            <div id="stripe-element" data-type="card" class="form-control paragraph"></div>
            <span id="stripe-errors" role="alert" class="invalid-msg"></span>
            <p class="help-block">{{ glyphicon('lock') }} {{ _(
                "This data will be sent directly to the payment processor "
                "{name} through an encrypted connection.",
                name='<a href="https://stripe.com/" target="_blank" rel="noopener noreferrer">Stripe</a>'|safe
            ) }}</p>
            <label>
                <input type="checkbox" name="keep" value="true" checked />
                {{ _("Remember the card number for next time") }}
            </label>
            <br><br>
        </fieldset>
        % elif payment_type == 'sdd'
        <fieldset id="iban-form" class="form-group {{ 'hidden' if routes else '' }}">
            <p>{{ _(
                "Please input your name and your IBAN (International Bank Account Number):"
            ) }}</p>
            <input name="owner.name" autocomplete="name" required minlength=3
                   class="form-control paragraph" placeholder="{{ _('Jane Doe') }}" />
            <div id="stripe-element" data-type="iban" class="form-control paragraph"></div>
            <span id="stripe-errors" role="alert" class="invalid-msg"></span>
            <p class="help-block">{{ _(
                "By providing your IBAN and confirming this payment, you are authorizing "
                "{platform} and {provider}, our payment service provider, to send instructions "
                "to your bank to debit your account and your bank to debit your account in "
                "accordance with those instructions. You are entitled to a refund from your "
                "bank under the terms and conditions of your agreement with your bank. "
                "A refund must be claimed within 8 weeks starting from the date on which "
                "your account was debited.",
                platform='Liberapay',
                provider='<a href="https://stripe.com/" target="_blank" rel="noopener noreferrer">Stripe</a>'|safe
            ) }}</p>
            <label>
                <input type="checkbox" name="keep" value="true" checked />
                {{ _("Remember the bank account number for future payments") }}
            </label>
            <br>
        </fieldset>
        % endif

        % if len(payment.recipient_names) > 1
        <div>{{ _(
            "The entire amount of your payment will go immediately to the "
            "{payment_provider} accounts of {recipient_names}.",
            payment_provider='Stripe', recipient_names=payment.recipient_names
        ) }}</div>
        % elif payer.mangopay_user_id
        <div class="text-warning">{{ glyphicon('warning-sign') }} {{ _(
            "Liberapay no longer stores money in wallets, the entire amount "
            "of your payment will go immediately to the {payment_provider} "
            "account of {recipient_name}.",
            payment_provider='Stripe', recipient_name=payment.recipient_names[0]
        ) }}</div>
        % else
        <div>{{ _(
            "The entire amount of your payment will go immediately to the "
            "{payment_provider} account of {recipient_name}.",
            payment_provider='Stripe', recipient_name=payment.recipient_names[0]
        ) }}</div>
        % endif

        <br>
        <button class="btn btn-primary btn-lg btn-block">{{ _(
            "Initiate the payment"
        ) }}</button>
    </form>

% endif

% endblock

% block scripts
    <script src="https://js.stripe.com/v3/"></script>
% endblock
