from __future__ import division, print_function, unicode_literals

from datetime import timedelta

from liberapay.elsewhere._paginators import _modify_query
from liberapay.exceptions import LoginRequired
from liberapay.models.participant import Participant
from liberapay.utils import b64encode_s, get_participant

ONE_WEEK = timedelta(days=7)

def get_invite(team, p):
    return website.db.one("""
        SELECT *
          FROM events
         WHERE participant = %s
           AND type LIKE 'invite%%'
           AND payload->>'invitee' = %s::text
      ORDER BY ts DESC
         LIMIT 1
    """, (team.id, p.id,))

[---]

if user.ANON:
    raise LoginRequired

team = get_participant(state, restrict=False)
if team.kind != 'group':
    raise response.error(404)

action = request.path['action']
msg = None
confirm = None

if action in ('accept', 'refuse'):
    invite = get_invite(team, user)
    if not invite:
        raise response.error(403, _("You are not invited to join this team."))
    if invite.type == 'invite_accept':
        raise response.error(409, _("You have already accepted this invitation."))
    if invite.type == 'invite_refuse':
        raise response.error(409, _("You have already refused this invitation."))
    notif_id = invite.payload.get('notification_id')
elif not user.member_of(team):
    raise response.error(403, _("You are not a member of this team."))

if action == 'invite':
    request.allow('POST')
    invitee = Participant.from_username(request.body['username'])
    if not invitee:
        raise response.error(404, _("User not found."))
    if invitee.kind in ('group', 'community'):
        raise response.error(400, _("A team can't join a team"))
    if invitee.status != 'active':
        raise response.error(400, _("You can't invite an inactive user to join a team."))
    invite = get_invite(team, invitee)
    if invite:
        invite_age = to_age(invite.ts, add_direction=True)
        if invite.type == 'invite' and invite_age < ONE_WEEK:
            raise response.error(400, _(
                "{username} has already been invited to join this team {timespan_ago}.",
                username=invitee.username, timespan_ago=invite_age
            ))
        elif invite.type == 'invite_refuse' and invite_age < ONE_WEEK:
            raise response.error(400, _(
                "{username} has already refused to join this team {timespan_ago}.",
                username=invitee.username, timespan_ago=invite_age
            ))
    if not invitee.member_of(team):
        team.invite(invitee, user)
        msg = _("{0} has been invited to the team.", invitee.username)
    else:
        msg = _("{0} is already a member of this team.", invitee.username)

elif action == 'leave':
    if not request.body.get('confirmed'):
        confirm = _("Are you sure you want to leave this team?")
    else:
        team.set_take_for(user, None, user)
        if not team.nmembers:
            team.close(None)

elif action == 'accept':
    with website.db.get_cursor() as c:
        team.add_event(c, 'invite_accept', dict(invitee=user.id), user.id)
        team.add_member(user)
    msg = _("You are now a member of the team.")
    if notif_id:
        user.mark_notification_as_read(notif_id)

elif action == 'refuse':
    with website.db.get_cursor() as c:
        team.add_event(c, 'invite_refuse', dict(invitee=user.id), user.id)
    if notif_id:
        user.mark_notification_as_read(notif_id)
    response.redirect('/')

else:
    raise response.error(400, "bad action")

back_to = request.qs.get('back_to') or (team.path('income/') if action == 'accept' else '/')
if not confirm:
    if msg:
        back_to = _modify_query(back_to, 'success', b64encode_s(msg))
    response.redirect(back_to, trusted_url=False)

response.render('templates/confirm.spt', state, msg=confirm, back_to=back_to)

[---] text/html
