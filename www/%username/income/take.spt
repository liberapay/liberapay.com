from __future__ import division, print_function, unicode_literals

from liberapay.elsewhere._paginators import _modify_query
from liberapay.exceptions import LoginRequired
from liberapay.utils import b64encode_s, get_participant

[---]

request.allow('POST')
if user.ANON:
    raise LoginRequired

team = get_participant(state, restrict=False)
if team.kind != 'group':
    raise response.error(404)

new_currency = request.body.get('currency', team.main_currency)
if new_currency not in constants.CURRENCIES:
    raise response.error(400, "`currency` value '%s' is invalid or non-supported" % new_currency)
take = locale.parse_money_amount(request.body['take'], new_currency)
if take < 0:
    raise response.error(400, "bad take: negative amounts are not allowed")
new_take = team.set_take_for(user, take, user)
if new_take is None:
    raise response.error(403, _("You are not a member of the {0} team.", team.username))
if new_take < take:
    msg = _("Your take is now {0} (you can't go higher this week).", new_take)
else:
    msg = _("Your take is now {0}.", new_take)

back_to = request.qs.get('back_to') or team.path('income/')
back_to = _modify_query(back_to, 'success', b64encode_s(msg))
response.redirect(back_to, trusted_url=False)

[---] text/html
