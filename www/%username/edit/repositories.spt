# coding: utf8

from datetime import timedelta

from oauthlib.oauth2 import InvalidGrantError, TokenExpiredError

from liberapay.models.repository import upsert_repos
from liberapay.utils import get_participant, utcnow

LIMIT = 20
THREE_DAYS = timedelta(days=3)

[---]
participant = get_participant(state, restrict=True, allow_member=True)

if request.method == 'POST':
    for k, v in request.body.items():
        if k.startswith('show_on_profile:'):
            try:
                repo_id = int(k.split(':', 1)[-1])
            except ValueError:
                raise response.error(400, "bad key '%s'" % k)
            v = v[-1] if isinstance(v, list) else v
            show = v == 'on'
            website.db.run("""
                UPDATE repositories
                   SET show_on_profile = %s
                 WHERE participant = %s
                   AND id = %s
                   AND show_on_profile IS NOT %s
            """, (show, participant.id, repo_id, show))
    raise response.json({"msg": _("Your profile has been updated.")})

platform_name = request.qs.get('platform')
if platform_name:
    platform = website.platforms.get(platform_name)
    if not platform:
        raise response.error(400, "unknown platform")
    if not hasattr(platform, 'api_repos_path'):
        raise response.error(400, "repos are not implemented for platform '%s'" % platform_name)
    if participant.kind == 'group' and not hasattr(platform, 'is_team_member'):
        raise response.error(400, "team repos are not implemented for platform '%s'" % platform_name)

    account = participant.get_account_elsewhere(platform.name)
    if account:
        event_type = 'fetch_repos:%s' % account.id
        last_fetch = participant.get_last_event_of_type(event_type)
        offset = max(request.qs.get_int('offset', 0), 0)
        if last_fetch and last_fetch.ts > utcnow() - THREE_DAYS:
            repos = participant.get_repos_on_platform(
                platform.name, limit=LIMIT, offset=offset
            )
        else:
            repos = []
            sess = account.get_auth_session()
            with website.db.get_cursor() as cursor:
                next_page = None
                for i in range(3):
                    try:
                        r = platform.get_repos(account, page_url=next_page, sess=sess)
                    except (InvalidGrantError, TokenExpiredError):
                        response.render('templates/reconnect-elsewhere-account.spt', state, platform=platform)
                    repos += upsert_repos(cursor, r[0], participant, utcnow())
                    next_page = r[2].get('next')
                    if not next_page:
                        break
                payload = dict(partial_list=bool(next_page))
                last_fetch = participant.add_event(cursor, event_type, payload)
            repos = sorted(repos, key=lambda repo: (not repo.is_fork, repo.last_update), reverse=True)[:LIMIT]
        total_count = website.db.one("""
            SELECT count(*)
              FROM repositories r
             WHERE r.participant = %s
               AND r.platform = %s
        """, (participant.id, platform.name))

title = participant.username
subhead = _("Repositories")

[---] text/html
% from "templates/auth.html" import auth_button with context
% from "templates/avatar-url.html" import avatar_img with context
% from "templates/repos.html" import show_repo with context

% extends "templates/profile-edit.html"

% block form

% if platform_name

    % if not account
        <p>{{ _(
            "You don't have any {platform} account connected to your profile.",
            platform=platform.display_name
        ) }}</p>
        % call auth_button(platform.name, 'connect', participant=participant)
            {{ _("Connect {0} account", platform.display_name) }}
        % endcall
    % else
        <noscript class="alert alert-danger">{{ _("JavaScript is required") }}</noscript>
        <p>{{ ngettext(
            "We found {n} repository in your {platform} account, {time} ago.",
            "A list of {n} repositories has been imported from your {platform} account, {time} ago."
            , n=total_count, platform=platform.display_name, time=to_age(last_fetch.ts)
        ) }}</p>
        <form action="javascript:" class="js-submit" method="POST">
            <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
            % for repo in repos
                {{ show_repo(repo, edit=True) }}
            % else
                <p>{{ _("No repositories found.") }}</p>
            % endfor
            % if repos
                <br>
                % set next_offset = offset + LIMIT
                % if next_offset < total_count
                <a class="btn btn-default btn-lg pull-right"
                   href="?platform={{ platform_name }}&amp;offset={{ next_offset }}">{{
                    _("Next Page →")
                }}</a>
                % endif
                <button class="btn btn-success btn-lg">{{ _("Save") }}</button>
            % endif
        </form>
    % endif

    <br><br>
    <a class="btn btn-default" href="{{ participant.path('edit/repositories') }}">{{ _("← Go back") }}</a>

% else

    % set repos = participant.get_repos_for_profile()
    % if repos
    <p>{{ _("The following repositories are currently displayed on your profile:") }}</p>
    <form action="" class="js-submit"
          data-on-success="fadeOut:.repo" method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
        % for repo in repos
            {{ show_repo(repo, unlist=True) }}
        % endfor
    </form>
    <hr>
    % endif

    <p>{{
        _("We can import a list of your team's repositories from:") if participant.kind == 'group' else
        _("We can import a list of your repositories from:")
    }}</p>
    <p>
    % for platform in website.platforms.hasattr('api_repos_path')
        % if participant.kind == 'group' and platform.has_teams and not hasattr(platform, 'is_team_member')
            <button class="btn btn-default" disabled title="{{ _('This is not supported yet') }}">{{
                platform.display_name
            }}</button>
        % else
            <a class="btn btn-default" href="?platform={{ platform.name }}">{{
                platform.display_name
            }}</a>
        % endif
        % if not loop.last
            &nbsp;&nbsp;
        % endif
    % endfor
    </p>

    % set teams = participant.get_teams()
    % if teams
        <p>{{ _("We can also import lists of repositories for your teams:") }}</p>
        <div class="buttons">
        % for team in teams
            <a class="btn btn-default text-center" href="/{{ team.name }}/edit/repositories">
                <span class="avatar-inline">{{ avatar_img(team, size=28) }}</span><br>
                {{ team.name }}
            </a>
        % endfor
        </div>
    % endif

% endif

% endblock
