"""Get or change the authenticated user's tip to this person.
"""
from base64 import b64encode

from liberapay.exceptions import AuthRequired
from liberapay.models.participant import Participant
from liberapay.utils import b64encode_s, get_participant

_ = lambda a: a
DONATION_MESSAGES = {
    'weekly': _("You are now donating {0} per week to {1}. Thank you!"),
    'monthly': _("You are now donating {0} per month to {1}. Thank you!"),
    'yearly': _("You are now donating {0} per year to {1}. Thank you!"),
}

PLEDGE_MESSAGES = {
    'weekly': _("You have now pledged to donate {0} per week to {1}. Thank you!"),
    'monthly': _("You have now pledged to donate {0} per month to {1}. Thank you!"),
    'yearly': _("You have now pledged to donate {0} per year to {1}. Thank you!"),
}

del _

[-----------------------------------------------------------------------------]

out = {}

# Get tipper and tippee.
# ======================

direction = request.qs.get('dir', 'to')
if direction == 'to':
    if user.ANON:
        raise AuthRequired
    tipper = user
    tippee = get_participant(state, restrict=False, redirect_stub=False)
elif direction == 'from':
    tipper = get_participant(state, restrict=True)
    if request.method == 'POST':
        tippee = Participant.from_id(request.body.get_int('tippee'))
    else:
        tippee = Participant.from_id(request.qs.get_int('tippee'))
else:
    raise response.invalid_input(direction, 'direction', 'querystring')

tippee_name = tippee.username
if tippee.status == 'stub':
    tippee_name = tippee.get_accounts_elsewhere()[0].friendly_name


# Get and maybe set amount.
# =========================

if request.method == 'POST':
    currency = request.body.get('currency', 'EUR')
    if currency not in constants.CURRENCIES:
        raise response.invalid_input(currency, 'currency', 'body')
    amount = request.body.get('selected_amount')
    if amount and amount != 'custom':
        period = 'weekly'
        amount = Money(amount, currency)
    else:
        period = request.body['period']
        if period not in constants.PERIOD_CONVERSION_RATES:
            raise response.invalid_input(period, 'period', 'body')
        amount = request.body.get('amount')
        if amount:
            amount = locale.parse_money_amount(amount, currency)
        else:
            raise response.error(400, _("The donation amount is missing."))
    renewal_mode = request.body.get_int('renewal_mode', default=1, minimum=1, maximum=2)
    out = tipper.set_tip_to(tippee, amount, period, renewal_mode=renewal_mode)
    if not out:
        raise response.error(400, _("This donation doesn't exist or has already been stopped."))
    if out['renewal_mode'] == 0:
        out["msg"] = _("Your donation to {0} has been stopped.", tippee_name)
    else:
        messages = PLEDGE_MESSAGES if out['is_pledge'] else DONATION_MESSAGES
        msg = messages[out['period']]
        out["msg"] = _(msg, out['periodic_amount'], tippee_name)
    if request.headers.get(b'X-Requested-With') != b'XMLHttpRequest':
        back_to = request.body.get('back_to') or tipper.path('giving/')
        back_to += '&' if '?' in back_to else '?'
        back_to += 'success=' + b64encode_s(out["msg"])
        if out['renewal_mode'] != 0 and not out['is_funded'] and not out['is_pledge']:
            response.redirect(
                tipper.path('giving/pay/') + '?beneficiary=' + str(tippee.id)
            )
        response.redirect(back_to, trusted_url=False)
else:
    out = tipper.get_tip_to(tippee)

out["npatrons"] = tippee.npatrons
out["total_giving"] = tipper.giving
out["total_receiving"] = tipper.receiving

if not tippee.hide_receiving:
    total_receiving_tippee = tippee.receiving
    out["total_receiving_tippee"] = total_receiving_tippee
else:
    out["total_receiving_tippee"] = None

if 'ctime' not in out:
    out["ctime"] = out["mtime"] = None

[---] text/html
% extends "templates/layouts/base-thin.html"

% block thin_content
    <p class="alert alert-danger">These aren't the droids you're looking for.</p>
% endblock

[---] application/json via json_dump
out
