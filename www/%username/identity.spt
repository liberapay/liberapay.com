from datetime import date

from pando.utils import utcnow

from liberapay.exceptions import TooManyAttempts
from liberapay.utils import check_address_v2, form_post_success, get_participant

[---]
request.allow('GET', 'POST')
participant = get_participant(state, restrict=True)

if participant.kind not in ('individual', 'organization'):
    raise response.error(403)

title = participant.username
error = ''

identity = participant.get_current_identity()

if request.method == 'POST':
    body = request.body
    v1_form = (
        'CountryOfResidence' in body or 'LegalPersonType' in body or
        'IncomeRange' in body or 'LegalRepresentativeEmail' in body
    )
    if v1_form:
        raise response.redirect(participant.path('identity-v1'), code=307)

    new_kind = 'organization' if body.get('organization_name') else 'individual'

    identity = {}
    for k in constants.IDENTITY_FIELDS:
        v = body.get(k, '')
        if k in ('headquarters_address', 'postal_address'):
            v = {k2: body.get(k + '.' + k2, '').strip() for k2 in constants.POSTAL_ADDRESS_KEYS_LIBERAPAY}
            if v['city'] or v['postal_code'] or v['local_address']:
                if not check_address_v2(v):
                    error = _("The provided postal address is incomplete.")
            for subkey, subvalue in v.items():
                if len(subvalue) > 200:
                    error = "`%s` value is too long (%i > %i)" % (subkey, len(subvalue), 200)
        elif k == 'birthdate' and v:
            try:
                year, month, day = map(int, v.split('-'))
                # the above raises ValueError if the number of parts isn't 3
                # or if any part isn't an integer
                v = date(year, month, day).isoformat()
            except ValueError:
                error = _("Invalid date of birth.")
        elif len(v) > 200:
            error = "`%s` value is too long (%i > %i)" % (k, len(v), 200)
        identity[k] = v

    if not error:
        website.db.hit_rate_limit('insert_identity', participant.id, TooManyAttempts)
        participant.insert_identity(identity)
        if new_kind != participant.kind:
            with website.db.get_cursor() as cursor:
                cursor.run("""
                    UPDATE participants
                       SET kind = %s
                     WHERE id = %s
                """, (new_kind, participant.id))
                participant.add_event(cursor, 'set_kind', new_kind)
            participant.set_attributes(kind=new_kind)
        success = _("Your identity information has been updated.")
        form_post_success(state, msg=success)

    if error and request.headers.get(b'X-Requested-With') == b'XMLHttpRequest':
        raise response.error(400, error)

elif participant.mangopay_user_id and (participant.balance or not identity):
    raise response.redirect(participant.path('identity-v1'))

[---] text/html
% from "templates/macros/identity.html" import identity_form with context

% extends "templates/layouts/settings.html"

% block content
<div class="paragraph">
<form action="" method="POST">

    % if error
    <div class="alert alert-danger">{{ error }}</div>
    % elif 'success' in request.qs
    <div class="alert alert-success">{{ b64decode_s(request.qs.pop('success')) }}</div>
    % else
    <noscript><div class="alert alert-danger">{{ _("JavaScript is required") }}</div></noscript>
    % endif

    <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />

    <p>{{ _(
        "This page allows you to view and modify the identity information "
        "attached to your account. Only authorized personnel can access this "
        "information, we do not show it to other users or anyone else unless "
        "required by law or if you instruct us to."
    ) }}</p>

    {{ identity_form(identity, constants.IDENTITY_FIELDS, required=False) }}

    <br>
    <button class="btn btn-primary btn-lg" type="submit">{{ _("Save") }}</button>

</form>
</div>
% endblock
