import json

from oauthlib.oauth2 import OAuth2Error
from requests_oauthlib.oauth1_session import TokenRequestDenied

from liberapay.elsewhere._exceptions import CantReadMembership
from liberapay.exceptions import AuthRequired
from liberapay.models.account_elsewhere import AccountElsewhere
from liberapay.models.participant import NeedConfirmation, Participant
from liberapay.utils import b64decode_s, parse_int

[-----------------------------]

split = request.path['platform'].split(':', 1)
platform_name, domain = split if len(split) == 2 else (split[0], '')
platform = website.platforms.get(platform_name)
if platform is None:
    raise response.error(404)
if domain and not constants.DOMAIN_RE.match(domain):
    raise response.error(400, "`%s` is not a valid domain name" % domain)
domain = domain.lower()

# Get the query id from the querystring
query_id = platform.get_query_id(request.qs)

# Check that we have a cookie that matches the query id (CSRF prevention)
cookie_name = str(platform.name+'_'+domain+('_' if domain else '')+query_id)
try:
    cookie_value = request.headers.cookie[cookie_name].value
except KeyError:
    raise response.error(400, 'Missing cookie')
if not cookie_value:
    raise response.error(400, 'Empty cookie')
cookie_obj = json.loads(b64decode_s(cookie_value))
query_data, action, then, action_user_id = cookie_obj[:4]
p_id = cookie_obj[4] if len(cookie_obj) > 4 else None
then = b64decode_s(then)  # double-b64encoded to avoid other encoding issues w/ qs

# Check for an error message in the querystring
error_message = request.qs.get('error_message') or request.qs.get('error_description')
if error_message:
    raise response.error(502, _("{0} returned this error message: {1}",
                          platform.display_name, error_message))

# Require auth before trying a connection
if action == 'connect' and user.ANON:
    raise AuthRequired

# Finish the auth process, the returned session is ready to use
url = website.canonical_url + request.line.uri
try:
    sess = platform.handle_auth_callback(domain, url, query_id, query_data)
except TokenRequestDenied as e:
    raise response.error(502, _("{0} returned an error, please try again later.",
                          platform.display_name))
except OAuth2Error as e:
    raise response.error(502, e.message)

# Get the user's info from the platform's API and upsert it in the DB
account = AccountElsewhere.upsert(platform.get_user_self_info(domain, sess))
participant = account.participant

if action_user_id:
    if action_user_id[0] == '>':
        user_id_type = 'user_name'
        action_user_id = action_user_id[1:].lower()
        account_user_id = account.user_name.lower()
    else:
        user_id_type = 'user_id'
        account_user_id = account.user_id
if action_user_id and account_user_id != action_user_id:
    try:
        claimed_account = AccountElsewhere.upsert(platform.get_user_info(domain, user_id_type, action_user_id))
    except NotImplementedError as e:
        raise response.error(400, e.args[0])
    if not claimed_account.is_team:
        then = '/on/%s/%s/failure.html'
        response.redirect(then % (platform.name, claimed_account.liberapay_slug))
    try:
        is_member = platform.is_team_member(claimed_account.user_name, sess, account)
    except CantReadMembership as e:
        then = '/on/%s/%s/failure.html?error=CantReadMembership'
        response.redirect(then % (platform.name, claimed_account.liberapay_slug))
    if not is_member:
        then = '/on/%s/%s/failure.html?team=true'
        response.redirect(then % (platform.name, claimed_account.liberapay_slug))
    account = claimed_account

if action == 'connect':
    connect_to = Participant.from_id(parse_int(p_id)) if p_id else user
    if not user.controls(connect_to):
        raise response.error(403, "can't connect to an account you don't control")
    try:
        connect_to.take_over(account)
    except NeedConfirmation:
        token, expires = account.make_connect_token()
        response.set_cookie('connect_%s' % account.id, token, expires)
        response.redirect('/on/confirm.html?id=%s&p_id=%s' % (account.id, connect_to.id))

elif action in {'lock', 'unlock'}:
    account.participant.update_goal(Money(-1, 'EUR') if action == 'lock' else None)

else:
    raise response.error(400)

response.erase_cookie(cookie_name)
response.redirect(then)

[-----------------------------] text/html
