from oauthlib.oauth2 import InvalidGrantError, TokenExpiredError

from liberapay.models.account_elsewhere import AccountElsewhere
from liberapay.utils import b64decode_s

platforms_nav = [
    ('/%s/' % p.name, p.display_name) for p in website.platforms if p.supports_follows
]

[---]
platform = website.platforms.get(request.path['platform'])
if not (platform and platform.supports_follows):
    raise response.error(404)

title = _("Social Explorer")
subhead = platform.display_name

account, accounts = None, ()
if not user.ANON:
    accounts = user.get_accounts_elsewhere(platform.name, is_team=False)
    accounts_nav = [(account.user_id, account.friendly_name) for account in accounts]
    if accounts:
        selected_account_id = request.qs.get('e_user_id')
        if selected_account_id:
            accounts.sort(key=lambda a: -(a.user_id == selected_account_id))
        account = accounts[0]
        if not selected_account_id:
            selected_account_id = account.user_id

need_reconnect = None
sess = None
if account:
    sess = account.get_auth_session()
    if sess:
        page_url = b64decode_s(request.qs.get('page', ''))
        if page_url and page_url[:1] != '/':
            raise response.invalid_input(page_url, 'page', 'querystring')
        try:
            follows, nfollows, pages_urls = platform.get_follows_for(account, page_url, sess)
        except (InvalidGrantError, TokenExpiredError):
            need_reconnect = True
        else:
            follows = AccountElsewhere.get_many(platform.name, follows)
            user_tippees = set(website.db.all("""
                SELECT t.tippee
                  FROM current_tips t
                 WHERE t.tipper = %s
                   AND t.tippee IN %s
                   AND t.amount > 0
            """, (user.id, set(e.participant.id for e in follows)))) if follows else set()

[---] text/html
% extends "templates/layouts/base.html"

% from 'templates/macros/elsewhere.html' import auth_button with context
% from "templates/macros/nav.html" import querystring_nav with context
% from 'templates/macros/profile-box.html' import profile_box_embedded_elsewhere with context
% from "templates/macros/your-tip.html" import tip_form with context

% block subnav
    % from "templates/macros/nav.html" import nav with context
    <nav class="nav nav-pills mb-4">
        {{ nav(platforms_nav, base='/on') }}
    </nav>
% endblock

% block content

% if len(accounts) > 1
    <nav class="mb-4"><ul class="nav nav-pills">{{ querystring_nav('e_user_id', accounts_nav, selected_account_id) }}</ul></nav>
% endif

% if user.ANON
    % from "templates/macros/sign-in-link.html" import sign_in_link with context
    {{ sign_in_link() }}<br>
% elif need_reconnect
    <p>{{ _(
        "{platform} rejected our request to access your data. Reconnecting your "
        "{platform} account should fix the problem.",
        platform=platform.display_name
    ) }}</p>
    % call auth_button(platform.name, 'connect', extra_scopes=[platform.oauth_follows_scope|default('')])
        {{ _("Reconnect") }}
    % endcall
% elif not account or not sess
    % call auth_button(platform.name, 'connect', extra_scopes=[platform.oauth_follows_scope|default('')])
        {{ _("Connect your {platform} account", platform=platform.display_name) }}
    % endcall
% elif not follows
<p>{{ _("It looks like you don't follow anyone on {platform}.", platform=platform.display_name) }}</p>
% else
<p>{{ ngettext(
    "You follow {n} account on {platform}.",
    "You follow {n} accounts on {platform}.",
    n=nfollows, platform=platform.display_name
) if nfollows >= 0 else '' }}</p>
<div class="inline-boxes">
% for e_account in follows
    {{ profile_box_embedded_elsewhere(
        e_account, has_tip=(e_account.participant.id in user_tippees),
        show_button=True, show_numbers=False, show_platform_icon=False,
    ) }}
% endfor
</div>
% if pages_urls
    % from 'templates/macros/pagination.html' import pages_links with context
    {{ pages_links(pages_urls) }}
% endif

% endif

% endblock
