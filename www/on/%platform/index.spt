from oauthlib.oauth2 import InvalidGrantError, TokenExpiredError

from liberapay.models.account_elsewhere import AccountElsewhere
from liberapay.utils import b64decode_s

platforms_nav = [('/%s/' % p.name, p.display_name) for p in website.friends_platforms]

[---]
platform = website.platforms.get(request.path['platform'])
if platform is None or platform not in website.friends_platforms:
    raise response.error(404)

title = _("Social Explorer")
subhead = platform.display_name

account = None
if not user.ANON:
    account = user.get_account_elsewhere(platform.name)

sess = None
if account:
    sess = account.get_auth_session()
    if sess:
        page_url = b64decode_s(request.qs.get('page', ''))
        if page_url and page_url[:1] != '/':
            raise response.invalid_input(page_url, 'page', 'querystring')
        try:
            friends, nfriends, pages_urls = platform.get_friends_for(account, page_url, sess)
        except (InvalidGrantError, TokenExpiredError):
            need_reconnect = True
        else:
            friends = AccountElsewhere.get_many(platform.name, friends)
            user_tippees = set(website.db.all("""
                SELECT t.tippee
                  FROM current_tips t
                 WHERE t.tipper = %s
                   AND t.tippee IN %s
                   AND t.amount > 0
            """, (user.id, set(e.participant.id for e in friends))))

limited = getattr(platform, 'api_friends_limited', False)

[---] text/html
% extends "templates/base.html"

% from 'templates/auth.html' import auth_button with context
% from 'templates/profile-box.html' import profile_box_embedded_elsewhere with context
% from "templates/your-tip.html" import tip_form with context

% block subnav
    % from "templates/nav.html" import nav with context
    <nav class="nav nav-pills">
        {{ nav(platforms_nav, base='/on') }}
    </nav>
% endblock

% macro limitation_note()
    % if limited
        <br>
        <p>{{ _("Note: privacy settings may prevent Liberapay from seeing some of your {0} friends.",
                platform.display_name) }}</p>
    % endif
% endmacro

% block content

% if user.ANON
    % from "templates/sign-in-link.html" import sign_in_link with context
    <p>{{ sign_in_link() }}</p>
% elif need_reconnect
<div class="paragraph">
    <p>{{ _(
        "Please refresh your {0} connection to find your friends from there.",
        platform.display_name
    ) }}</p>
    % call auth_button(platform.name, 'connect', extra_scopes=[platform.oauth_friends_scope])
        {{ _("Refresh") }}
    % endcall
</div>
% elif not account or not sess
<div class="paragraph">
    <p>{{ _(
        "Connect your {0} account to find your friends from there.",
        platform.display_name
    ) }}</p>
    % call auth_button(platform.name, 'connect', extra_scopes=[platform.oauth_friends_scope])
        {{ _("Connect") }}
    % endcall
</div>
% elif not friends
<p>{{ _("No friends found.") }}</p>
{{ limitation_note() }}
% else
<p>{{ ngettext("You have {n} friend on {0}.", "You have {n} friends on {0}.",
               nfriends, platform.display_name) if nfriends >= 0 }}</p>
<div class="inline-boxes">
% for friend in friends
    {{ profile_box_embedded_elsewhere(
        friend, has_tip=(friend.participant.id in user_tippees),
        show_button=True, show_numbers=False, show_platform_icon=False,
    ) }}
% endfor
</div>
% if pages_urls
    % from 'templates/pagination.html' import pages_links with context
    {{ pages_links(pages_urls) }}
% endif

{{ limitation_note() }}
% endif

% endblock
