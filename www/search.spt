from liberapay.utils import markdown
from liberapay.utils.i18n import LANGUAGES_2, SEARCH_CONFS, strip_accents

[---]

query = request.qs.get('q')
scope = request.qs.get('scope')

title = _("Search")
results = {}

if query:
    subhead = query
    q = strip_accents(query)

    if scope in (None, 'usernames'):
        results['usernames'] = website.db.all("""
            SELECT username, avatar_url, similarity(username, %(q)s) AS rank, id
              FROM participants
             WHERE username %% %(q)s
               AND status = 'active'
               AND hide_from_search = 0
          ORDER BY rank DESC, username
             LIMIT 10
        """, locals())

    if scope in (None, 'statements'):
        langs = tuple(l for l in request.accept_langs if l in LANGUAGES_2)[:3]
        search_confs = list(set(SEARCH_CONFS.get(lang, 'simple') for lang in langs))
        results['statements'] = website.db.all("""
            WITH queries AS (
                     SELECT search_conf::regconfig
                          , plainto_tsquery(search_conf::regconfig, %(q)s) AS query
                       FROM unnest(%(search_confs)s) search_conf
                 )
            SELECT username
                 , avatar_url
                 , max(rank) AS max_rank
                 , json_agg((SELECT a FROM (
                       SELECT rank
                            , lang
                            , ts_headline(search_conf, content, query,
                                          'StartSel=**,StopSel=**,MaxFragments=1,ShortWord=0') AS excerpt
                   ) a)) AS excerpts
              FROM (
                       SELECT participant, lang, content, search_conf, query
                            , ts_rank_cd(search_vector, query) AS rank
                         FROM statements NATURAL JOIN queries
                        WHERE lang IN %(langs)s
                          AND type IN ('profile', 'summary')
                          AND search_vector @@ query
                     ORDER BY rank DESC
                        LIMIT 10
                   ) s
              JOIN participants p ON p.id = s.participant
             WHERE p.status = 'active'
               AND p.hide_from_search = 0
          GROUP BY p.id
          ORDER BY max_rank DESC
        """, locals())

    if scope in (None, 'communities'):
        results['communities'] = website.db.all("""
            SELECT c.id, c.name, c.nmembers, p.nsubscribers
                 , similarity(c.name, %(q)s) AS rank
              FROM communities c
              JOIN participants p ON p.id = c.participant
             WHERE name %% %(q)s
               AND p.hide_from_search = 0
          ORDER BY rank DESC, name
             LIMIT 10
        """, locals())

    if scope in (None, 'repositories'):
        results['repositories'] = website.db.all("""
            SELECT r.id, r.platform, r.remote_id, r.name, r.slug
                 , r.description, r.last_update, r.is_fork, r.stars_count
                 , r.info_fetched_at, r.show_on_profile
                 , similarity(r.name, %(q)s) AS rank
                 , json_build_object(
                       'id', p.id,
                       'username', p.username,
                       'avatar_url', p.avatar_url
                   ) as owner
              FROM repositories r
              JOIN participants p ON p.id = r.participant
             WHERE r.name %% %(q)s
               AND p.hide_from_search = 0
          ORDER BY similarity(r.name, %(q)s) DESC, r.is_fork ASC, r.last_update DESC, r.name
             LIMIT 10
        """, locals(), back_as=dict)

[---] text/html
% extends "templates/base.html"
% from 'templates/avatar-url.html' import avatar_url, avatar_img with context
% from 'templates/search.html' import search_form with context
% block content

    % set usernames = results.get('usernames')
    % set communities = results.get('communities')
    % set repositories = results.get('repositories')
    % set statements = results.get('statements')

    % if query and not (usernames or communities or repositories or statements)
        <p class="alert alert-warning">{{
            _("Could not find anything matching your search."
        ) }}</p>
    % endif

    <p>{{ _('Whose work do you appreciate?') }}</p>
    {{ search_form(autofocus=True) }}

    <div class="row">
    % if usernames
    <div class="col-md-6">
        <h3>{{ ngettext("Found a matching username",
                        "Found matching usernames",
                        len(usernames)) }}</h3>
        % for result in usernames
        <div class="mini-user">
            <a href="/{{ result.username }}/">
                {{ avatar_img(result) }}
                <div class="name">{{ result.username }}</div>
            </a>
        </div>
        % endfor
    </div>
    % endif

    % if communities
    <div class="col-md-6">
        <h3>{{ ngettext("Found a matching community name",
                        "Found matching community names",
                        len(communities)) }}</h3>
        <ul class="community memberships">
        % for result in communities
            <li>
                <a href="/for/{{ result.name }}/">{{ result.name.replace('_', ' ') }}</a>
                <div class="nmembers">{{
                    ngettext("{n} member", "{n} members", result.nmembers)
                }}</div>
            </li>
        % endfor
        </ul>
    </div>
    % endif
    </div>

    % if repositories
    % set fork = ' ' + _("(fork)")
    <div>
        <h3>{{ ngettext("Found a matching repository",
                        "Found matching repositories",
                        len(repositories)) }}</h3>
        % for repo in repositories
            % set owner = repo.owner
            <div class="paragraph">
                <a href="/{{ owner.username }}/" class="avatar-inline">
                    {{ avatar_img(owner, size=28) }}
                </a>
                {{ _(
                    "{username} has a repository named {repo_name} in their {platform} account",
                    username=('<a href="/{0}/">{0}</a>'|safe).format(owner.username),
                    repo_name='<em>%s</em>'|safe % (repo.name + (fork if repo.is_fork else '')),
                    platform=website.platforms[repo.platform].display_name,
                ) }}
            </div>
        % endfor
    </div>
    % endif

    % if statements
    <div>
        <h3>{{ ngettext("Found a matching user statement",
                        "Found matching user statements",
                        len(statements)) }}</h3>
        % for result in statements
            <div class="panel panel-default">
            <div class="panel-body search-result" href="/{{ result.username }}/">
                {{ avatar_img(result, size=72) }}
                <div class="col-right">
                    <a class="username" href="/{{ result.username }}/">{{ result.username }}</a>
                    % if len(result.excerpts) == 1
                        <blockquote class="excerpt profile-statement">{{
                            markdown.render(result.excerpts[0].excerpt)
                        }}</blockquote>
                    % endif
                </div>
            </div>
            </div>
        % endfor
    </div>
    % endif

    <br>
    <h3>{{ _("Didn't find who you were looking for?") }}</h3>
    <p>{{ _("You can also pledge to people who haven't joined Liberapay yet:") }}</p>
    % include "templates/jump.html"

% endblock
[---] application/json via json_dump
results
