from liberapay.exceptions import LoginRequired
from liberapay.i18n.base import LOCALE_EN as locale

PAGE_SIZE = 50
STATUS_MAP = {
    'failed': 'danger',
    'partially_refunded': 'warning',
    'pre': 'muted',
    'refunded': 'danger',
    'succeeded': 'success',
}

[---]

if user.ANON:
    raise LoginRequired

if not user.is_admin:
    raise response.error(403)

before = request.qs.get_int('before', default=None)
status = request.qs.get('status')
payins = website.db.all("""
    SELECT pi.*, p.username AS payer_name, r.network AS payin_method
         , ( SELECT json_agg((SELECT x FROM ( SELECT
                        pt.recipient, recipient.username AS recipient_name,
                        pt.team, team.username AS team_name,
                        pt.status, pt.error,
                        pt.amount, pt.unit_amount, pt.n_units, pt.period
                    ) x))
               FROM payin_transfers pt
               JOIN participants recipient ON recipient.id = pt.recipient
          LEFT JOIN participants team ON team.id = pt.team
              WHERE pt.payin = pi.id
           ) AS transfers
      FROM payins pi
      JOIN exchange_routes r ON r.id = pi.route
      JOIN participants p ON p.id = pi.payer
     WHERE coalesce(pi.id < %s, true)
       AND coalesce(pi.status::text = %s, true)
  ORDER BY pi.id DESC
     LIMIT %s
""", (before, status, PAGE_SIZE))

title = "Payments Admin"

[---] text/html
% from "templates/macros/icons.html" import unicode_symbol
% from 'templates/macros/nav.html' import querystring_nav with context
% from "templates/macros/payment-methods.html" import payment_method_icon with context

% extends "templates/layouts/admin.html"

% block content

<ul class="nav nav-pills">{{ querystring_nav('status', [
    (None, "All"),
    ('failed', "Failed"),
    ('pending', "Pending"),
    ('succeeded', "Succeeded"),
], status) }}</ul>
<br><br>

% if payins
    <table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Creation time (UTC)</th>
            <th>Payer</th>
            <th class="text-center">Method</th>
            <th class="text-right">Amount</th>
            <th>Distribution</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
    % for pi in payins
        % do pi.__setitem__('status', (
            'refunded' if pi.refunded_amount == pi.amount else
            'partially_refunded' if pi.refunded_amount else
            pi.status
        ))
        <tr>
            <td>{{ pi.id }}</td>
            <td>{{ pi.ctime.replace(microsecond=0, tzinfo=None) }}</td>
            <td><a href="/~{{ pi.payer }}/">{{ pi.payer_name }}</a></td>
            <td class="text-center">{{
                payment_method_icon(pi.payin_method) }}&nbsp;{{
                unicode_symbol('A', "Automatic payment") if pi.off_session else
                unicode_symbol('M', "Manual payment", "text-muted")
            }}</td>
            <td class="text-right">
            % if pi.refunded_amount
                <strike class="text-muted">{{ locale.format_money(pi.amount) }}</strike>
                % if pi.refunded_amount < pi.amount
                <br>{{ locale.format_money(pi.amount - pi.refunded_amount) }}
                % endif
            % else
                {{ locale.format_money(pi.amount) }}
            % endif
            </td>
            <td>
                % for pt in pi.transfers or ()
                    % do pt.__setitem__('status', (
                        'refunded' if pt.reversed_amount == pt.amount else
                        'partially_refunded' if pt.reversed_amount else
                        pt.status
                    ))
                    → {{ locale.format_money(Money(**pt.amount)) }}
                    to <a href="/~{{ pt.recipient }}/">{{ pt.recipient_name }}</a>
                    % if pt.team
                        through team <a href="/~{{ pt.team }}/">{{ pt.team_name }}</a>
                    % endif
                    % if pt.period
                        ({{ locale.format_money(Money(**pt.unit_amount)) }}/{{ pt.period[:-2] }} × {{ pt.n_units }})
                    % endif
                    % if pt.status != pi.status
                        ‒ <span class="text-{{ STATUS_MAP.get(pt.status, 'info') }}">{{ pt.status }}</span>
                        % if pt.error
                            ‒ error: <code>{{ pt.error }}</code>
                        % endif
                    % endif
                    <br>
                % else
                    <code>{{ pi.transfers }}</code>
                % endfor
            </td>
            <td class="text-{{ STATUS_MAP.get(pi.status, 'info') }}">{{ pi.status }}</td>
        </tr>
        % if pi.error
        <tr class="subrow">
            <td></td>
            <td colspan="6" class="text-right">Error: <code>{{ pi.error }}</code></td>
        </tr>
        % endif
    % endfor
    </tbody>
    </table>
    % if len(payins) == PAGE_SIZE
        <a class="btn btn-primary" href="{{ request.qs.derive(before=payins[-1].id) }}">Next page →</a>
    % endif
% else
    No payins found.
% endif

% endblock
