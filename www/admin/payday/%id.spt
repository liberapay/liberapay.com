from datetime import date, timedelta
import mmap
import os
from threading import Lock

from liberapay.billing.payday import exec_payday
from liberapay.exceptions import LoginRequired
from liberapay.utils import parse_int, pid_exists

ONE_WEEK = timedelta(days=7)
S3_BUCKET = website.app_conf.s3_payday_logs_bucket

payday_log_path = lambda i: website.env.log_dir+'/payday-%i.txt' % i

MAXLEN = mmap.PAGESIZE * 100

file_seek_lock = Lock()

def stream_lines_from_file(f, request, response, maxlen=MAXLEN):
    """This implements a non-standard `x-lines` HTTP Range Request mechanism.

    Why? Because streaming blocks of full lines instead of arbitrary blocks of bytes is
    a simple way to avoid splitting a multibyte char (e.g. UTF8-encoded) in the middle.

    The standard for HTTP range requests is https://tools.ietf.org/html/rfc7233
    """
    file_is_partial = f.name.endswith('.part')
    req_range = request.headers.get(b'Range', b'').split(b'=', 1)
    if req_range[0] != b'x-lines':
        raise response.error(416, "unknown range specifier")
    req_range = req_range[-1].split(b'-', 1)
    first_pos = parse_int(req_range[0], default=0)
    # NOTE we're ignoring the rest of the requested range
    with file_seek_lock:
        f.seek(max(first_pos - 1, 0))
        if first_pos > 0:
            lf = f.read(1)
            if lf != b'\n':
                raise response.error(416, "byte %s is not a line feed" % first_pos)
        lines = f.readlines(maxlen)
        if file_is_partial and lines and lines[-1][-1:] != b'\n':
            lines = lines[:-1]
        data = ''.join(lines)
    l = len(data)
    last_pos = first_pos + l - 1
    if file_is_partial or first_pos > 0 or last_pos < os.fstat(f.fileno()).st_size - 1:
        response.code = 206
        size = '*' if file_is_partial else os.fstat(f.fileno()).st_size
        cr = 'x-lines %s-%s/%s' % (first_pos, last_pos, size)
        # NOTE the range's unit is bytes, not lines
        response.headers[b'Content-Range'] = cr.encode('ascii')
    response.headers[b'Content-Type'] = b'text/plain'
    response.body = data
    return response

payday_logs = {}

class payday_pid(object):
    file, lock = None, Lock()

def serve_payday_log(payday_id, request, response):
    f = None
    if payday_id in payday_logs:
        f = payday_logs[payday_id]
        if not os.path.exists(f.name):
            payday_logs.pop(payday_id, None)
            f.close()
            f = None
    if not f:
        payday = website.db.one("SELECT * FROM paydays WHERE id = %s", (payday_id,))
        if not payday:
            raise response.error(404)
        log_path = payday_log_path(payday_id)
        if payday.stage:
            log_path += '.part'
        elif not os.path.exists(log_path) and website.s3:
            s3_key = 'paydays/payday-%i.txt' % payday_id
            website.s3.download_file(S3_BUCKET, s3_key, log_path)
        try:
            f = payday_logs[payday_id] = open(log_path, 'rb')
        except IOError as e:
            if e.errno == 2:
                raise response.error(404)
            raise response.error(500, "IOError")
    stream_lines_from_file(f, request, response)
    if f.name.endswith('.part') and not response.body:
        # Check that payday hasn't crashed
        if not payday_pid.file:
            try:
                payday_pid.file = open(website.env.log_dir+'/payday.pid', 'rb')
            except IOError as e:
                if e.errno != 2:
                    raise
        if payday_pid.file:
            with payday_pid.lock:
                payday_pid.file.seek(0)
                pid = parse_int(payday_pid.file.read(1024).strip(), default=None)
        else:
            pid = None
        if not pid or not pid_exists(pid):
            raise response.error(500, "Payday seems to have crashed.")
    raise response

[---]

if user.ANON:
    raise LoginRequired
if not user.has_privilege('run_payday') and not user.is_admin:
    raise response.error(403, "You're not authorized to run payday.")

payday_id = request.path['id'].split('.', 1)[0]
title = "Payday"

if payday_id:
    request.allow('GET')
    try:
        payday_id = int(payday_id)
    except ValueError:
        raise response.error(404)
    title += " #%s" % payday_id
else:
    last_payday = website.db.one("""
        SELECT *
          FROM paydays
         WHERE ts_start IS NOT NULL
      ORDER BY id DESC
         LIMIT 1
    """)
    payday_is_running = bool(last_payday) and last_payday.stage is not None
    today = date.today()
    today_weekday = today.isoweekday()
    today_is_wednesday = today_weekday == 3
    payday_is_already_done = bool(last_payday) and last_payday.ts_end.date() == today
    payday_is_late = bool(last_payday) and today - last_payday.ts_start.date() > ONE_WEEK
    payday_needs_to_run = (today_is_wednesday and not payday_is_already_done) or payday_is_late
    override_checks = website.env.override_payday_checks

if request.method == 'POST':
    action = request.body['action']
    if action not in ('run_payday', 'rerun_payday'):
        raise response.invalid_input(action, 'action', 'body')
    rerun = action == 'rerun_payday'
    if rerun:
        if not last_payday:
            raise response.error(400, "no payday to rerun")
        if last_payday.stage is None:
            raise response.error(409, "payday has already finished running")
        p_id = last_payday.id
    else:
        if payday_is_running:
            # Payday has already been started, redirect
            response.redirect('/admin/payday/%s' % last_payday.id)
        if not payday_needs_to_run and not override_checks:
            raise response.error(403, "it's not time to run payday")
        p_id = last_payday.id + 1 if last_payday else 1
        if override_checks:
            website.db.run("""
                INSERT INTO paydays
                            (id, public_log, ts_start)
                     VALUES (%s, 'none', NULL)
                ON CONFLICT (id) DO NOTHING
            """, (p_id,))
    log_file = open(payday_log_path(p_id)+'.part', 'a')
    exec_payday(log_file)
    response.redirect('/admin/payday/%s' % p_id)

[---] text/html
% extends "templates/base.html"

% block content
    % if payday_id
        <noscript class="alert alert-danger">JavaScript is required</noscript>
        <pre class="console"
             data-log-url="{{ request.path.raw+'.txt' }}"
             data-rerun="#payday-rerun"
             data-msg-success="Payday has been successfully run \o/"></pre>
        <form action="/admin/payday/" class="hidden" id="payday-rerun" method="POST">
            <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
            <button class="btn btn-danger btn-lg" name="action" value="rerun_payday">Rerun payday</button>
        </form>
    % else
        <h3>Running Payday</h3>
        % if payday_is_running
            <p>Payday is running right now, you can go <a href="/admin/payday/{{ last_payday.id }}">see the log</a>.</p>
        % elif payday_is_already_done and not override_checks
            <p>Payday has already been run today.</p>
        % elif payday_needs_to_run or override_checks
            <p class="alert alert-warning">
                Before clicking the button below, make sure there isn't any issue that needs
                to be dealt with before this week's payday, and no important code changes
                to merge or deploy.
            </p>
            <form action="" method="POST">
                <input type="hidden" name="csrf_token" value="{{ csrf_token }}" />
                <button class="btn btn-danger btn-lg" name="action" value="run_payday">Run payday</button>
            </form>
        % else
            <p>Payday runs on Wednesday. That's not today.</p>
        % endif

        % if last_payday
            <br>
            <h3>Payday Stats</h3>
            <pre>{{ website.db.render("SELECT * FROM paydays ORDER BY id DESC LIMIT 10") }}</pre>
            <a class="btn btn-default" href="/about/paydays">More</a>

            <br>
            <h3>Payday Logs</h3>
            % for i in range(last_payday.id, 0, -1)
                <a href="/admin/payday/{{ i }}">Payday #{{ i }}</a><br>
            % endfor
        % endif
    % endif
% endblock

[---] text/plain
{{ serve_payday_log(payday_id, request, response) }}
