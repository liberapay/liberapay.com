from dateutil.parser import parse as parse_date

from liberapay.exceptions import LoginRequired
from liberapay.models.participant import Participant

PT_STATUS_MAP = {
    'failed': 'danger',
    'pre': 'muted',
}

[---]

if user.ANON:
    raise LoginRequired

if not user.is_admin:
    raise response.error(403)

if request.method == 'POST':
    event_data = {}
    p = Participant.from_id(request.body.get_int('p_id'))
    updated = 0
    for attr in constants.PROFILE_VISIBILITY_ATTRS:
        value = request.body.get(attr)
        if value is None:
            continue
        r = p.update_bit(attr, 2, value == 'on')
        if r:
            updated += 1
            event_data[attr] = value == 'on'
    if event_data:
        p.add_event(website.db, 'visibility_override', event_data, user.id)

    if 'is_suspended' in request.body:
        new_value = request.body['is_suspended']
        if new_value == 'null':
            new_value = None
        else:
            new_value = new_value == 'on'
        r = website.db.one("""
            UPDATE participants
               SET is_suspended = %(new_value)s
             WHERE id = %(p_id)s
               AND is_suspended IS NOT %(new_value)s
         RETURNING id
        """, dict(p_id=p.id, new_value=new_value))
        if r:
            updated += 1
            p.add_event(website.db, 'is_suspended', new_value, user.id)

    raise response.json({'msg': "Done, %i bits have been updated." % updated})

last_showed = request.qs.get('last_showed')
mode = request.qs.get('mode', 'all')
if mode == 'all':
    participants = website.db.all("""
        SELECT p
             , (SELECT c.name FROM communities c WHERE c.participant = p.id) AS c_name
             , ( SELECT json_build_object(
                            'address', e.address,
                            'verified', e.verified,
                            'blacklisted', EXISTS (
                                SELECT 1
                                  FROM email_blacklist bl
                                 WHERE lower(bl.address) = lower(e.address)
                                   AND (bl.ignore_after IS NULL OR bl.ignore_after > current_timestamp)
                            )
                        )
                   FROM emails e
                  WHERE e.participant = p.id
               ORDER BY e.address = p.email DESC NULLS LAST
                      , e.verified DESC
                      , e.added_time
                  LIMIT 1
               ) AS email
             , ( SELECT json_agg(json_build_object(
                            'provider', a.provider,
                            'id', a.id,
                            'country', a.country,
                            'charges_enabled', a.charges_enabled,
                            'verified', a.verified
                        ))
                   FROM ( SELECT a.*
                            FROM payment_accounts a
                           WHERE a.participant = p.id
                             AND a.is_current
                        ORDER BY a.provider DESC, a.id DESC
                        ) a
               ) AS payment_accounts
             , ( SELECT json_agg(json_build_object(
                            'type', s.type, 'content', s.content, 'lang', s.lang
                        ))
                   FROM ( SELECT s.*
                            FROM statements s
                           WHERE s.participant = p.id
                        ORDER BY s.lang, s.type DESC
                        ) s
               ) AS statements
             , ( SELECT row_to_json(e)
                   FROM ( SELECT e.*, p2.username AS recorder_name
                            FROM events e
                       LEFT JOIN participants p2 ON p2.id = e.recorder
                           WHERE e.participant = p.id
                             AND e.type IN ('is_suspended', 'visibility_override')
                        ORDER BY ts DESC
                           LIMIT 1
                        ) e
               ) AS last_change
          FROM participants p
         WHERE coalesce(p.id < %s, true)
           AND (p.status <> 'stub' OR p.receiving > 0)
      ORDER BY p.id DESC
         LIMIT 25
    """, (last_showed,))
    page_end = participants[-1][0].id if participants else None
elif mode == 'new_recipients':
    participants = website.db.all("""
        SELECT p
             , ( SELECT json_build_object(
                            'address', e.address,
                            'verified', e.verified,
                            'blacklisted', EXISTS (
                                SELECT 1
                                  FROM email_blacklist bl
                                 WHERE lower(bl.address) = lower(e.address)
                                   AND (bl.ignore_after IS NULL OR bl.ignore_after > current_timestamp)
                            )
                        )
                   FROM emails e
                  WHERE e.participant = p.id
               ORDER BY e.address = p.email DESC NULLS LAST
                      , e.verified DESC
                      , e.added_time
                  LIMIT 1
               ) AS email
             , ( SELECT json_agg(json_build_object(
                            'provider', a.provider,
                            'id', a.id,
                            'country', a.country,
                            'charges_enabled', a.charges_enabled,
                            'verified', a.verified
                        ))
                   FROM ( SELECT a.*
                            FROM payment_accounts a
                           WHERE a.participant = p.id
                             AND a.is_current
                        ORDER BY a.provider DESC, a.id DESC
                        ) a
               ) AS payment_accounts
             , ( SELECT json_agg(json_build_object(
                            'type', s.type, 'content', s.content, 'lang', s.lang
                        ))
                   FROM ( SELECT s.*
                            FROM statements s
                           WHERE s.participant = p.id
                        ORDER BY s.lang, s.type DESC
                        ) s
               ) AS statements
             , ( SELECT row_to_json(e)
                   FROM ( SELECT e.*, p2.username AS recorder_name
                            FROM events e
                       LEFT JOIN participants p2 ON p2.id = e.recorder
                           WHERE e.participant = p.id
                             AND e.type IN ('is_suspended', 'visibility_override')
                        ORDER BY ts DESC
                           LIMIT 1
                        ) e
               ) AS last_change
             , json_agg(json_build_object(
                   'amount', pt.amount, 'context', pt.context, 'ctime', date_trunc('second', pt.ctime),
                   'payer', pt.payer, 'payer_name', payer.username,
                   'team', pt.team, 'team_name', team.username,
                   'status', pt.status, 'error', pt.error, 'payin_method', r.network
               ) ORDER BY pt.row_number) AS payments
          FROM ( SELECT pt.*
                      , row_number() OVER (PARTITION BY pt.recipient ORDER BY pt.ctime DESC)
                   FROM payin_transfers pt
                  WHERE pt.status <> 'pre'
                    AND coalesce(pt.error <> 'aborted by payer', true)
               ) pt
          JOIN payins pi ON pi.id = pt.payin
          JOIN exchange_routes r ON r.id = pi.route
          JOIN participants p ON p.id = pt.recipient
          JOIN participants payer ON payer.id = pt.payer
     LEFT JOIN participants team ON team.id = pt.team
         WHERE coalesce(pt.ctime < %s, true)
           AND p.is_suspended IS NULL
           AND pt.row_number <= 20
      GROUP BY p.id
      ORDER BY min(pt.ctime) DESC
         LIMIT 25
    """, (last_showed,))
    page_end = participants[-1][-1][-1]['ctime'] if participants else None
else:
    raise response.invalid_input(mode, 'mode', 'querystring')

title = "Users Admin"

[---] text/html
% from 'templates/macros/avatar-url.html' import avatar_img with context
% from 'templates/macros/icons.html' import fontawesome, glyphicon
% from 'templates/macros/nav.html' import querystring_nav with context
% from "templates/macros/payment-methods.html" import payment_method_icon with context

% extends "templates/layouts/admin.html"

% block content

<noscript><div class="alert alert-danger">{{ _("JavaScript is required") }}</div></noscript>

<ul class="nav nav-pills">{{ querystring_nav('mode', [
    ('all', "All"),
    ('new_recipients', "New Recipients"),
], mode) }}</ul>
<br><br>

% for row in participants
% set p = row.p
<div class="row user-admin">
    <div class="col-md-2 mini-user-admin">
        <a href="/{{ p.username }}/">
            <div class="name">{{ row.c_name or p.username }}<br>({{ p.kind }}, {{ p.status }})</div>
            {{ avatar_img(p, size=120) }}
            <div class="age">{{ locale.format_timedelta(to_age(p.join_time), add_direction=True) if p.join_time }}</div>
        </a>
        % if p.status != 'stub' and p.is_person
        <br>
        <a class="btn btn-default btn-sm" href="{{ p.path('ledger') }}">Go to ledger</a>
        % endif
    </div>
    <div class="col-md-6">
    % set elsewhere = p.get_accounts_elsewhere()
    % if p.status == 'stub'
        % for account in elsewhere
            <div class="account">
                <a class="account-link" href="{{ account.html_url }}">
                    {{ fontawesome(account.platform) }}
                    <span class="account-username">{{ account.friendly_name_long }}</span>
                </a>
                <br>
                % if account.description
                    <section class="profile-statement embedded raw">{{
                        account.get_excerpt(500)
                    }}</section>
                % else
                    (no description)
                % endif
            </div>
        % else
            (ghost stub account)
        % endfor
    % else
        % if p.kind != 'community'
            <p>
            % if row.email
                <strong>Email address:</strong> {{ row.email.address }}
                % if row.email.verified
                <span class="text-success">{{ glyphicon('ok-sign', "Verified") }}</span>
                % elif row.email.blacklisted
                <span class="text-danger">{{ glyphicon('exclamation-sign', "Blacklisted") }}</span>
                % else
                <span class="text-warning">{{ glyphicon('warning-sign', "Unconfirmed") }}</span>
                % endif
            % else
                <strong>Email address:</strong> none.
            % endif
            </p>

        <p><strong>Elsewhere accounts:</strong>
        % if elsewhere
            <br>
            % for account in elsewhere
                <a class="account-link" href="{{ account.html_url }}">
                    <span class="symbol">{{ fontawesome(account.platform) }}</span>
                    <span>{{ account.friendly_name_long }}</span>
                </a>
                <br>
            % endfor
        % else
            none. <span class="text-warning">{{ glyphicon('warning-sign') }}</span>
        % endif
        </p>
        % endif

        % if p.is_person
        <p><strong>Payment accounts:</strong>
        % if row.payment_accounts
            <br>
            % for account in row.payment_accounts
                <span class="symbol-3ex">{{
                    fontawesome('cc-stripe', "Stripe") if account.provider == 'stripe' else
                    fontawesome('paypal', "PayPal") if account.provider == 'paypal' else
                    fontawesome(account.provider, account.provider)
                }}</span>
                {{ account.id }}
                ({{ locale.countries.get(account.country, account.country) }})
                % if account.verified and account.charges_enabled != False
                    <span class="symbol text-success">{{ glyphicon('ok-sign', "OK") }}</span>
                % elif account.verified
                    <span class="symbol text-danger">{{ glyphicon('exclamation-sign', "Disabled") }}</span>
                % else
                    <span class="symbol text-warning">{{ glyphicon('warning-sign', "Unconfirmed") }}</span>
                % endif
                <br>
            % endfor
        % else
            none.
        % endif
        </p>

        % if row.payments
        <p><strong>Incoming payments:</strong><br>
            % for pt in row.payments
                <span class="symbol">{{ payment_method_icon(pt.payin_method) }}</span>&nbsp;
                {{ locale.format_money(Money(**pt.amount)) }}
                from <a href="/~{{ pt.payer }}/">{{ pt.payer_name }}</a>
                % set ctime = parse_date(pt.ctime)
                on {{ locale.format_date(ctime, 'short_yearless') }}
                at {{ locale.format_time(ctime) }}
                % if pt.team
                through team <a href="/~{{ pt.team }}/">{{ pt.team_name }}</a>
                % endif
                % if pt.status != 'succeeded'
                    ‒ <span class="text-{{ PT_STATUS_MAP.get(pt.status, 'info') }}">{{ pt.status }}</span>
                    % if pt.error
                        ‒ error: <code>{{ pt.error }}</code>
                    % endif
                % endif
                <br>
            % endfor
        </p>
        % endif
        % endif

        <div><strong>Profile descriptions:</strong>
        % if row.statements
            <br>
            % for s in row.statements or ()
                [<em>{{ locale.languages_2.get(s.lang, s.lang) }} {{ s.type }}</em>]
                % if s.type in ('profile', 'sidebar')
                    <section class="profile-statement embedded raw" lang="{{ s.lang }}">{{
                        s.content
                    }}</section>
                % else
                    {{ s.content }}
                % endif
                <br>
            % endfor
        % else
            none. <span class="text-warning">{{ glyphicon('warning-sign') }}</span>
        % endif
        </div>
    % endif
    </div>
    <div class="col-md-4">
        <form action="javascript:" method="POST" class="js-submit">
            <input type="hidden" name="p_id" value="{{ p.id }}">
            <div class="form-group">
                Does this account look fraudulent?<br>
                <label>
                    <input type="radio" name="is_suspended" value="on" {{
                           'checked' if p.is_suspended == True else '' }} />
                    Yes, block payments!
                </label> &nbsp;&nbsp;
                <label>
                    <input type="radio" name="is_suspended" value="off" {{
                           'checked' if p.is_suspended == False else '' }} />
                    No
                </label> &nbsp;&nbsp;
                <label>
                    <input type="radio" name="is_suspended" value="null" />
                    Unsure
                </label>
            </div>
            <div class="form-group">
            % for attr in constants.PROFILE_VISIBILITY_ATTRS
                % set value = getattr(p, attr)
                <label>
                    <input type="checkbox" name="{{ attr }}" {{ 'checked' if value.__and__(2) }} />
                    {{ attr }} (user value: {{ bool(value.__and__(1)) }})
                </label>
                <br>
            % endfor
            </div>
            <button class="btn btn-warning">{{ _("Save") }}</button>
        </form>
        <br>
        % if row.last_change
        <span class="text-muted">{{ _(
            "Last changed {timespan_ago} by {username}.",
            username=row.last_change.recorder_name,
            timespan_ago=to_age(parse_date(row.last_change.ts))
        ) }}</span>
        % endif
    </div>
</div>
<br>
% else
<p>Nothing to show.</p>
% endfor

% if page_end
<a class="btn btn-default btn-lg" href="{{ request.qs.derive(last_showed=page_end) }}">{{ _("Next") }} →</a>
% endif

% endblock
